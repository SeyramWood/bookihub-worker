// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/ent/booking"
	"github.com/SeyramWood/ent/passenger"
)

// Passenger is the model entity for the Passenger schema.
type Passenger struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// FullName holds the value of the "full_name" field.
	FullName string `json:"full_name,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Maturity holds the value of the "maturity" field.
	Maturity passenger.Maturity `json:"maturity,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender passenger.Gender `json:"gender,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PassengerQuery when eager-loading is set.
	Edges              PassengerEdges `json:"edges"`
	booking_passengers *int
	selectValues       sql.SelectValues
}

// PassengerEdges holds the relations/edges for other nodes in the graph.
type PassengerEdges struct {
	// Booking holds the value of the booking edge.
	Booking *Booking `json:"booking,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BookingOrErr returns the Booking value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PassengerEdges) BookingOrErr() (*Booking, error) {
	if e.loadedTypes[0] {
		if e.Booking == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: booking.Label}
		}
		return e.Booking, nil
	}
	return nil, &NotLoadedError{edge: "booking"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Passenger) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case passenger.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case passenger.FieldID:
			values[i] = new(sql.NullInt64)
		case passenger.FieldFullName, passenger.FieldMaturity, passenger.FieldGender:
			values[i] = new(sql.NullString)
		case passenger.FieldCreatedAt, passenger.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case passenger.ForeignKeys[0]: // booking_passengers
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Passenger fields.
func (pa *Passenger) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case passenger.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case passenger.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case passenger.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		case passenger.FieldFullName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_name", values[i])
			} else if value.Valid {
				pa.FullName = value.String
			}
		case passenger.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				pa.Amount = value.Float64
			}
		case passenger.FieldMaturity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field maturity", values[i])
			} else if value.Valid {
				pa.Maturity = passenger.Maturity(value.String)
			}
		case passenger.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				pa.Gender = passenger.Gender(value.String)
			}
		case passenger.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field booking_passengers", value)
			} else if value.Valid {
				pa.booking_passengers = new(int)
				*pa.booking_passengers = int(value.Int64)
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Passenger.
// This includes values selected through modifiers, order, etc.
func (pa *Passenger) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryBooking queries the "booking" edge of the Passenger entity.
func (pa *Passenger) QueryBooking() *BookingQuery {
	return NewPassengerClient(pa.config).QueryBooking(pa)
}

// Update returns a builder for updating this Passenger.
// Note that you need to call Passenger.Unwrap() before calling this method if this Passenger
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Passenger) Update() *PassengerUpdateOne {
	return NewPassengerClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Passenger entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Passenger) Unwrap() *Passenger {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Passenger is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Passenger) String() string {
	var builder strings.Builder
	builder.WriteString("Passenger(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("full_name=")
	builder.WriteString(pa.FullName)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", pa.Amount))
	builder.WriteString(", ")
	builder.WriteString("maturity=")
	builder.WriteString(fmt.Sprintf("%v", pa.Maturity))
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", pa.Gender))
	builder.WriteByte(')')
	return builder.String()
}

// Passengers is a parsable slice of Passenger.
type Passengers []*Passenger
