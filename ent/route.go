// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/ent/company"
	"github.com/SeyramWood/ent/route"
)

// Route is the model entity for the Route schema.
type Route struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// FromLocation holds the value of the "from_location" field.
	FromLocation string `json:"from_location,omitempty"`
	// ToLocation holds the value of the "to_location" field.
	ToLocation string `json:"to_location,omitempty"`
	// FromLatitude holds the value of the "from_latitude" field.
	FromLatitude float64 `json:"from_latitude,omitempty"`
	// FromLongitude holds the value of the "from_longitude" field.
	FromLongitude float64 `json:"from_longitude,omitempty"`
	// ToLatitude holds the value of the "to_latitude" field.
	ToLatitude float64 `json:"to_latitude,omitempty"`
	// ToLongitude holds the value of the "to_longitude" field.
	ToLongitude float64 `json:"to_longitude,omitempty"`
	// Rate holds the value of the "rate" field.
	Rate float64 `json:"rate,omitempty"`
	// Discount holds the value of the "discount" field.
	Discount float32 `json:"discount,omitempty"`
	// Popularity holds the value of the "popularity" field.
	Popularity int `json:"popularity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RouteQuery when eager-loading is set.
	Edges          RouteEdges `json:"edges"`
	company_routes *int
	selectValues   sql.SelectValues
}

// RouteEdges holds the relations/edges for other nodes in the graph.
type RouteEdges struct {
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// Stops holds the value of the stops edge.
	Stops []*RouteStop `json:"stops,omitempty"`
	// Trips holds the value of the trips edge.
	Trips []*Trip `json:"trips,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RouteEdges) CompanyOrErr() (*Company, error) {
	if e.loadedTypes[0] {
		if e.Company == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: company.Label}
		}
		return e.Company, nil
	}
	return nil, &NotLoadedError{edge: "company"}
}

// StopsOrErr returns the Stops value or an error if the edge
// was not loaded in eager-loading.
func (e RouteEdges) StopsOrErr() ([]*RouteStop, error) {
	if e.loadedTypes[1] {
		return e.Stops, nil
	}
	return nil, &NotLoadedError{edge: "stops"}
}

// TripsOrErr returns the Trips value or an error if the edge
// was not loaded in eager-loading.
func (e RouteEdges) TripsOrErr() ([]*Trip, error) {
	if e.loadedTypes[2] {
		return e.Trips, nil
	}
	return nil, &NotLoadedError{edge: "trips"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Route) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case route.FieldFromLatitude, route.FieldFromLongitude, route.FieldToLatitude, route.FieldToLongitude, route.FieldRate, route.FieldDiscount:
			values[i] = new(sql.NullFloat64)
		case route.FieldID, route.FieldPopularity:
			values[i] = new(sql.NullInt64)
		case route.FieldFromLocation, route.FieldToLocation:
			values[i] = new(sql.NullString)
		case route.FieldCreatedAt, route.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case route.ForeignKeys[0]: // company_routes
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Route fields.
func (r *Route) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case route.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case route.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case route.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case route.FieldFromLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_location", values[i])
			} else if value.Valid {
				r.FromLocation = value.String
			}
		case route.FieldToLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to_location", values[i])
			} else if value.Valid {
				r.ToLocation = value.String
			}
		case route.FieldFromLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field from_latitude", values[i])
			} else if value.Valid {
				r.FromLatitude = value.Float64
			}
		case route.FieldFromLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field from_longitude", values[i])
			} else if value.Valid {
				r.FromLongitude = value.Float64
			}
		case route.FieldToLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field to_latitude", values[i])
			} else if value.Valid {
				r.ToLatitude = value.Float64
			}
		case route.FieldToLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field to_longitude", values[i])
			} else if value.Valid {
				r.ToLongitude = value.Float64
			}
		case route.FieldRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field rate", values[i])
			} else if value.Valid {
				r.Rate = value.Float64
			}
		case route.FieldDiscount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field discount", values[i])
			} else if value.Valid {
				r.Discount = float32(value.Float64)
			}
		case route.FieldPopularity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field popularity", values[i])
			} else if value.Valid {
				r.Popularity = int(value.Int64)
			}
		case route.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_routes", value)
			} else if value.Valid {
				r.company_routes = new(int)
				*r.company_routes = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Route.
// This includes values selected through modifiers, order, etc.
func (r *Route) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryCompany queries the "company" edge of the Route entity.
func (r *Route) QueryCompany() *CompanyQuery {
	return NewRouteClient(r.config).QueryCompany(r)
}

// QueryStops queries the "stops" edge of the Route entity.
func (r *Route) QueryStops() *RouteStopQuery {
	return NewRouteClient(r.config).QueryStops(r)
}

// QueryTrips queries the "trips" edge of the Route entity.
func (r *Route) QueryTrips() *TripQuery {
	return NewRouteClient(r.config).QueryTrips(r)
}

// Update returns a builder for updating this Route.
// Note that you need to call Route.Unwrap() before calling this method if this Route
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Route) Update() *RouteUpdateOne {
	return NewRouteClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Route entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Route) Unwrap() *Route {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Route is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Route) String() string {
	var builder strings.Builder
	builder.WriteString("Route(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("from_location=")
	builder.WriteString(r.FromLocation)
	builder.WriteString(", ")
	builder.WriteString("to_location=")
	builder.WriteString(r.ToLocation)
	builder.WriteString(", ")
	builder.WriteString("from_latitude=")
	builder.WriteString(fmt.Sprintf("%v", r.FromLatitude))
	builder.WriteString(", ")
	builder.WriteString("from_longitude=")
	builder.WriteString(fmt.Sprintf("%v", r.FromLongitude))
	builder.WriteString(", ")
	builder.WriteString("to_latitude=")
	builder.WriteString(fmt.Sprintf("%v", r.ToLatitude))
	builder.WriteString(", ")
	builder.WriteString("to_longitude=")
	builder.WriteString(fmt.Sprintf("%v", r.ToLongitude))
	builder.WriteString(", ")
	builder.WriteString("rate=")
	builder.WriteString(fmt.Sprintf("%v", r.Rate))
	builder.WriteString(", ")
	builder.WriteString("discount=")
	builder.WriteString(fmt.Sprintf("%v", r.Discount))
	builder.WriteString(", ")
	builder.WriteString("popularity=")
	builder.WriteString(fmt.Sprintf("%v", r.Popularity))
	builder.WriteByte(')')
	return builder.String()
}

// Routes is a parsable slice of Route.
type Routes []*Route
