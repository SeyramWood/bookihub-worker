// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/bookibus/ent/company"
	"github.com/SeyramWood/bookibus/ent/companyuser"
	"github.com/SeyramWood/bookibus/ent/incident"
	"github.com/SeyramWood/bookibus/ent/trip"
)

// Incident is the model entity for the Incident schema.
type Incident struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Audio holds the value of the "audio" field.
	Audio string `json:"audio,omitempty"`
	// Status holds the value of the "status" field.
	Status incident.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IncidentQuery when eager-loading is set.
	Edges                  IncidentEdges `json:"edges"`
	company_incidents      *int
	company_user_incidents *int
	trip_incidents         *int
	selectValues           sql.SelectValues
}

// IncidentEdges holds the relations/edges for other nodes in the graph.
type IncidentEdges struct {
	// Images holds the value of the images edge.
	Images []*IncidentImage `json:"images,omitempty"`
	// Trip holds the value of the trip edge.
	Trip *Trip `json:"trip,omitempty"`
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// Driver holds the value of the driver edge.
	Driver *CompanyUser `json:"driver,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ImagesOrErr returns the Images value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentEdges) ImagesOrErr() ([]*IncidentImage, error) {
	if e.loadedTypes[0] {
		return e.Images, nil
	}
	return nil, &NotLoadedError{edge: "images"}
}

// TripOrErr returns the Trip value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentEdges) TripOrErr() (*Trip, error) {
	if e.loadedTypes[1] {
		if e.Trip == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: trip.Label}
		}
		return e.Trip, nil
	}
	return nil, &NotLoadedError{edge: "trip"}
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentEdges) CompanyOrErr() (*Company, error) {
	if e.loadedTypes[2] {
		if e.Company == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: company.Label}
		}
		return e.Company, nil
	}
	return nil, &NotLoadedError{edge: "company"}
}

// DriverOrErr returns the Driver value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentEdges) DriverOrErr() (*CompanyUser, error) {
	if e.loadedTypes[3] {
		if e.Driver == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: companyuser.Label}
		}
		return e.Driver, nil
	}
	return nil, &NotLoadedError{edge: "driver"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Incident) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case incident.FieldID:
			values[i] = new(sql.NullInt64)
		case incident.FieldLocation, incident.FieldDescription, incident.FieldType, incident.FieldAudio, incident.FieldStatus:
			values[i] = new(sql.NullString)
		case incident.FieldCreatedAt, incident.FieldUpdatedAt, incident.FieldTime:
			values[i] = new(sql.NullTime)
		case incident.ForeignKeys[0]: // company_incidents
			values[i] = new(sql.NullInt64)
		case incident.ForeignKeys[1]: // company_user_incidents
			values[i] = new(sql.NullInt64)
		case incident.ForeignKeys[2]: // trip_incidents
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Incident fields.
func (i *Incident) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case incident.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case incident.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case incident.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case incident.FieldTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[j])
			} else if value.Valid {
				i.Time = value.Time
			}
		case incident.FieldLocation:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[j])
			} else if value.Valid {
				i.Location = value.String
			}
		case incident.FieldDescription:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[j])
			} else if value.Valid {
				i.Description = value.String
			}
		case incident.FieldType:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[j])
			} else if value.Valid {
				i.Type = value.String
			}
		case incident.FieldAudio:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field audio", values[j])
			} else if value.Valid {
				i.Audio = value.String
			}
		case incident.FieldStatus:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[j])
			} else if value.Valid {
				i.Status = incident.Status(value.String)
			}
		case incident.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_incidents", value)
			} else if value.Valid {
				i.company_incidents = new(int)
				*i.company_incidents = int(value.Int64)
			}
		case incident.ForeignKeys[1]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_user_incidents", value)
			} else if value.Valid {
				i.company_user_incidents = new(int)
				*i.company_user_incidents = int(value.Int64)
			}
		case incident.ForeignKeys[2]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field trip_incidents", value)
			} else if value.Valid {
				i.trip_incidents = new(int)
				*i.trip_incidents = int(value.Int64)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Incident.
// This includes values selected through modifiers, order, etc.
func (i *Incident) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryImages queries the "images" edge of the Incident entity.
func (i *Incident) QueryImages() *IncidentImageQuery {
	return NewIncidentClient(i.config).QueryImages(i)
}

// QueryTrip queries the "trip" edge of the Incident entity.
func (i *Incident) QueryTrip() *TripQuery {
	return NewIncidentClient(i.config).QueryTrip(i)
}

// QueryCompany queries the "company" edge of the Incident entity.
func (i *Incident) QueryCompany() *CompanyQuery {
	return NewIncidentClient(i.config).QueryCompany(i)
}

// QueryDriver queries the "driver" edge of the Incident entity.
func (i *Incident) QueryDriver() *CompanyUserQuery {
	return NewIncidentClient(i.config).QueryDriver(i)
}

// Update returns a builder for updating this Incident.
// Note that you need to call Incident.Unwrap() before calling this method if this Incident
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Incident) Update() *IncidentUpdateOne {
	return NewIncidentClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Incident entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Incident) Unwrap() *Incident {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Incident is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Incident) String() string {
	var builder strings.Builder
	builder.WriteString("Incident(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(i.Time.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(i.Location)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(i.Description)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(i.Type)
	builder.WriteString(", ")
	builder.WriteString("audio=")
	builder.WriteString(i.Audio)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", i.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Incidents is a parsable slice of Incident.
type Incidents []*Incident
