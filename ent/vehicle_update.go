// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/company"
	"github.com/SeyramWood/ent/predicate"
	"github.com/SeyramWood/ent/trip"
	"github.com/SeyramWood/ent/vehicle"
	"github.com/SeyramWood/ent/vehicleimage"
)

// VehicleUpdate is the builder for updating Vehicle entities.
type VehicleUpdate struct {
	config
	hooks     []Hook
	mutation  *VehicleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the VehicleUpdate builder.
func (vu *VehicleUpdate) Where(ps ...predicate.Vehicle) *VehicleUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VehicleUpdate) SetUpdatedAt(t time.Time) *VehicleUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetRegistrationNumber sets the "registration_number" field.
func (vu *VehicleUpdate) SetRegistrationNumber(s string) *VehicleUpdate {
	vu.mutation.SetRegistrationNumber(s)
	return vu
}

// SetModel sets the "model" field.
func (vu *VehicleUpdate) SetModel(s string) *VehicleUpdate {
	vu.mutation.SetModel(s)
	return vu
}

// SetSeat sets the "seat" field.
func (vu *VehicleUpdate) SetSeat(i int) *VehicleUpdate {
	vu.mutation.ResetSeat()
	vu.mutation.SetSeat(i)
	return vu
}

// SetNillableSeat sets the "seat" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableSeat(i *int) *VehicleUpdate {
	if i != nil {
		vu.SetSeat(*i)
	}
	return vu
}

// AddSeat adds i to the "seat" field.
func (vu *VehicleUpdate) AddSeat(i int) *VehicleUpdate {
	vu.mutation.AddSeat(i)
	return vu
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (vu *VehicleUpdate) SetCompanyID(id int) *VehicleUpdate {
	vu.mutation.SetCompanyID(id)
	return vu
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (vu *VehicleUpdate) SetNillableCompanyID(id *int) *VehicleUpdate {
	if id != nil {
		vu = vu.SetCompanyID(*id)
	}
	return vu
}

// SetCompany sets the "company" edge to the Company entity.
func (vu *VehicleUpdate) SetCompany(c *Company) *VehicleUpdate {
	return vu.SetCompanyID(c.ID)
}

// AddImageIDs adds the "images" edge to the VehicleImage entity by IDs.
func (vu *VehicleUpdate) AddImageIDs(ids ...int) *VehicleUpdate {
	vu.mutation.AddImageIDs(ids...)
	return vu
}

// AddImages adds the "images" edges to the VehicleImage entity.
func (vu *VehicleUpdate) AddImages(v ...*VehicleImage) *VehicleUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.AddImageIDs(ids...)
}

// AddTripIDs adds the "trips" edge to the Trip entity by IDs.
func (vu *VehicleUpdate) AddTripIDs(ids ...int) *VehicleUpdate {
	vu.mutation.AddTripIDs(ids...)
	return vu
}

// AddTrips adds the "trips" edges to the Trip entity.
func (vu *VehicleUpdate) AddTrips(t ...*Trip) *VehicleUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return vu.AddTripIDs(ids...)
}

// Mutation returns the VehicleMutation object of the builder.
func (vu *VehicleUpdate) Mutation() *VehicleMutation {
	return vu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (vu *VehicleUpdate) ClearCompany() *VehicleUpdate {
	vu.mutation.ClearCompany()
	return vu
}

// ClearImages clears all "images" edges to the VehicleImage entity.
func (vu *VehicleUpdate) ClearImages() *VehicleUpdate {
	vu.mutation.ClearImages()
	return vu
}

// RemoveImageIDs removes the "images" edge to VehicleImage entities by IDs.
func (vu *VehicleUpdate) RemoveImageIDs(ids ...int) *VehicleUpdate {
	vu.mutation.RemoveImageIDs(ids...)
	return vu
}

// RemoveImages removes "images" edges to VehicleImage entities.
func (vu *VehicleUpdate) RemoveImages(v ...*VehicleImage) *VehicleUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.RemoveImageIDs(ids...)
}

// ClearTrips clears all "trips" edges to the Trip entity.
func (vu *VehicleUpdate) ClearTrips() *VehicleUpdate {
	vu.mutation.ClearTrips()
	return vu
}

// RemoveTripIDs removes the "trips" edge to Trip entities by IDs.
func (vu *VehicleUpdate) RemoveTripIDs(ids ...int) *VehicleUpdate {
	vu.mutation.RemoveTripIDs(ids...)
	return vu
}

// RemoveTrips removes "trips" edges to Trip entities.
func (vu *VehicleUpdate) RemoveTrips(t ...*Trip) *VehicleUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return vu.RemoveTripIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VehicleUpdate) Save(ctx context.Context) (int, error) {
	vu.defaults()
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VehicleUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VehicleUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VehicleUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VehicleUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := vehicle.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VehicleUpdate) check() error {
	if v, ok := vu.mutation.RegistrationNumber(); ok {
		if err := vehicle.RegistrationNumberValidator(v); err != nil {
			return &ValidationError{Name: "registration_number", err: fmt.Errorf(`ent: validator failed for field "Vehicle.registration_number": %w`, err)}
		}
	}
	if v, ok := vu.mutation.Model(); ok {
		if err := vehicle.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`ent: validator failed for field "Vehicle.model": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vu *VehicleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VehicleUpdate {
	vu.modifiers = append(vu.modifiers, modifiers...)
	return vu
}

func (vu *VehicleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vehicle.Table, vehicle.Columns, sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(vehicle.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.RegistrationNumber(); ok {
		_spec.SetField(vehicle.FieldRegistrationNumber, field.TypeString, value)
	}
	if value, ok := vu.mutation.Model(); ok {
		_spec.SetField(vehicle.FieldModel, field.TypeString, value)
	}
	if value, ok := vu.mutation.Seat(); ok {
		_spec.SetField(vehicle.FieldSeat, field.TypeInt, value)
	}
	if value, ok := vu.mutation.AddedSeat(); ok {
		_spec.AddField(vehicle.FieldSeat, field.TypeInt, value)
	}
	if vu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.CompanyTable,
			Columns: []string{vehicle.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.CompanyTable,
			Columns: []string{vehicle.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicle.ImagesTable,
			Columns: []string{vehicle.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicleimage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedImagesIDs(); len(nodes) > 0 && !vu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicle.ImagesTable,
			Columns: []string{vehicle.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicleimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicle.ImagesTable,
			Columns: []string{vehicle.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicleimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.TripsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicle.TripsTable,
			Columns: []string{vehicle.TripsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedTripsIDs(); len(nodes) > 0 && !vu.mutation.TripsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicle.TripsTable,
			Columns: []string{vehicle.TripsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.TripsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicle.TripsTable,
			Columns: []string{vehicle.TripsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VehicleUpdateOne is the builder for updating a single Vehicle entity.
type VehicleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *VehicleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VehicleUpdateOne) SetUpdatedAt(t time.Time) *VehicleUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetRegistrationNumber sets the "registration_number" field.
func (vuo *VehicleUpdateOne) SetRegistrationNumber(s string) *VehicleUpdateOne {
	vuo.mutation.SetRegistrationNumber(s)
	return vuo
}

// SetModel sets the "model" field.
func (vuo *VehicleUpdateOne) SetModel(s string) *VehicleUpdateOne {
	vuo.mutation.SetModel(s)
	return vuo
}

// SetSeat sets the "seat" field.
func (vuo *VehicleUpdateOne) SetSeat(i int) *VehicleUpdateOne {
	vuo.mutation.ResetSeat()
	vuo.mutation.SetSeat(i)
	return vuo
}

// SetNillableSeat sets the "seat" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableSeat(i *int) *VehicleUpdateOne {
	if i != nil {
		vuo.SetSeat(*i)
	}
	return vuo
}

// AddSeat adds i to the "seat" field.
func (vuo *VehicleUpdateOne) AddSeat(i int) *VehicleUpdateOne {
	vuo.mutation.AddSeat(i)
	return vuo
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (vuo *VehicleUpdateOne) SetCompanyID(id int) *VehicleUpdateOne {
	vuo.mutation.SetCompanyID(id)
	return vuo
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableCompanyID(id *int) *VehicleUpdateOne {
	if id != nil {
		vuo = vuo.SetCompanyID(*id)
	}
	return vuo
}

// SetCompany sets the "company" edge to the Company entity.
func (vuo *VehicleUpdateOne) SetCompany(c *Company) *VehicleUpdateOne {
	return vuo.SetCompanyID(c.ID)
}

// AddImageIDs adds the "images" edge to the VehicleImage entity by IDs.
func (vuo *VehicleUpdateOne) AddImageIDs(ids ...int) *VehicleUpdateOne {
	vuo.mutation.AddImageIDs(ids...)
	return vuo
}

// AddImages adds the "images" edges to the VehicleImage entity.
func (vuo *VehicleUpdateOne) AddImages(v ...*VehicleImage) *VehicleUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.AddImageIDs(ids...)
}

// AddTripIDs adds the "trips" edge to the Trip entity by IDs.
func (vuo *VehicleUpdateOne) AddTripIDs(ids ...int) *VehicleUpdateOne {
	vuo.mutation.AddTripIDs(ids...)
	return vuo
}

// AddTrips adds the "trips" edges to the Trip entity.
func (vuo *VehicleUpdateOne) AddTrips(t ...*Trip) *VehicleUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return vuo.AddTripIDs(ids...)
}

// Mutation returns the VehicleMutation object of the builder.
func (vuo *VehicleUpdateOne) Mutation() *VehicleMutation {
	return vuo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (vuo *VehicleUpdateOne) ClearCompany() *VehicleUpdateOne {
	vuo.mutation.ClearCompany()
	return vuo
}

// ClearImages clears all "images" edges to the VehicleImage entity.
func (vuo *VehicleUpdateOne) ClearImages() *VehicleUpdateOne {
	vuo.mutation.ClearImages()
	return vuo
}

// RemoveImageIDs removes the "images" edge to VehicleImage entities by IDs.
func (vuo *VehicleUpdateOne) RemoveImageIDs(ids ...int) *VehicleUpdateOne {
	vuo.mutation.RemoveImageIDs(ids...)
	return vuo
}

// RemoveImages removes "images" edges to VehicleImage entities.
func (vuo *VehicleUpdateOne) RemoveImages(v ...*VehicleImage) *VehicleUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.RemoveImageIDs(ids...)
}

// ClearTrips clears all "trips" edges to the Trip entity.
func (vuo *VehicleUpdateOne) ClearTrips() *VehicleUpdateOne {
	vuo.mutation.ClearTrips()
	return vuo
}

// RemoveTripIDs removes the "trips" edge to Trip entities by IDs.
func (vuo *VehicleUpdateOne) RemoveTripIDs(ids ...int) *VehicleUpdateOne {
	vuo.mutation.RemoveTripIDs(ids...)
	return vuo
}

// RemoveTrips removes "trips" edges to Trip entities.
func (vuo *VehicleUpdateOne) RemoveTrips(t ...*Trip) *VehicleUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return vuo.RemoveTripIDs(ids...)
}

// Where appends a list predicates to the VehicleUpdate builder.
func (vuo *VehicleUpdateOne) Where(ps ...predicate.Vehicle) *VehicleUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VehicleUpdateOne) Select(field string, fields ...string) *VehicleUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vehicle entity.
func (vuo *VehicleUpdateOne) Save(ctx context.Context) (*Vehicle, error) {
	vuo.defaults()
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VehicleUpdateOne) SaveX(ctx context.Context) *Vehicle {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VehicleUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VehicleUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VehicleUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := vehicle.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VehicleUpdateOne) check() error {
	if v, ok := vuo.mutation.RegistrationNumber(); ok {
		if err := vehicle.RegistrationNumberValidator(v); err != nil {
			return &ValidationError{Name: "registration_number", err: fmt.Errorf(`ent: validator failed for field "Vehicle.registration_number": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.Model(); ok {
		if err := vehicle.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`ent: validator failed for field "Vehicle.model": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vuo *VehicleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VehicleUpdateOne {
	vuo.modifiers = append(vuo.modifiers, modifiers...)
	return vuo
}

func (vuo *VehicleUpdateOne) sqlSave(ctx context.Context) (_node *Vehicle, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vehicle.Table, vehicle.Columns, sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vehicle.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vehicle.FieldID)
		for _, f := range fields {
			if !vehicle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vehicle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(vehicle.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.RegistrationNumber(); ok {
		_spec.SetField(vehicle.FieldRegistrationNumber, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Model(); ok {
		_spec.SetField(vehicle.FieldModel, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Seat(); ok {
		_spec.SetField(vehicle.FieldSeat, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.AddedSeat(); ok {
		_spec.AddField(vehicle.FieldSeat, field.TypeInt, value)
	}
	if vuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.CompanyTable,
			Columns: []string{vehicle.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.CompanyTable,
			Columns: []string{vehicle.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicle.ImagesTable,
			Columns: []string{vehicle.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicleimage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !vuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicle.ImagesTable,
			Columns: []string{vehicle.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicleimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicle.ImagesTable,
			Columns: []string{vehicle.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicleimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.TripsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicle.TripsTable,
			Columns: []string{vehicle.TripsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedTripsIDs(); len(nodes) > 0 && !vuo.mutation.TripsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicle.TripsTable,
			Columns: []string{vehicle.TripsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.TripsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicle.TripsTable,
			Columns: []string{vehicle.TripsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vuo.modifiers...)
	_node = &Vehicle{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
