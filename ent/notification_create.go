// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/bookibususer"
	"github.com/SeyramWood/ent/company"
	"github.com/SeyramWood/ent/companyuser"
	"github.com/SeyramWood/ent/customer"
	"github.com/SeyramWood/ent/notification"
	"github.com/SeyramWood/ent/schema"
)

// NotificationCreate is the builder for creating a Notification entity.
type NotificationCreate struct {
	config
	mutation *NotificationMutation
	hooks    []Hook
}

// SetEvent sets the "event" field.
func (nc *NotificationCreate) SetEvent(s string) *NotificationCreate {
	nc.mutation.SetEvent(s)
	return nc
}

// SetActivity sets the "activity" field.
func (nc *NotificationCreate) SetActivity(s string) *NotificationCreate {
	nc.mutation.SetActivity(s)
	return nc
}

// SetDescription sets the "description" field.
func (nc *NotificationCreate) SetDescription(s string) *NotificationCreate {
	nc.mutation.SetDescription(s)
	return nc
}

// SetSubjectType sets the "subject_type" field.
func (nc *NotificationCreate) SetSubjectType(s string) *NotificationCreate {
	nc.mutation.SetSubjectType(s)
	return nc
}

// SetSubjectID sets the "subject_id" field.
func (nc *NotificationCreate) SetSubjectID(i int) *NotificationCreate {
	nc.mutation.SetSubjectID(i)
	return nc
}

// SetNillableSubjectID sets the "subject_id" field if the given value is not nil.
func (nc *NotificationCreate) SetNillableSubjectID(i *int) *NotificationCreate {
	if i != nil {
		nc.SetSubjectID(*i)
	}
	return nc
}

// SetCreatorType sets the "creator_type" field.
func (nc *NotificationCreate) SetCreatorType(s string) *NotificationCreate {
	nc.mutation.SetCreatorType(s)
	return nc
}

// SetCreatorID sets the "creator_id" field.
func (nc *NotificationCreate) SetCreatorID(i int) *NotificationCreate {
	nc.mutation.SetCreatorID(i)
	return nc
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (nc *NotificationCreate) SetNillableCreatorID(i *int) *NotificationCreate {
	if i != nil {
		nc.SetCreatorID(*i)
	}
	return nc
}

// SetCustomerReadAt sets the "customer_read_at" field.
func (nc *NotificationCreate) SetCustomerReadAt(s string) *NotificationCreate {
	nc.mutation.SetCustomerReadAt(s)
	return nc
}

// SetNillableCustomerReadAt sets the "customer_read_at" field if the given value is not nil.
func (nc *NotificationCreate) SetNillableCustomerReadAt(s *string) *NotificationCreate {
	if s != nil {
		nc.SetCustomerReadAt(*s)
	}
	return nc
}

// SetBookibusReadAt sets the "bookibus_read_at" field.
func (nc *NotificationCreate) SetBookibusReadAt(sr []*schema.NotificationRead) *NotificationCreate {
	nc.mutation.SetBookibusReadAt(sr)
	return nc
}

// SetCompanyReadAt sets the "company_read_at" field.
func (nc *NotificationCreate) SetCompanyReadAt(sr []*schema.NotificationRead) *NotificationCreate {
	nc.mutation.SetCompanyReadAt(sr)
	return nc
}

// SetData sets the "data" field.
func (nc *NotificationCreate) SetData(s *struct {
	Data interface{} "json:\"data\""
}) *NotificationCreate {
	nc.mutation.SetData(s)
	return nc
}

// AddBookibusUserIDs adds the "bookibus_user" edge to the BookibusUser entity by IDs.
func (nc *NotificationCreate) AddBookibusUserIDs(ids ...int) *NotificationCreate {
	nc.mutation.AddBookibusUserIDs(ids...)
	return nc
}

// AddBookibusUser adds the "bookibus_user" edges to the BookibusUser entity.
func (nc *NotificationCreate) AddBookibusUser(b ...*BookibusUser) *NotificationCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return nc.AddBookibusUserIDs(ids...)
}

// AddCompanyUserIDs adds the "company_user" edge to the CompanyUser entity by IDs.
func (nc *NotificationCreate) AddCompanyUserIDs(ids ...int) *NotificationCreate {
	nc.mutation.AddCompanyUserIDs(ids...)
	return nc
}

// AddCompanyUser adds the "company_user" edges to the CompanyUser entity.
func (nc *NotificationCreate) AddCompanyUser(c ...*CompanyUser) *NotificationCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nc.AddCompanyUserIDs(ids...)
}

// AddCustomerIDs adds the "customer" edge to the Customer entity by IDs.
func (nc *NotificationCreate) AddCustomerIDs(ids ...int) *NotificationCreate {
	nc.mutation.AddCustomerIDs(ids...)
	return nc
}

// AddCustomer adds the "customer" edges to the Customer entity.
func (nc *NotificationCreate) AddCustomer(c ...*Customer) *NotificationCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nc.AddCustomerIDs(ids...)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (nc *NotificationCreate) SetCompanyID(id int) *NotificationCreate {
	nc.mutation.SetCompanyID(id)
	return nc
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (nc *NotificationCreate) SetNillableCompanyID(id *int) *NotificationCreate {
	if id != nil {
		nc = nc.SetCompanyID(*id)
	}
	return nc
}

// SetCompany sets the "company" edge to the Company entity.
func (nc *NotificationCreate) SetCompany(c *Company) *NotificationCreate {
	return nc.SetCompanyID(c.ID)
}

// Mutation returns the NotificationMutation object of the builder.
func (nc *NotificationCreate) Mutation() *NotificationMutation {
	return nc.mutation
}

// Save creates the Notification in the database.
func (nc *NotificationCreate) Save(ctx context.Context) (*Notification, error) {
	return withHooks(ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NotificationCreate) SaveX(ctx context.Context) *Notification {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NotificationCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NotificationCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NotificationCreate) check() error {
	if _, ok := nc.mutation.Event(); !ok {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required field "Notification.event"`)}
	}
	if v, ok := nc.mutation.Event(); ok {
		if err := notification.EventValidator(v); err != nil {
			return &ValidationError{Name: "event", err: fmt.Errorf(`ent: validator failed for field "Notification.event": %w`, err)}
		}
	}
	if _, ok := nc.mutation.Activity(); !ok {
		return &ValidationError{Name: "activity", err: errors.New(`ent: missing required field "Notification.activity"`)}
	}
	if v, ok := nc.mutation.Activity(); ok {
		if err := notification.ActivityValidator(v); err != nil {
			return &ValidationError{Name: "activity", err: fmt.Errorf(`ent: validator failed for field "Notification.activity": %w`, err)}
		}
	}
	if _, ok := nc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Notification.description"`)}
	}
	if v, ok := nc.mutation.Description(); ok {
		if err := notification.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Notification.description": %w`, err)}
		}
	}
	if _, ok := nc.mutation.SubjectType(); !ok {
		return &ValidationError{Name: "subject_type", err: errors.New(`ent: missing required field "Notification.subject_type"`)}
	}
	if v, ok := nc.mutation.SubjectType(); ok {
		if err := notification.SubjectTypeValidator(v); err != nil {
			return &ValidationError{Name: "subject_type", err: fmt.Errorf(`ent: validator failed for field "Notification.subject_type": %w`, err)}
		}
	}
	if _, ok := nc.mutation.CreatorType(); !ok {
		return &ValidationError{Name: "creator_type", err: errors.New(`ent: missing required field "Notification.creator_type"`)}
	}
	if v, ok := nc.mutation.CreatorType(); ok {
		if err := notification.CreatorTypeValidator(v); err != nil {
			return &ValidationError{Name: "creator_type", err: fmt.Errorf(`ent: validator failed for field "Notification.creator_type": %w`, err)}
		}
	}
	return nil
}

func (nc *NotificationCreate) sqlSave(ctx context.Context) (*Notification, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NotificationCreate) createSpec() (*Notification, *sqlgraph.CreateSpec) {
	var (
		_node = &Notification{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(notification.Table, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt))
	)
	if value, ok := nc.mutation.Event(); ok {
		_spec.SetField(notification.FieldEvent, field.TypeString, value)
		_node.Event = value
	}
	if value, ok := nc.mutation.Activity(); ok {
		_spec.SetField(notification.FieldActivity, field.TypeString, value)
		_node.Activity = value
	}
	if value, ok := nc.mutation.Description(); ok {
		_spec.SetField(notification.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := nc.mutation.SubjectType(); ok {
		_spec.SetField(notification.FieldSubjectType, field.TypeString, value)
		_node.SubjectType = value
	}
	if value, ok := nc.mutation.SubjectID(); ok {
		_spec.SetField(notification.FieldSubjectID, field.TypeInt, value)
		_node.SubjectID = value
	}
	if value, ok := nc.mutation.CreatorType(); ok {
		_spec.SetField(notification.FieldCreatorType, field.TypeString, value)
		_node.CreatorType = value
	}
	if value, ok := nc.mutation.CreatorID(); ok {
		_spec.SetField(notification.FieldCreatorID, field.TypeInt, value)
		_node.CreatorID = value
	}
	if value, ok := nc.mutation.CustomerReadAt(); ok {
		_spec.SetField(notification.FieldCustomerReadAt, field.TypeString, value)
		_node.CustomerReadAt = value
	}
	if value, ok := nc.mutation.BookibusReadAt(); ok {
		_spec.SetField(notification.FieldBookibusReadAt, field.TypeJSON, value)
		_node.BookibusReadAt = value
	}
	if value, ok := nc.mutation.CompanyReadAt(); ok {
		_spec.SetField(notification.FieldCompanyReadAt, field.TypeJSON, value)
		_node.CompanyReadAt = value
	}
	if value, ok := nc.mutation.Data(); ok {
		_spec.SetField(notification.FieldData, field.TypeJSON, value)
		_node.Data = value
	}
	if nodes := nc.mutation.BookibusUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.BookibusUserTable,
			Columns: notification.BookibusUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookibususer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.CompanyUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.CompanyUserTable,
			Columns: notification.CompanyUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.CustomerTable,
			Columns: notification.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.CompanyTable,
			Columns: []string{notification.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_notifications = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NotificationCreateBulk is the builder for creating many Notification entities in bulk.
type NotificationCreateBulk struct {
	config
	err      error
	builders []*NotificationCreate
}

// Save creates the Notification entities in the database.
func (ncb *NotificationCreateBulk) Save(ctx context.Context) ([]*Notification, error) {
	if ncb.err != nil {
		return nil, ncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Notification, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NotificationCreateBulk) SaveX(ctx context.Context) []*Notification {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NotificationCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NotificationCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}
