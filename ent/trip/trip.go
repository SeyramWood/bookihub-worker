// Code generated by ent, DO NOT EDIT.

package trip

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the trip type in the database.
	Label = "trip"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDepartureDate holds the string denoting the departure_date field in the database.
	FieldDepartureDate = "departure_date"
	// FieldArrivalDate holds the string denoting the arrival_date field in the database.
	FieldArrivalDate = "arrival_date"
	// FieldReturnDate holds the string denoting the return_date field in the database.
	FieldReturnDate = "return_date"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldExteriorInspected holds the string denoting the exterior_inspected field in the database.
	FieldExteriorInspected = "exterior_inspected"
	// FieldInteriorInspected holds the string denoting the interior_inspected field in the database.
	FieldInteriorInspected = "interior_inspected"
	// FieldEngineCompartmentInspected holds the string denoting the engine_compartment_inspected field in the database.
	FieldEngineCompartmentInspected = "engine_compartment_inspected"
	// FieldBrakeAndSteeringInspected holds the string denoting the brake_and_steering_inspected field in the database.
	FieldBrakeAndSteeringInspected = "brake_and_steering_inspected"
	// FieldEmergencyEquipmentInspected holds the string denoting the emergency_equipment_inspected field in the database.
	FieldEmergencyEquipmentInspected = "emergency_equipment_inspected"
	// FieldFuelAndFluidsInspected holds the string denoting the fuel_and_fluids_inspected field in the database.
	FieldFuelAndFluidsInspected = "fuel_and_fluids_inspected"
	// FieldScheduled holds the string denoting the scheduled field in the database.
	FieldScheduled = "scheduled"
	// FieldSeatLeft holds the string denoting the seat_left field in the database.
	FieldSeatLeft = "seat_left"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldBoardingPoints holds the string denoting the boarding_points field in the database.
	FieldBoardingPoints = "boarding_points"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// EdgeDriver holds the string denoting the driver edge name in mutations.
	EdgeDriver = "driver"
	// EdgeVehicle holds the string denoting the vehicle edge name in mutations.
	EdgeVehicle = "vehicle"
	// EdgeRoute holds the string denoting the route edge name in mutations.
	EdgeRoute = "route"
	// EdgeBookings holds the string denoting the bookings edge name in mutations.
	EdgeBookings = "bookings"
	// Table holds the table name of the trip in the database.
	Table = "trips"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "trips"
	// CompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompanyInverseTable = "companies"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "company_trips"
	// DriverTable is the table that holds the driver relation/edge.
	DriverTable = "trips"
	// DriverInverseTable is the table name for the CompanyUser entity.
	// It exists in this package in order to avoid circular dependency with the "companyuser" package.
	DriverInverseTable = "company_users"
	// DriverColumn is the table column denoting the driver relation/edge.
	DriverColumn = "company_user_trips"
	// VehicleTable is the table that holds the vehicle relation/edge.
	VehicleTable = "trips"
	// VehicleInverseTable is the table name for the Vehicle entity.
	// It exists in this package in order to avoid circular dependency with the "vehicle" package.
	VehicleInverseTable = "vehicles"
	// VehicleColumn is the table column denoting the vehicle relation/edge.
	VehicleColumn = "vehicle_trips"
	// RouteTable is the table that holds the route relation/edge.
	RouteTable = "trips"
	// RouteInverseTable is the table name for the Route entity.
	// It exists in this package in order to avoid circular dependency with the "route" package.
	RouteInverseTable = "routes"
	// RouteColumn is the table column denoting the route relation/edge.
	RouteColumn = "route_trips"
	// BookingsTable is the table that holds the bookings relation/edge.
	BookingsTable = "bookings"
	// BookingsInverseTable is the table name for the Booking entity.
	// It exists in this package in order to avoid circular dependency with the "booking" package.
	BookingsInverseTable = "bookings"
	// BookingsColumn is the table column denoting the bookings relation/edge.
	BookingsColumn = "trip_bookings"
)

// Columns holds all SQL columns for trip fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDepartureDate,
	FieldArrivalDate,
	FieldReturnDate,
	FieldType,
	FieldExteriorInspected,
	FieldInteriorInspected,
	FieldEngineCompartmentInspected,
	FieldBrakeAndSteeringInspected,
	FieldEmergencyEquipmentInspected,
	FieldFuelAndFluidsInspected,
	FieldScheduled,
	FieldSeatLeft,
	FieldStatus,
	FieldBoardingPoints,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "trips"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"company_trips",
	"company_user_trips",
	"route_trips",
	"vehicle_trips",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultExteriorInspected holds the default value on creation for the "exterior_inspected" field.
	DefaultExteriorInspected bool
	// DefaultInteriorInspected holds the default value on creation for the "interior_inspected" field.
	DefaultInteriorInspected bool
	// DefaultEngineCompartmentInspected holds the default value on creation for the "engine_compartment_inspected" field.
	DefaultEngineCompartmentInspected bool
	// DefaultBrakeAndSteeringInspected holds the default value on creation for the "brake_and_steering_inspected" field.
	DefaultBrakeAndSteeringInspected bool
	// DefaultEmergencyEquipmentInspected holds the default value on creation for the "emergency_equipment_inspected" field.
	DefaultEmergencyEquipmentInspected bool
	// DefaultFuelAndFluidsInspected holds the default value on creation for the "fuel_and_fluids_inspected" field.
	DefaultFuelAndFluidsInspected bool
	// DefaultScheduled holds the default value on creation for the "scheduled" field.
	DefaultScheduled bool
	// DefaultSeatLeft holds the default value on creation for the "seat_left" field.
	DefaultSeatLeft int
)

// Type defines the type for the "type" enum field.
type Type string

// TypeOneway is the default value of the Type enum.
const DefaultType = TypeOneway

// Type values.
const (
	TypeOneway Type = "oneway"
	TypeRound  Type = "round"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeOneway, TypeRound:
		return nil
	default:
		return fmt.Errorf("trip: invalid enum value for type field: %q", _type)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusStarted Status = "started"
	StatusEnded   Status = "ended"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusStarted, StatusEnded:
		return nil
	default:
		return fmt.Errorf("trip: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Trip queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDepartureDate orders the results by the departure_date field.
func ByDepartureDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartureDate, opts...).ToFunc()
}

// ByArrivalDate orders the results by the arrival_date field.
func ByArrivalDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArrivalDate, opts...).ToFunc()
}

// ByReturnDate orders the results by the return_date field.
func ByReturnDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReturnDate, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByExteriorInspected orders the results by the exterior_inspected field.
func ByExteriorInspected(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExteriorInspected, opts...).ToFunc()
}

// ByInteriorInspected orders the results by the interior_inspected field.
func ByInteriorInspected(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInteriorInspected, opts...).ToFunc()
}

// ByEngineCompartmentInspected orders the results by the engine_compartment_inspected field.
func ByEngineCompartmentInspected(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEngineCompartmentInspected, opts...).ToFunc()
}

// ByBrakeAndSteeringInspected orders the results by the brake_and_steering_inspected field.
func ByBrakeAndSteeringInspected(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrakeAndSteeringInspected, opts...).ToFunc()
}

// ByEmergencyEquipmentInspected orders the results by the emergency_equipment_inspected field.
func ByEmergencyEquipmentInspected(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmergencyEquipmentInspected, opts...).ToFunc()
}

// ByFuelAndFluidsInspected orders the results by the fuel_and_fluids_inspected field.
func ByFuelAndFluidsInspected(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFuelAndFluidsInspected, opts...).ToFunc()
}

// ByScheduled orders the results by the scheduled field.
func ByScheduled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheduled, opts...).ToFunc()
}

// BySeatLeft orders the results by the seat_left field.
func BySeatLeft(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeatLeft, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCompanyField orders the results by company field.
func ByCompanyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyStep(), sql.OrderByField(field, opts...))
	}
}

// ByDriverField orders the results by driver field.
func ByDriverField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDriverStep(), sql.OrderByField(field, opts...))
	}
}

// ByVehicleField orders the results by vehicle field.
func ByVehicleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVehicleStep(), sql.OrderByField(field, opts...))
	}
}

// ByRouteField orders the results by route field.
func ByRouteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRouteStep(), sql.OrderByField(field, opts...))
	}
}

// ByBookingsCount orders the results by bookings count.
func ByBookingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBookingsStep(), opts...)
	}
}

// ByBookings orders the results by bookings terms.
func ByBookings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBookingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
	)
}
func newDriverStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DriverInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DriverTable, DriverColumn),
	)
}
func newVehicleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VehicleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, VehicleTable, VehicleColumn),
	)
}
func newRouteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RouteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RouteTable, RouteColumn),
	)
}
func newBookingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BookingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BookingsTable, BookingsColumn),
	)
}
