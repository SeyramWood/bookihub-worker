// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/bookibus/ent/company"
	"github.com/SeyramWood/bookibus/ent/terminal"
)

// Terminal is the model entity for the Terminal schema.
type Terminal struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude float64 `json:"latitude,omitempty"`
	// Longitude holds the value of the "longitude" field.
	Longitude float64 `json:"longitude,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TerminalQuery when eager-loading is set.
	Edges             TerminalEdges `json:"edges"`
	company_terminals *int
	selectValues      sql.SelectValues
}

// TerminalEdges holds the relations/edges for other nodes in the graph.
type TerminalEdges struct {
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// From holds the value of the from edge.
	From []*Trip `json:"from,omitempty"`
	// To holds the value of the to edge.
	To []*Trip `json:"to,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TerminalEdges) CompanyOrErr() (*Company, error) {
	if e.loadedTypes[0] {
		if e.Company == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: company.Label}
		}
		return e.Company, nil
	}
	return nil, &NotLoadedError{edge: "company"}
}

// FromOrErr returns the From value or an error if the edge
// was not loaded in eager-loading.
func (e TerminalEdges) FromOrErr() ([]*Trip, error) {
	if e.loadedTypes[1] {
		return e.From, nil
	}
	return nil, &NotLoadedError{edge: "from"}
}

// ToOrErr returns the To value or an error if the edge
// was not loaded in eager-loading.
func (e TerminalEdges) ToOrErr() ([]*Trip, error) {
	if e.loadedTypes[2] {
		return e.To, nil
	}
	return nil, &NotLoadedError{edge: "to"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Terminal) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case terminal.FieldLatitude, terminal.FieldLongitude:
			values[i] = new(sql.NullFloat64)
		case terminal.FieldID:
			values[i] = new(sql.NullInt64)
		case terminal.FieldAddress:
			values[i] = new(sql.NullString)
		case terminal.FieldCreatedAt, terminal.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case terminal.ForeignKeys[0]: // company_terminals
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Terminal fields.
func (t *Terminal) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case terminal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case terminal.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case terminal.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case terminal.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				t.Address = value.String
			}
		case terminal.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				t.Latitude = value.Float64
			}
		case terminal.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				t.Longitude = value.Float64
			}
		case terminal.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_terminals", value)
			} else if value.Valid {
				t.company_terminals = new(int)
				*t.company_terminals = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Terminal.
// This includes values selected through modifiers, order, etc.
func (t *Terminal) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryCompany queries the "company" edge of the Terminal entity.
func (t *Terminal) QueryCompany() *CompanyQuery {
	return NewTerminalClient(t.config).QueryCompany(t)
}

// QueryFrom queries the "from" edge of the Terminal entity.
func (t *Terminal) QueryFrom() *TripQuery {
	return NewTerminalClient(t.config).QueryFrom(t)
}

// QueryTo queries the "to" edge of the Terminal entity.
func (t *Terminal) QueryTo() *TripQuery {
	return NewTerminalClient(t.config).QueryTo(t)
}

// Update returns a builder for updating this Terminal.
// Note that you need to call Terminal.Unwrap() before calling this method if this Terminal
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Terminal) Update() *TerminalUpdateOne {
	return NewTerminalClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Terminal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Terminal) Unwrap() *Terminal {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Terminal is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Terminal) String() string {
	var builder strings.Builder
	builder.WriteString("Terminal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(t.Address)
	builder.WriteString(", ")
	builder.WriteString("latitude=")
	builder.WriteString(fmt.Sprintf("%v", t.Latitude))
	builder.WriteString(", ")
	builder.WriteString("longitude=")
	builder.WriteString(fmt.Sprintf("%v", t.Longitude))
	builder.WriteByte(')')
	return builder.String()
}

// Terminals is a parsable slice of Terminal.
type Terminals []*Terminal
