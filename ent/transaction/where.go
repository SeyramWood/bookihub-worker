// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/SeyramWood/bookibus/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldUpdatedAt, v))
}

// Reference applies equality check predicate on the "reference" field. It's identical to ReferenceEQ.
func Reference(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldReference, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAmount, v))
}

// Vat applies equality check predicate on the "vat" field. It's identical to VatEQ.
func Vat(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldVat, v))
}

// TransactionFee applies equality check predicate on the "transaction_fee" field. It's identical to TransactionFeeEQ.
func TransactionFee(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTransactionFee, v))
}

// CancellationFee applies equality check predicate on the "cancellation_fee" field. It's identical to CancellationFeeEQ.
func CancellationFee(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCancellationFee, v))
}

// PaidAt applies equality check predicate on the "paid_at" field. It's identical to PaidAtEQ.
func PaidAt(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaidAt, v))
}

// CanceledAt applies equality check predicate on the "canceled_at" field. It's identical to CanceledAtEQ.
func CanceledAt(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCanceledAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldUpdatedAt, v))
}

// ReferenceEQ applies the EQ predicate on the "reference" field.
func ReferenceEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldReference, v))
}

// ReferenceNEQ applies the NEQ predicate on the "reference" field.
func ReferenceNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldReference, v))
}

// ReferenceIn applies the In predicate on the "reference" field.
func ReferenceIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldReference, vs...))
}

// ReferenceNotIn applies the NotIn predicate on the "reference" field.
func ReferenceNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldReference, vs...))
}

// ReferenceGT applies the GT predicate on the "reference" field.
func ReferenceGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldReference, v))
}

// ReferenceGTE applies the GTE predicate on the "reference" field.
func ReferenceGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldReference, v))
}

// ReferenceLT applies the LT predicate on the "reference" field.
func ReferenceLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldReference, v))
}

// ReferenceLTE applies the LTE predicate on the "reference" field.
func ReferenceLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldReference, v))
}

// ReferenceContains applies the Contains predicate on the "reference" field.
func ReferenceContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldReference, v))
}

// ReferenceHasPrefix applies the HasPrefix predicate on the "reference" field.
func ReferenceHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldReference, v))
}

// ReferenceHasSuffix applies the HasSuffix predicate on the "reference" field.
func ReferenceHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldReference, v))
}

// ReferenceEqualFold applies the EqualFold predicate on the "reference" field.
func ReferenceEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldReference, v))
}

// ReferenceContainsFold applies the ContainsFold predicate on the "reference" field.
func ReferenceContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldReference, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldAmount, v))
}

// VatEQ applies the EQ predicate on the "vat" field.
func VatEQ(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldVat, v))
}

// VatNEQ applies the NEQ predicate on the "vat" field.
func VatNEQ(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldVat, v))
}

// VatIn applies the In predicate on the "vat" field.
func VatIn(vs ...float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldVat, vs...))
}

// VatNotIn applies the NotIn predicate on the "vat" field.
func VatNotIn(vs ...float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldVat, vs...))
}

// VatGT applies the GT predicate on the "vat" field.
func VatGT(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldVat, v))
}

// VatGTE applies the GTE predicate on the "vat" field.
func VatGTE(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldVat, v))
}

// VatLT applies the LT predicate on the "vat" field.
func VatLT(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldVat, v))
}

// VatLTE applies the LTE predicate on the "vat" field.
func VatLTE(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldVat, v))
}

// TransactionFeeEQ applies the EQ predicate on the "transaction_fee" field.
func TransactionFeeEQ(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTransactionFee, v))
}

// TransactionFeeNEQ applies the NEQ predicate on the "transaction_fee" field.
func TransactionFeeNEQ(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTransactionFee, v))
}

// TransactionFeeIn applies the In predicate on the "transaction_fee" field.
func TransactionFeeIn(vs ...float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTransactionFee, vs...))
}

// TransactionFeeNotIn applies the NotIn predicate on the "transaction_fee" field.
func TransactionFeeNotIn(vs ...float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTransactionFee, vs...))
}

// TransactionFeeGT applies the GT predicate on the "transaction_fee" field.
func TransactionFeeGT(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldTransactionFee, v))
}

// TransactionFeeGTE applies the GTE predicate on the "transaction_fee" field.
func TransactionFeeGTE(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldTransactionFee, v))
}

// TransactionFeeLT applies the LT predicate on the "transaction_fee" field.
func TransactionFeeLT(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldTransactionFee, v))
}

// TransactionFeeLTE applies the LTE predicate on the "transaction_fee" field.
func TransactionFeeLTE(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldTransactionFee, v))
}

// CancellationFeeEQ applies the EQ predicate on the "cancellation_fee" field.
func CancellationFeeEQ(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCancellationFee, v))
}

// CancellationFeeNEQ applies the NEQ predicate on the "cancellation_fee" field.
func CancellationFeeNEQ(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldCancellationFee, v))
}

// CancellationFeeIn applies the In predicate on the "cancellation_fee" field.
func CancellationFeeIn(vs ...float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldCancellationFee, vs...))
}

// CancellationFeeNotIn applies the NotIn predicate on the "cancellation_fee" field.
func CancellationFeeNotIn(vs ...float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldCancellationFee, vs...))
}

// CancellationFeeGT applies the GT predicate on the "cancellation_fee" field.
func CancellationFeeGT(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldCancellationFee, v))
}

// CancellationFeeGTE applies the GTE predicate on the "cancellation_fee" field.
func CancellationFeeGTE(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldCancellationFee, v))
}

// CancellationFeeLT applies the LT predicate on the "cancellation_fee" field.
func CancellationFeeLT(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldCancellationFee, v))
}

// CancellationFeeLTE applies the LTE predicate on the "cancellation_fee" field.
func CancellationFeeLTE(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldCancellationFee, v))
}

// PaidAtEQ applies the EQ predicate on the "paid_at" field.
func PaidAtEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaidAt, v))
}

// PaidAtNEQ applies the NEQ predicate on the "paid_at" field.
func PaidAtNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaidAt, v))
}

// PaidAtIn applies the In predicate on the "paid_at" field.
func PaidAtIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaidAt, vs...))
}

// PaidAtNotIn applies the NotIn predicate on the "paid_at" field.
func PaidAtNotIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaidAt, vs...))
}

// PaidAtGT applies the GT predicate on the "paid_at" field.
func PaidAtGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaidAt, v))
}

// PaidAtGTE applies the GTE predicate on the "paid_at" field.
func PaidAtGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaidAt, v))
}

// PaidAtLT applies the LT predicate on the "paid_at" field.
func PaidAtLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaidAt, v))
}

// PaidAtLTE applies the LTE predicate on the "paid_at" field.
func PaidAtLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaidAt, v))
}

// PaidAtIsNil applies the IsNil predicate on the "paid_at" field.
func PaidAtIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldPaidAt))
}

// PaidAtNotNil applies the NotNil predicate on the "paid_at" field.
func PaidAtNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldPaidAt))
}

// CanceledAtEQ applies the EQ predicate on the "canceled_at" field.
func CanceledAtEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCanceledAt, v))
}

// CanceledAtNEQ applies the NEQ predicate on the "canceled_at" field.
func CanceledAtNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldCanceledAt, v))
}

// CanceledAtIn applies the In predicate on the "canceled_at" field.
func CanceledAtIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldCanceledAt, vs...))
}

// CanceledAtNotIn applies the NotIn predicate on the "canceled_at" field.
func CanceledAtNotIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldCanceledAt, vs...))
}

// CanceledAtGT applies the GT predicate on the "canceled_at" field.
func CanceledAtGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldCanceledAt, v))
}

// CanceledAtGTE applies the GTE predicate on the "canceled_at" field.
func CanceledAtGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldCanceledAt, v))
}

// CanceledAtLT applies the LT predicate on the "canceled_at" field.
func CanceledAtLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldCanceledAt, v))
}

// CanceledAtLTE applies the LTE predicate on the "canceled_at" field.
func CanceledAtLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldCanceledAt, v))
}

// CanceledAtIsNil applies the IsNil predicate on the "canceled_at" field.
func CanceledAtIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldCanceledAt))
}

// CanceledAtNotNil applies the NotNil predicate on the "canceled_at" field.
func CanceledAtNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldCanceledAt))
}

// ChannelEQ applies the EQ predicate on the "channel" field.
func ChannelEQ(v Channel) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldChannel, v))
}

// ChannelNEQ applies the NEQ predicate on the "channel" field.
func ChannelNEQ(v Channel) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldChannel, v))
}

// ChannelIn applies the In predicate on the "channel" field.
func ChannelIn(vs ...Channel) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldChannel, vs...))
}

// ChannelNotIn applies the NotIn predicate on the "channel" field.
func ChannelNotIn(vs ...Channel) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldChannel, vs...))
}

// TansKindEQ applies the EQ predicate on the "tans_kind" field.
func TansKindEQ(v TansKind) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTansKind, v))
}

// TansKindNEQ applies the NEQ predicate on the "tans_kind" field.
func TansKindNEQ(v TansKind) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTansKind, v))
}

// TansKindIn applies the In predicate on the "tans_kind" field.
func TansKindIn(vs ...TansKind) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTansKind, vs...))
}

// TansKindNotIn applies the NotIn predicate on the "tans_kind" field.
func TansKindNotIn(vs ...TansKind) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTansKind, vs...))
}

// ProductEQ applies the EQ predicate on the "product" field.
func ProductEQ(v Product) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldProduct, v))
}

// ProductNEQ applies the NEQ predicate on the "product" field.
func ProductNEQ(v Product) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldProduct, v))
}

// ProductIn applies the In predicate on the "product" field.
func ProductIn(vs ...Product) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldProduct, vs...))
}

// ProductNotIn applies the NotIn predicate on the "product" field.
func ProductNotIn(vs ...Product) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldProduct, vs...))
}

// HasBooking applies the HasEdge predicate on the "booking" edge.
func HasBooking() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, BookingTable, BookingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBookingWith applies the HasEdge predicate on the "booking" edge with a given conditions (other predicates).
func HasBookingWith(preds ...predicate.Booking) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := newBookingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParcel applies the HasEdge predicate on the "parcel" edge.
func HasParcel() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ParcelTable, ParcelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParcelWith applies the HasEdge predicate on the "parcel" edge with a given conditions (other predicates).
func HasParcelWith(preds ...predicate.Parcel) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := newParcelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompany applies the HasEdge predicate on the "company" edge.
func HasCompany() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyWith applies the HasEdge predicate on the "company" edge with a given conditions (other predicates).
func HasCompanyWith(preds ...predicate.Company) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := newCompanyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.NotPredicates(p))
}
