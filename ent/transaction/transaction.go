// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the transaction type in the database.
	Label = "transaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldReference holds the string denoting the reference field in the database.
	FieldReference = "reference"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldVat holds the string denoting the vat field in the database.
	FieldVat = "vat"
	// FieldTransactionFee holds the string denoting the transaction_fee field in the database.
	FieldTransactionFee = "transaction_fee"
	// FieldCancellationFee holds the string denoting the cancellation_fee field in the database.
	FieldCancellationFee = "cancellation_fee"
	// FieldPaidAt holds the string denoting the paid_at field in the database.
	FieldPaidAt = "paid_at"
	// FieldCanceledAt holds the string denoting the canceled_at field in the database.
	FieldCanceledAt = "canceled_at"
	// FieldChannel holds the string denoting the channel field in the database.
	FieldChannel = "channel"
	// FieldTansKind holds the string denoting the tans_kind field in the database.
	FieldTansKind = "tans_kind"
	// FieldProduct holds the string denoting the product field in the database.
	FieldProduct = "product"
	// EdgeBooking holds the string denoting the booking edge name in mutations.
	EdgeBooking = "booking"
	// EdgeParcel holds the string denoting the parcel edge name in mutations.
	EdgeParcel = "parcel"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// Table holds the table name of the transaction in the database.
	Table = "transactions"
	// BookingTable is the table that holds the booking relation/edge.
	BookingTable = "transactions"
	// BookingInverseTable is the table name for the Booking entity.
	// It exists in this package in order to avoid circular dependency with the "booking" package.
	BookingInverseTable = "bookings"
	// BookingColumn is the table column denoting the booking relation/edge.
	BookingColumn = "booking_transaction"
	// ParcelTable is the table that holds the parcel relation/edge.
	ParcelTable = "transactions"
	// ParcelInverseTable is the table name for the Parcel entity.
	// It exists in this package in order to avoid circular dependency with the "parcel" package.
	ParcelInverseTable = "parcels"
	// ParcelColumn is the table column denoting the parcel relation/edge.
	ParcelColumn = "parcel_transaction"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "transactions"
	// CompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompanyInverseTable = "companies"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "company_transactions"
)

// Columns holds all SQL columns for transaction fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldReference,
	FieldAmount,
	FieldVat,
	FieldTransactionFee,
	FieldCancellationFee,
	FieldPaidAt,
	FieldCanceledAt,
	FieldChannel,
	FieldTansKind,
	FieldProduct,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "transactions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"booking_transaction",
	"company_transactions",
	"parcel_transaction",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// ReferenceValidator is a validator for the "reference" field. It is called by the builders before save.
	ReferenceValidator func(string) error
	// DefaultAmount holds the default value on creation for the "amount" field.
	DefaultAmount float64
	// DefaultVat holds the default value on creation for the "vat" field.
	DefaultVat float64
	// DefaultTransactionFee holds the default value on creation for the "transaction_fee" field.
	DefaultTransactionFee float64
	// DefaultCancellationFee holds the default value on creation for the "cancellation_fee" field.
	DefaultCancellationFee float64
)

// Channel defines the type for the "channel" enum field.
type Channel string

// ChannelCash is the default value of the Channel enum.
const DefaultChannel = ChannelCash

// Channel values.
const (
	ChannelMomo Channel = "momo"
	ChannelCard Channel = "card"
	ChannelBank Channel = "bank"
	ChannelCash Channel = "cash"
)

func (c Channel) String() string {
	return string(c)
}

// ChannelValidator is a validator for the "channel" field enum values. It is called by the builders before save.
func ChannelValidator(c Channel) error {
	switch c {
	case ChannelMomo, ChannelCard, ChannelBank, ChannelCash:
		return nil
	default:
		return fmt.Errorf("transaction: invalid enum value for channel field: %q", c)
	}
}

// TansKind defines the type for the "tans_kind" enum field.
type TansKind string

// TansKindPayment is the default value of the TansKind enum.
const DefaultTansKind = TansKindPayment

// TansKind values.
const (
	TansKindPayment TansKind = "payment"
	TansKindPayout  TansKind = "payout"
)

func (tk TansKind) String() string {
	return string(tk)
}

// TansKindValidator is a validator for the "tans_kind" field enum values. It is called by the builders before save.
func TansKindValidator(tk TansKind) error {
	switch tk {
	case TansKindPayment, TansKindPayout:
		return nil
	default:
		return fmt.Errorf("transaction: invalid enum value for tans_kind field: %q", tk)
	}
}

// Product defines the type for the "product" enum field.
type Product string

// ProductTrip is the default value of the Product enum.
const DefaultProduct = ProductTrip

// Product values.
const (
	ProductTrip     Product = "trip"
	ProductDelivery Product = "delivery"
)

func (pr Product) String() string {
	return string(pr)
}

// ProductValidator is a validator for the "product" field enum values. It is called by the builders before save.
func ProductValidator(pr Product) error {
	switch pr {
	case ProductTrip, ProductDelivery:
		return nil
	default:
		return fmt.Errorf("transaction: invalid enum value for product field: %q", pr)
	}
}

// OrderOption defines the ordering options for the Transaction queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByReference orders the results by the reference field.
func ByReference(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReference, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByVat orders the results by the vat field.
func ByVat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVat, opts...).ToFunc()
}

// ByTransactionFee orders the results by the transaction_fee field.
func ByTransactionFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransactionFee, opts...).ToFunc()
}

// ByCancellationFee orders the results by the cancellation_fee field.
func ByCancellationFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancellationFee, opts...).ToFunc()
}

// ByPaidAt orders the results by the paid_at field.
func ByPaidAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaidAt, opts...).ToFunc()
}

// ByCanceledAt orders the results by the canceled_at field.
func ByCanceledAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanceledAt, opts...).ToFunc()
}

// ByChannel orders the results by the channel field.
func ByChannel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannel, opts...).ToFunc()
}

// ByTansKind orders the results by the tans_kind field.
func ByTansKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTansKind, opts...).ToFunc()
}

// ByProduct orders the results by the product field.
func ByProduct(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProduct, opts...).ToFunc()
}

// ByBookingField orders the results by booking field.
func ByBookingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBookingStep(), sql.OrderByField(field, opts...))
	}
}

// ByParcelField orders the results by parcel field.
func ByParcelField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParcelStep(), sql.OrderByField(field, opts...))
	}
}

// ByCompanyField orders the results by company field.
func ByCompanyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyStep(), sql.OrderByField(field, opts...))
	}
}
func newBookingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BookingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, BookingTable, BookingColumn),
	)
}
func newParcelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParcelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ParcelTable, ParcelColumn),
	)
}
func newCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
	)
}
