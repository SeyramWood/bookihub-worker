// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/bookibus/ent/booking"
	"github.com/SeyramWood/bookibus/ent/customercontact"
	"github.com/SeyramWood/bookibus/ent/predicate"
)

// CustomerContactUpdate is the builder for updating CustomerContact entities.
type CustomerContactUpdate struct {
	config
	hooks     []Hook
	mutation  *CustomerContactMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CustomerContactUpdate builder.
func (ccu *CustomerContactUpdate) Where(ps ...predicate.CustomerContact) *CustomerContactUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetUpdatedAt sets the "updated_at" field.
func (ccu *CustomerContactUpdate) SetUpdatedAt(t time.Time) *CustomerContactUpdate {
	ccu.mutation.SetUpdatedAt(t)
	return ccu
}

// SetFullName sets the "full_name" field.
func (ccu *CustomerContactUpdate) SetFullName(s string) *CustomerContactUpdate {
	ccu.mutation.SetFullName(s)
	return ccu
}

// SetEmail sets the "email" field.
func (ccu *CustomerContactUpdate) SetEmail(s string) *CustomerContactUpdate {
	ccu.mutation.SetEmail(s)
	return ccu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ccu *CustomerContactUpdate) SetNillableEmail(s *string) *CustomerContactUpdate {
	if s != nil {
		ccu.SetEmail(*s)
	}
	return ccu
}

// ClearEmail clears the value of the "email" field.
func (ccu *CustomerContactUpdate) ClearEmail() *CustomerContactUpdate {
	ccu.mutation.ClearEmail()
	return ccu
}

// SetPhone sets the "phone" field.
func (ccu *CustomerContactUpdate) SetPhone(s string) *CustomerContactUpdate {
	ccu.mutation.SetPhone(s)
	return ccu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (ccu *CustomerContactUpdate) SetNillablePhone(s *string) *CustomerContactUpdate {
	if s != nil {
		ccu.SetPhone(*s)
	}
	return ccu
}

// ClearPhone clears the value of the "phone" field.
func (ccu *CustomerContactUpdate) ClearPhone() *CustomerContactUpdate {
	ccu.mutation.ClearPhone()
	return ccu
}

// SetBookingID sets the "booking" edge to the Booking entity by ID.
func (ccu *CustomerContactUpdate) SetBookingID(id int) *CustomerContactUpdate {
	ccu.mutation.SetBookingID(id)
	return ccu
}

// SetNillableBookingID sets the "booking" edge to the Booking entity by ID if the given value is not nil.
func (ccu *CustomerContactUpdate) SetNillableBookingID(id *int) *CustomerContactUpdate {
	if id != nil {
		ccu = ccu.SetBookingID(*id)
	}
	return ccu
}

// SetBooking sets the "booking" edge to the Booking entity.
func (ccu *CustomerContactUpdate) SetBooking(b *Booking) *CustomerContactUpdate {
	return ccu.SetBookingID(b.ID)
}

// Mutation returns the CustomerContactMutation object of the builder.
func (ccu *CustomerContactUpdate) Mutation() *CustomerContactMutation {
	return ccu.mutation
}

// ClearBooking clears the "booking" edge to the Booking entity.
func (ccu *CustomerContactUpdate) ClearBooking() *CustomerContactUpdate {
	ccu.mutation.ClearBooking()
	return ccu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *CustomerContactUpdate) Save(ctx context.Context) (int, error) {
	ccu.defaults()
	return withHooks(ctx, ccu.sqlSave, ccu.mutation, ccu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *CustomerContactUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *CustomerContactUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *CustomerContactUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccu *CustomerContactUpdate) defaults() {
	if _, ok := ccu.mutation.UpdatedAt(); !ok {
		v := customercontact.UpdateDefaultUpdatedAt()
		ccu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccu *CustomerContactUpdate) check() error {
	if v, ok := ccu.mutation.FullName(); ok {
		if err := customercontact.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "CustomerContact.full_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ccu *CustomerContactUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerContactUpdate {
	ccu.modifiers = append(ccu.modifiers, modifiers...)
	return ccu
}

func (ccu *CustomerContactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ccu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customercontact.Table, customercontact.Columns, sqlgraph.NewFieldSpec(customercontact.FieldID, field.TypeInt))
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccu.mutation.UpdatedAt(); ok {
		_spec.SetField(customercontact.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ccu.mutation.FullName(); ok {
		_spec.SetField(customercontact.FieldFullName, field.TypeString, value)
	}
	if value, ok := ccu.mutation.Email(); ok {
		_spec.SetField(customercontact.FieldEmail, field.TypeString, value)
	}
	if ccu.mutation.EmailCleared() {
		_spec.ClearField(customercontact.FieldEmail, field.TypeString)
	}
	if value, ok := ccu.mutation.Phone(); ok {
		_spec.SetField(customercontact.FieldPhone, field.TypeString, value)
	}
	if ccu.mutation.PhoneCleared() {
		_spec.ClearField(customercontact.FieldPhone, field.TypeString)
	}
	if ccu.mutation.BookingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   customercontact.BookingTable,
			Columns: []string{customercontact.BookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.BookingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   customercontact.BookingTable,
			Columns: []string{customercontact.BookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ccu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customercontact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccu.mutation.done = true
	return n, nil
}

// CustomerContactUpdateOne is the builder for updating a single CustomerContact entity.
type CustomerContactUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CustomerContactMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ccuo *CustomerContactUpdateOne) SetUpdatedAt(t time.Time) *CustomerContactUpdateOne {
	ccuo.mutation.SetUpdatedAt(t)
	return ccuo
}

// SetFullName sets the "full_name" field.
func (ccuo *CustomerContactUpdateOne) SetFullName(s string) *CustomerContactUpdateOne {
	ccuo.mutation.SetFullName(s)
	return ccuo
}

// SetEmail sets the "email" field.
func (ccuo *CustomerContactUpdateOne) SetEmail(s string) *CustomerContactUpdateOne {
	ccuo.mutation.SetEmail(s)
	return ccuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ccuo *CustomerContactUpdateOne) SetNillableEmail(s *string) *CustomerContactUpdateOne {
	if s != nil {
		ccuo.SetEmail(*s)
	}
	return ccuo
}

// ClearEmail clears the value of the "email" field.
func (ccuo *CustomerContactUpdateOne) ClearEmail() *CustomerContactUpdateOne {
	ccuo.mutation.ClearEmail()
	return ccuo
}

// SetPhone sets the "phone" field.
func (ccuo *CustomerContactUpdateOne) SetPhone(s string) *CustomerContactUpdateOne {
	ccuo.mutation.SetPhone(s)
	return ccuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (ccuo *CustomerContactUpdateOne) SetNillablePhone(s *string) *CustomerContactUpdateOne {
	if s != nil {
		ccuo.SetPhone(*s)
	}
	return ccuo
}

// ClearPhone clears the value of the "phone" field.
func (ccuo *CustomerContactUpdateOne) ClearPhone() *CustomerContactUpdateOne {
	ccuo.mutation.ClearPhone()
	return ccuo
}

// SetBookingID sets the "booking" edge to the Booking entity by ID.
func (ccuo *CustomerContactUpdateOne) SetBookingID(id int) *CustomerContactUpdateOne {
	ccuo.mutation.SetBookingID(id)
	return ccuo
}

// SetNillableBookingID sets the "booking" edge to the Booking entity by ID if the given value is not nil.
func (ccuo *CustomerContactUpdateOne) SetNillableBookingID(id *int) *CustomerContactUpdateOne {
	if id != nil {
		ccuo = ccuo.SetBookingID(*id)
	}
	return ccuo
}

// SetBooking sets the "booking" edge to the Booking entity.
func (ccuo *CustomerContactUpdateOne) SetBooking(b *Booking) *CustomerContactUpdateOne {
	return ccuo.SetBookingID(b.ID)
}

// Mutation returns the CustomerContactMutation object of the builder.
func (ccuo *CustomerContactUpdateOne) Mutation() *CustomerContactMutation {
	return ccuo.mutation
}

// ClearBooking clears the "booking" edge to the Booking entity.
func (ccuo *CustomerContactUpdateOne) ClearBooking() *CustomerContactUpdateOne {
	ccuo.mutation.ClearBooking()
	return ccuo
}

// Where appends a list predicates to the CustomerContactUpdate builder.
func (ccuo *CustomerContactUpdateOne) Where(ps ...predicate.CustomerContact) *CustomerContactUpdateOne {
	ccuo.mutation.Where(ps...)
	return ccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *CustomerContactUpdateOne) Select(field string, fields ...string) *CustomerContactUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated CustomerContact entity.
func (ccuo *CustomerContactUpdateOne) Save(ctx context.Context) (*CustomerContact, error) {
	ccuo.defaults()
	return withHooks(ctx, ccuo.sqlSave, ccuo.mutation, ccuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *CustomerContactUpdateOne) SaveX(ctx context.Context) *CustomerContact {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *CustomerContactUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *CustomerContactUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccuo *CustomerContactUpdateOne) defaults() {
	if _, ok := ccuo.mutation.UpdatedAt(); !ok {
		v := customercontact.UpdateDefaultUpdatedAt()
		ccuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccuo *CustomerContactUpdateOne) check() error {
	if v, ok := ccuo.mutation.FullName(); ok {
		if err := customercontact.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "CustomerContact.full_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ccuo *CustomerContactUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerContactUpdateOne {
	ccuo.modifiers = append(ccuo.modifiers, modifiers...)
	return ccuo
}

func (ccuo *CustomerContactUpdateOne) sqlSave(ctx context.Context) (_node *CustomerContact, err error) {
	if err := ccuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customercontact.Table, customercontact.Columns, sqlgraph.NewFieldSpec(customercontact.FieldID, field.TypeInt))
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CustomerContact.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customercontact.FieldID)
		for _, f := range fields {
			if !customercontact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customercontact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccuo.mutation.UpdatedAt(); ok {
		_spec.SetField(customercontact.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ccuo.mutation.FullName(); ok {
		_spec.SetField(customercontact.FieldFullName, field.TypeString, value)
	}
	if value, ok := ccuo.mutation.Email(); ok {
		_spec.SetField(customercontact.FieldEmail, field.TypeString, value)
	}
	if ccuo.mutation.EmailCleared() {
		_spec.ClearField(customercontact.FieldEmail, field.TypeString)
	}
	if value, ok := ccuo.mutation.Phone(); ok {
		_spec.SetField(customercontact.FieldPhone, field.TypeString, value)
	}
	if ccuo.mutation.PhoneCleared() {
		_spec.ClearField(customercontact.FieldPhone, field.TypeString)
	}
	if ccuo.mutation.BookingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   customercontact.BookingTable,
			Columns: []string{customercontact.BookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.BookingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   customercontact.BookingTable,
			Columns: []string{customercontact.BookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ccuo.modifiers...)
	_node = &CustomerContact{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customercontact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccuo.mutation.done = true
	return _node, nil
}
