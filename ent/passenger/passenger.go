// Code generated by ent, DO NOT EDIT.

package passenger

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the passenger type in the database.
	Label = "passenger"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldFullName holds the string denoting the full_name field in the database.
	FieldFullName = "full_name"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldMaturity holds the string denoting the maturity field in the database.
	FieldMaturity = "maturity"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// EdgeBooking holds the string denoting the booking edge name in mutations.
	EdgeBooking = "booking"
	// Table holds the table name of the passenger in the database.
	Table = "passengers"
	// BookingTable is the table that holds the booking relation/edge.
	BookingTable = "passengers"
	// BookingInverseTable is the table name for the Booking entity.
	// It exists in this package in order to avoid circular dependency with the "booking" package.
	BookingInverseTable = "bookings"
	// BookingColumn is the table column denoting the booking relation/edge.
	BookingColumn = "booking_passengers"
)

// Columns holds all SQL columns for passenger fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldFullName,
	FieldAmount,
	FieldMaturity,
	FieldGender,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "passengers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"booking_passengers",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// FullNameValidator is a validator for the "full_name" field. It is called by the builders before save.
	FullNameValidator func(string) error
	// DefaultAmount holds the default value on creation for the "amount" field.
	DefaultAmount float64
)

// Maturity defines the type for the "maturity" enum field.
type Maturity string

// MaturityAdult is the default value of the Maturity enum.
const DefaultMaturity = MaturityAdult

// Maturity values.
const (
	MaturityAdult Maturity = "adult"
	MaturityChild Maturity = "child"
)

func (m Maturity) String() string {
	return string(m)
}

// MaturityValidator is a validator for the "maturity" field enum values. It is called by the builders before save.
func MaturityValidator(m Maturity) error {
	switch m {
	case MaturityAdult, MaturityChild:
		return nil
	default:
		return fmt.Errorf("passenger: invalid enum value for maturity field: %q", m)
	}
}

// Gender defines the type for the "gender" enum field.
type Gender string

// Gender values.
const (
	GenderMale   Gender = "male"
	GenderFemale Gender = "female"
	GenderOther  Gender = "other"
)

func (ge Gender) String() string {
	return string(ge)
}

// GenderValidator is a validator for the "gender" field enum values. It is called by the builders before save.
func GenderValidator(ge Gender) error {
	switch ge {
	case GenderMale, GenderFemale, GenderOther:
		return nil
	default:
		return fmt.Errorf("passenger: invalid enum value for gender field: %q", ge)
	}
}

// OrderOption defines the ordering options for the Passenger queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByFullName orders the results by the full_name field.
func ByFullName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFullName, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByMaturity orders the results by the maturity field.
func ByMaturity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaturity, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByBookingField orders the results by booking field.
func ByBookingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBookingStep(), sql.OrderByField(field, opts...))
	}
}
func newBookingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BookingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BookingTable, BookingColumn),
	)
}
