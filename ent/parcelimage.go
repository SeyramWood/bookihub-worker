// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/ent/parcel"
	"github.com/SeyramWood/ent/parcelimage"
)

// ParcelImage is the model entity for the ParcelImage schema.
type ParcelImage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind parcelimage.Kind `json:"kind,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ParcelImageQuery when eager-loading is set.
	Edges         ParcelImageEdges `json:"edges"`
	parcel_images *int
	selectValues  sql.SelectValues
}

// ParcelImageEdges holds the relations/edges for other nodes in the graph.
type ParcelImageEdges struct {
	// Parcel holds the value of the parcel edge.
	Parcel *Parcel `json:"parcel,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ParcelOrErr returns the Parcel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParcelImageEdges) ParcelOrErr() (*Parcel, error) {
	if e.loadedTypes[0] {
		if e.Parcel == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: parcel.Label}
		}
		return e.Parcel, nil
	}
	return nil, &NotLoadedError{edge: "parcel"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ParcelImage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case parcelimage.FieldID:
			values[i] = new(sql.NullInt64)
		case parcelimage.FieldImage, parcelimage.FieldKind:
			values[i] = new(sql.NullString)
		case parcelimage.FieldCreatedAt, parcelimage.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case parcelimage.ForeignKeys[0]: // parcel_images
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ParcelImage fields.
func (pi *ParcelImage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case parcelimage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case parcelimage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pi.CreatedAt = value.Time
			}
		case parcelimage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pi.UpdatedAt = value.Time
			}
		case parcelimage.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				pi.Image = value.String
			}
		case parcelimage.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				pi.Kind = parcelimage.Kind(value.String)
			}
		case parcelimage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field parcel_images", value)
			} else if value.Valid {
				pi.parcel_images = new(int)
				*pi.parcel_images = int(value.Int64)
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ParcelImage.
// This includes values selected through modifiers, order, etc.
func (pi *ParcelImage) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QueryParcel queries the "parcel" edge of the ParcelImage entity.
func (pi *ParcelImage) QueryParcel() *ParcelQuery {
	return NewParcelImageClient(pi.config).QueryParcel(pi)
}

// Update returns a builder for updating this ParcelImage.
// Note that you need to call ParcelImage.Unwrap() before calling this method if this ParcelImage
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *ParcelImage) Update() *ParcelImageUpdateOne {
	return NewParcelImageClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the ParcelImage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *ParcelImage) Unwrap() *ParcelImage {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: ParcelImage is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *ParcelImage) String() string {
	var builder strings.Builder
	builder.WriteString("ParcelImage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(pi.Image)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", pi.Kind))
	builder.WriteByte(')')
	return builder.String()
}

// ParcelImages is a parsable slice of ParcelImage.
type ParcelImages []*ParcelImage
