// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/bookibus/ent/booking"
	"github.com/SeyramWood/bookibus/ent/company"
	"github.com/SeyramWood/bookibus/ent/companyuser"
	"github.com/SeyramWood/bookibus/ent/incident"
	"github.com/SeyramWood/bookibus/ent/notification"
	"github.com/SeyramWood/bookibus/ent/parcel"
	"github.com/SeyramWood/bookibus/ent/predicate"
	"github.com/SeyramWood/bookibus/ent/route"
	"github.com/SeyramWood/bookibus/ent/schema"
	"github.com/SeyramWood/bookibus/ent/terminal"
	"github.com/SeyramWood/bookibus/ent/transaction"
	"github.com/SeyramWood/bookibus/ent/trip"
	"github.com/SeyramWood/bookibus/ent/vehicle"
)

// CompanyUpdate is the builder for updating Company entities.
type CompanyUpdate struct {
	config
	hooks     []Hook
	mutation  *CompanyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cu *CompanyUpdate) Where(ps ...predicate.Company) *CompanyUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CompanyUpdate) SetUpdatedAt(t time.Time) *CompanyUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetName sets the "name" field.
func (cu *CompanyUpdate) SetName(s string) *CompanyUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetPhone sets the "phone" field.
func (cu *CompanyUpdate) SetPhone(s string) *CompanyUpdate {
	cu.mutation.SetPhone(s)
	return cu
}

// SetEmail sets the "email" field.
func (cu *CompanyUpdate) SetEmail(s string) *CompanyUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetCertificate sets the "certificate" field.
func (cu *CompanyUpdate) SetCertificate(s string) *CompanyUpdate {
	cu.mutation.SetCertificate(s)
	return cu
}

// SetNillableCertificate sets the "certificate" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableCertificate(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetCertificate(*s)
	}
	return cu
}

// ClearCertificate clears the value of the "certificate" field.
func (cu *CompanyUpdate) ClearCertificate() *CompanyUpdate {
	cu.mutation.ClearCertificate()
	return cu
}

// SetBankAccount sets the "bank_account" field.
func (cu *CompanyUpdate) SetBankAccount(sa *schema.BankAccount) *CompanyUpdate {
	cu.mutation.SetBankAccount(sa)
	return cu
}

// ClearBankAccount clears the value of the "bank_account" field.
func (cu *CompanyUpdate) ClearBankAccount() *CompanyUpdate {
	cu.mutation.ClearBankAccount()
	return cu
}

// SetContactPerson sets the "contact_person" field.
func (cu *CompanyUpdate) SetContactPerson(sp *schema.ContactPerson) *CompanyUpdate {
	cu.mutation.SetContactPerson(sp)
	return cu
}

// ClearContactPerson clears the value of the "contact_person" field.
func (cu *CompanyUpdate) ClearContactPerson() *CompanyUpdate {
	cu.mutation.ClearContactPerson()
	return cu
}

// SetOnboardingStatus sets the "onboarding_status" field.
func (cu *CompanyUpdate) SetOnboardingStatus(cs company.OnboardingStatus) *CompanyUpdate {
	cu.mutation.SetOnboardingStatus(cs)
	return cu
}

// SetNillableOnboardingStatus sets the "onboarding_status" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableOnboardingStatus(cs *company.OnboardingStatus) *CompanyUpdate {
	if cs != nil {
		cu.SetOnboardingStatus(*cs)
	}
	return cu
}

// AddProfileIDs adds the "profile" edge to the CompanyUser entity by IDs.
func (cu *CompanyUpdate) AddProfileIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddProfileIDs(ids...)
	return cu
}

// AddProfile adds the "profile" edges to the CompanyUser entity.
func (cu *CompanyUpdate) AddProfile(c ...*CompanyUser) *CompanyUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddProfileIDs(ids...)
}

// AddTerminalIDs adds the "terminals" edge to the Terminal entity by IDs.
func (cu *CompanyUpdate) AddTerminalIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddTerminalIDs(ids...)
	return cu
}

// AddTerminals adds the "terminals" edges to the Terminal entity.
func (cu *CompanyUpdate) AddTerminals(t ...*Terminal) *CompanyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTerminalIDs(ids...)
}

// AddVehicleIDs adds the "vehicles" edge to the Vehicle entity by IDs.
func (cu *CompanyUpdate) AddVehicleIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddVehicleIDs(ids...)
	return cu
}

// AddVehicles adds the "vehicles" edges to the Vehicle entity.
func (cu *CompanyUpdate) AddVehicles(v ...*Vehicle) *CompanyUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cu.AddVehicleIDs(ids...)
}

// AddRouteIDs adds the "routes" edge to the Route entity by IDs.
func (cu *CompanyUpdate) AddRouteIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddRouteIDs(ids...)
	return cu
}

// AddRoutes adds the "routes" edges to the Route entity.
func (cu *CompanyUpdate) AddRoutes(r ...*Route) *CompanyUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.AddRouteIDs(ids...)
}

// AddTripIDs adds the "trips" edge to the Trip entity by IDs.
func (cu *CompanyUpdate) AddTripIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddTripIDs(ids...)
	return cu
}

// AddTrips adds the "trips" edges to the Trip entity.
func (cu *CompanyUpdate) AddTrips(t ...*Trip) *CompanyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTripIDs(ids...)
}

// AddBookingIDs adds the "bookings" edge to the Booking entity by IDs.
func (cu *CompanyUpdate) AddBookingIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddBookingIDs(ids...)
	return cu
}

// AddBookings adds the "bookings" edges to the Booking entity.
func (cu *CompanyUpdate) AddBookings(b ...*Booking) *CompanyUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.AddBookingIDs(ids...)
}

// AddIncidentIDs adds the "incidents" edge to the Incident entity by IDs.
func (cu *CompanyUpdate) AddIncidentIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddIncidentIDs(ids...)
	return cu
}

// AddIncidents adds the "incidents" edges to the Incident entity.
func (cu *CompanyUpdate) AddIncidents(i ...*Incident) *CompanyUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cu.AddIncidentIDs(ids...)
}

// AddParcelIDs adds the "parcels" edge to the Parcel entity by IDs.
func (cu *CompanyUpdate) AddParcelIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddParcelIDs(ids...)
	return cu
}

// AddParcels adds the "parcels" edges to the Parcel entity.
func (cu *CompanyUpdate) AddParcels(p ...*Parcel) *CompanyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddParcelIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (cu *CompanyUpdate) AddTransactionIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddTransactionIDs(ids...)
	return cu
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (cu *CompanyUpdate) AddTransactions(t ...*Transaction) *CompanyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTransactionIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (cu *CompanyUpdate) AddNotificationIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddNotificationIDs(ids...)
	return cu
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (cu *CompanyUpdate) AddNotifications(n ...*Notification) *CompanyUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cu.AddNotificationIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cu *CompanyUpdate) Mutation() *CompanyMutation {
	return cu.mutation
}

// ClearProfile clears all "profile" edges to the CompanyUser entity.
func (cu *CompanyUpdate) ClearProfile() *CompanyUpdate {
	cu.mutation.ClearProfile()
	return cu
}

// RemoveProfileIDs removes the "profile" edge to CompanyUser entities by IDs.
func (cu *CompanyUpdate) RemoveProfileIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveProfileIDs(ids...)
	return cu
}

// RemoveProfile removes "profile" edges to CompanyUser entities.
func (cu *CompanyUpdate) RemoveProfile(c ...*CompanyUser) *CompanyUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveProfileIDs(ids...)
}

// ClearTerminals clears all "terminals" edges to the Terminal entity.
func (cu *CompanyUpdate) ClearTerminals() *CompanyUpdate {
	cu.mutation.ClearTerminals()
	return cu
}

// RemoveTerminalIDs removes the "terminals" edge to Terminal entities by IDs.
func (cu *CompanyUpdate) RemoveTerminalIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveTerminalIDs(ids...)
	return cu
}

// RemoveTerminals removes "terminals" edges to Terminal entities.
func (cu *CompanyUpdate) RemoveTerminals(t ...*Terminal) *CompanyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTerminalIDs(ids...)
}

// ClearVehicles clears all "vehicles" edges to the Vehicle entity.
func (cu *CompanyUpdate) ClearVehicles() *CompanyUpdate {
	cu.mutation.ClearVehicles()
	return cu
}

// RemoveVehicleIDs removes the "vehicles" edge to Vehicle entities by IDs.
func (cu *CompanyUpdate) RemoveVehicleIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveVehicleIDs(ids...)
	return cu
}

// RemoveVehicles removes "vehicles" edges to Vehicle entities.
func (cu *CompanyUpdate) RemoveVehicles(v ...*Vehicle) *CompanyUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cu.RemoveVehicleIDs(ids...)
}

// ClearRoutes clears all "routes" edges to the Route entity.
func (cu *CompanyUpdate) ClearRoutes() *CompanyUpdate {
	cu.mutation.ClearRoutes()
	return cu
}

// RemoveRouteIDs removes the "routes" edge to Route entities by IDs.
func (cu *CompanyUpdate) RemoveRouteIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveRouteIDs(ids...)
	return cu
}

// RemoveRoutes removes "routes" edges to Route entities.
func (cu *CompanyUpdate) RemoveRoutes(r ...*Route) *CompanyUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.RemoveRouteIDs(ids...)
}

// ClearTrips clears all "trips" edges to the Trip entity.
func (cu *CompanyUpdate) ClearTrips() *CompanyUpdate {
	cu.mutation.ClearTrips()
	return cu
}

// RemoveTripIDs removes the "trips" edge to Trip entities by IDs.
func (cu *CompanyUpdate) RemoveTripIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveTripIDs(ids...)
	return cu
}

// RemoveTrips removes "trips" edges to Trip entities.
func (cu *CompanyUpdate) RemoveTrips(t ...*Trip) *CompanyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTripIDs(ids...)
}

// ClearBookings clears all "bookings" edges to the Booking entity.
func (cu *CompanyUpdate) ClearBookings() *CompanyUpdate {
	cu.mutation.ClearBookings()
	return cu
}

// RemoveBookingIDs removes the "bookings" edge to Booking entities by IDs.
func (cu *CompanyUpdate) RemoveBookingIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveBookingIDs(ids...)
	return cu
}

// RemoveBookings removes "bookings" edges to Booking entities.
func (cu *CompanyUpdate) RemoveBookings(b ...*Booking) *CompanyUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.RemoveBookingIDs(ids...)
}

// ClearIncidents clears all "incidents" edges to the Incident entity.
func (cu *CompanyUpdate) ClearIncidents() *CompanyUpdate {
	cu.mutation.ClearIncidents()
	return cu
}

// RemoveIncidentIDs removes the "incidents" edge to Incident entities by IDs.
func (cu *CompanyUpdate) RemoveIncidentIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveIncidentIDs(ids...)
	return cu
}

// RemoveIncidents removes "incidents" edges to Incident entities.
func (cu *CompanyUpdate) RemoveIncidents(i ...*Incident) *CompanyUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cu.RemoveIncidentIDs(ids...)
}

// ClearParcels clears all "parcels" edges to the Parcel entity.
func (cu *CompanyUpdate) ClearParcels() *CompanyUpdate {
	cu.mutation.ClearParcels()
	return cu
}

// RemoveParcelIDs removes the "parcels" edge to Parcel entities by IDs.
func (cu *CompanyUpdate) RemoveParcelIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveParcelIDs(ids...)
	return cu
}

// RemoveParcels removes "parcels" edges to Parcel entities.
func (cu *CompanyUpdate) RemoveParcels(p ...*Parcel) *CompanyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveParcelIDs(ids...)
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (cu *CompanyUpdate) ClearTransactions() *CompanyUpdate {
	cu.mutation.ClearTransactions()
	return cu
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (cu *CompanyUpdate) RemoveTransactionIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveTransactionIDs(ids...)
	return cu
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (cu *CompanyUpdate) RemoveTransactions(t ...*Transaction) *CompanyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTransactionIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (cu *CompanyUpdate) ClearNotifications() *CompanyUpdate {
	cu.mutation.ClearNotifications()
	return cu
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (cu *CompanyUpdate) RemoveNotificationIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveNotificationIDs(ids...)
	return cu
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (cu *CompanyUpdate) RemoveNotifications(n ...*Notification) *CompanyUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cu.RemoveNotificationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CompanyUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CompanyUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CompanyUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CompanyUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CompanyUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := company.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CompanyUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := company.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Company.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Phone(); ok {
		if err := company.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Company.phone": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Email(); ok {
		if err := company.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Company.email": %w`, err)}
		}
	}
	if v, ok := cu.mutation.OnboardingStatus(); ok {
		if err := company.OnboardingStatusValidator(v); err != nil {
			return &ValidationError{Name: "onboarding_status", err: fmt.Errorf(`ent: validator failed for field "Company.onboarding_status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CompanyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CompanyUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CompanyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(company.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Phone(); ok {
		_spec.SetField(company.FieldPhone, field.TypeString, value)
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(company.FieldEmail, field.TypeString, value)
	}
	if value, ok := cu.mutation.Certificate(); ok {
		_spec.SetField(company.FieldCertificate, field.TypeString, value)
	}
	if cu.mutation.CertificateCleared() {
		_spec.ClearField(company.FieldCertificate, field.TypeString)
	}
	if value, ok := cu.mutation.BankAccount(); ok {
		_spec.SetField(company.FieldBankAccount, field.TypeJSON, value)
	}
	if cu.mutation.BankAccountCleared() {
		_spec.ClearField(company.FieldBankAccount, field.TypeJSON)
	}
	if value, ok := cu.mutation.ContactPerson(); ok {
		_spec.SetField(company.FieldContactPerson, field.TypeJSON, value)
	}
	if cu.mutation.ContactPersonCleared() {
		_spec.ClearField(company.FieldContactPerson, field.TypeJSON)
	}
	if value, ok := cu.mutation.OnboardingStatus(); ok {
		_spec.SetField(company.FieldOnboardingStatus, field.TypeEnum, value)
	}
	if cu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ProfileTable,
			Columns: []string{company.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedProfileIDs(); len(nodes) > 0 && !cu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ProfileTable,
			Columns: []string{company.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ProfileTable,
			Columns: []string{company.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TerminalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TerminalsTable,
			Columns: []string{company.TerminalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(terminal.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTerminalsIDs(); len(nodes) > 0 && !cu.mutation.TerminalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TerminalsTable,
			Columns: []string{company.TerminalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(terminal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TerminalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TerminalsTable,
			Columns: []string{company.TerminalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(terminal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.VehiclesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.VehiclesTable,
			Columns: []string{company.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedVehiclesIDs(); len(nodes) > 0 && !cu.mutation.VehiclesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.VehiclesTable,
			Columns: []string{company.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.VehiclesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.VehiclesTable,
			Columns: []string{company.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.RoutesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.RoutesTable,
			Columns: []string{company.RoutesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(route.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedRoutesIDs(); len(nodes) > 0 && !cu.mutation.RoutesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.RoutesTable,
			Columns: []string{company.RoutesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(route.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RoutesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.RoutesTable,
			Columns: []string{company.RoutesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(route.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TripsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TripsTable,
			Columns: []string{company.TripsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTripsIDs(); len(nodes) > 0 && !cu.mutation.TripsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TripsTable,
			Columns: []string{company.TripsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TripsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TripsTable,
			Columns: []string{company.TripsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.BookingsTable,
			Columns: []string{company.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedBookingsIDs(); len(nodes) > 0 && !cu.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.BookingsTable,
			Columns: []string{company.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.BookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.BookingsTable,
			Columns: []string{company.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.IncidentsTable,
			Columns: []string{company.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedIncidentsIDs(); len(nodes) > 0 && !cu.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.IncidentsTable,
			Columns: []string{company.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.IncidentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.IncidentsTable,
			Columns: []string{company.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ParcelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ParcelsTable,
			Columns: []string{company.ParcelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedParcelsIDs(); len(nodes) > 0 && !cu.mutation.ParcelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ParcelsTable,
			Columns: []string{company.ParcelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ParcelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ParcelsTable,
			Columns: []string{company.ParcelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TransactionsTable,
			Columns: []string{company.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !cu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TransactionsTable,
			Columns: []string{company.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TransactionsTable,
			Columns: []string{company.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.NotificationsTable,
			Columns: []string{company.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !cu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.NotificationsTable,
			Columns: []string{company.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.NotificationsTable,
			Columns: []string{company.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CompanyUpdateOne is the builder for updating a single Company entity.
type CompanyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CompanyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CompanyUpdateOne) SetUpdatedAt(t time.Time) *CompanyUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetName sets the "name" field.
func (cuo *CompanyUpdateOne) SetName(s string) *CompanyUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetPhone sets the "phone" field.
func (cuo *CompanyUpdateOne) SetPhone(s string) *CompanyUpdateOne {
	cuo.mutation.SetPhone(s)
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *CompanyUpdateOne) SetEmail(s string) *CompanyUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetCertificate sets the "certificate" field.
func (cuo *CompanyUpdateOne) SetCertificate(s string) *CompanyUpdateOne {
	cuo.mutation.SetCertificate(s)
	return cuo
}

// SetNillableCertificate sets the "certificate" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableCertificate(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetCertificate(*s)
	}
	return cuo
}

// ClearCertificate clears the value of the "certificate" field.
func (cuo *CompanyUpdateOne) ClearCertificate() *CompanyUpdateOne {
	cuo.mutation.ClearCertificate()
	return cuo
}

// SetBankAccount sets the "bank_account" field.
func (cuo *CompanyUpdateOne) SetBankAccount(sa *schema.BankAccount) *CompanyUpdateOne {
	cuo.mutation.SetBankAccount(sa)
	return cuo
}

// ClearBankAccount clears the value of the "bank_account" field.
func (cuo *CompanyUpdateOne) ClearBankAccount() *CompanyUpdateOne {
	cuo.mutation.ClearBankAccount()
	return cuo
}

// SetContactPerson sets the "contact_person" field.
func (cuo *CompanyUpdateOne) SetContactPerson(sp *schema.ContactPerson) *CompanyUpdateOne {
	cuo.mutation.SetContactPerson(sp)
	return cuo
}

// ClearContactPerson clears the value of the "contact_person" field.
func (cuo *CompanyUpdateOne) ClearContactPerson() *CompanyUpdateOne {
	cuo.mutation.ClearContactPerson()
	return cuo
}

// SetOnboardingStatus sets the "onboarding_status" field.
func (cuo *CompanyUpdateOne) SetOnboardingStatus(cs company.OnboardingStatus) *CompanyUpdateOne {
	cuo.mutation.SetOnboardingStatus(cs)
	return cuo
}

// SetNillableOnboardingStatus sets the "onboarding_status" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableOnboardingStatus(cs *company.OnboardingStatus) *CompanyUpdateOne {
	if cs != nil {
		cuo.SetOnboardingStatus(*cs)
	}
	return cuo
}

// AddProfileIDs adds the "profile" edge to the CompanyUser entity by IDs.
func (cuo *CompanyUpdateOne) AddProfileIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddProfileIDs(ids...)
	return cuo
}

// AddProfile adds the "profile" edges to the CompanyUser entity.
func (cuo *CompanyUpdateOne) AddProfile(c ...*CompanyUser) *CompanyUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddProfileIDs(ids...)
}

// AddTerminalIDs adds the "terminals" edge to the Terminal entity by IDs.
func (cuo *CompanyUpdateOne) AddTerminalIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddTerminalIDs(ids...)
	return cuo
}

// AddTerminals adds the "terminals" edges to the Terminal entity.
func (cuo *CompanyUpdateOne) AddTerminals(t ...*Terminal) *CompanyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTerminalIDs(ids...)
}

// AddVehicleIDs adds the "vehicles" edge to the Vehicle entity by IDs.
func (cuo *CompanyUpdateOne) AddVehicleIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddVehicleIDs(ids...)
	return cuo
}

// AddVehicles adds the "vehicles" edges to the Vehicle entity.
func (cuo *CompanyUpdateOne) AddVehicles(v ...*Vehicle) *CompanyUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cuo.AddVehicleIDs(ids...)
}

// AddRouteIDs adds the "routes" edge to the Route entity by IDs.
func (cuo *CompanyUpdateOne) AddRouteIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddRouteIDs(ids...)
	return cuo
}

// AddRoutes adds the "routes" edges to the Route entity.
func (cuo *CompanyUpdateOne) AddRoutes(r ...*Route) *CompanyUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.AddRouteIDs(ids...)
}

// AddTripIDs adds the "trips" edge to the Trip entity by IDs.
func (cuo *CompanyUpdateOne) AddTripIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddTripIDs(ids...)
	return cuo
}

// AddTrips adds the "trips" edges to the Trip entity.
func (cuo *CompanyUpdateOne) AddTrips(t ...*Trip) *CompanyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTripIDs(ids...)
}

// AddBookingIDs adds the "bookings" edge to the Booking entity by IDs.
func (cuo *CompanyUpdateOne) AddBookingIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddBookingIDs(ids...)
	return cuo
}

// AddBookings adds the "bookings" edges to the Booking entity.
func (cuo *CompanyUpdateOne) AddBookings(b ...*Booking) *CompanyUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.AddBookingIDs(ids...)
}

// AddIncidentIDs adds the "incidents" edge to the Incident entity by IDs.
func (cuo *CompanyUpdateOne) AddIncidentIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddIncidentIDs(ids...)
	return cuo
}

// AddIncidents adds the "incidents" edges to the Incident entity.
func (cuo *CompanyUpdateOne) AddIncidents(i ...*Incident) *CompanyUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cuo.AddIncidentIDs(ids...)
}

// AddParcelIDs adds the "parcels" edge to the Parcel entity by IDs.
func (cuo *CompanyUpdateOne) AddParcelIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddParcelIDs(ids...)
	return cuo
}

// AddParcels adds the "parcels" edges to the Parcel entity.
func (cuo *CompanyUpdateOne) AddParcels(p ...*Parcel) *CompanyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddParcelIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (cuo *CompanyUpdateOne) AddTransactionIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddTransactionIDs(ids...)
	return cuo
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (cuo *CompanyUpdateOne) AddTransactions(t ...*Transaction) *CompanyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTransactionIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (cuo *CompanyUpdateOne) AddNotificationIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddNotificationIDs(ids...)
	return cuo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (cuo *CompanyUpdateOne) AddNotifications(n ...*Notification) *CompanyUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cuo.AddNotificationIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cuo *CompanyUpdateOne) Mutation() *CompanyMutation {
	return cuo.mutation
}

// ClearProfile clears all "profile" edges to the CompanyUser entity.
func (cuo *CompanyUpdateOne) ClearProfile() *CompanyUpdateOne {
	cuo.mutation.ClearProfile()
	return cuo
}

// RemoveProfileIDs removes the "profile" edge to CompanyUser entities by IDs.
func (cuo *CompanyUpdateOne) RemoveProfileIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveProfileIDs(ids...)
	return cuo
}

// RemoveProfile removes "profile" edges to CompanyUser entities.
func (cuo *CompanyUpdateOne) RemoveProfile(c ...*CompanyUser) *CompanyUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveProfileIDs(ids...)
}

// ClearTerminals clears all "terminals" edges to the Terminal entity.
func (cuo *CompanyUpdateOne) ClearTerminals() *CompanyUpdateOne {
	cuo.mutation.ClearTerminals()
	return cuo
}

// RemoveTerminalIDs removes the "terminals" edge to Terminal entities by IDs.
func (cuo *CompanyUpdateOne) RemoveTerminalIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveTerminalIDs(ids...)
	return cuo
}

// RemoveTerminals removes "terminals" edges to Terminal entities.
func (cuo *CompanyUpdateOne) RemoveTerminals(t ...*Terminal) *CompanyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTerminalIDs(ids...)
}

// ClearVehicles clears all "vehicles" edges to the Vehicle entity.
func (cuo *CompanyUpdateOne) ClearVehicles() *CompanyUpdateOne {
	cuo.mutation.ClearVehicles()
	return cuo
}

// RemoveVehicleIDs removes the "vehicles" edge to Vehicle entities by IDs.
func (cuo *CompanyUpdateOne) RemoveVehicleIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveVehicleIDs(ids...)
	return cuo
}

// RemoveVehicles removes "vehicles" edges to Vehicle entities.
func (cuo *CompanyUpdateOne) RemoveVehicles(v ...*Vehicle) *CompanyUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cuo.RemoveVehicleIDs(ids...)
}

// ClearRoutes clears all "routes" edges to the Route entity.
func (cuo *CompanyUpdateOne) ClearRoutes() *CompanyUpdateOne {
	cuo.mutation.ClearRoutes()
	return cuo
}

// RemoveRouteIDs removes the "routes" edge to Route entities by IDs.
func (cuo *CompanyUpdateOne) RemoveRouteIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveRouteIDs(ids...)
	return cuo
}

// RemoveRoutes removes "routes" edges to Route entities.
func (cuo *CompanyUpdateOne) RemoveRoutes(r ...*Route) *CompanyUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.RemoveRouteIDs(ids...)
}

// ClearTrips clears all "trips" edges to the Trip entity.
func (cuo *CompanyUpdateOne) ClearTrips() *CompanyUpdateOne {
	cuo.mutation.ClearTrips()
	return cuo
}

// RemoveTripIDs removes the "trips" edge to Trip entities by IDs.
func (cuo *CompanyUpdateOne) RemoveTripIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveTripIDs(ids...)
	return cuo
}

// RemoveTrips removes "trips" edges to Trip entities.
func (cuo *CompanyUpdateOne) RemoveTrips(t ...*Trip) *CompanyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTripIDs(ids...)
}

// ClearBookings clears all "bookings" edges to the Booking entity.
func (cuo *CompanyUpdateOne) ClearBookings() *CompanyUpdateOne {
	cuo.mutation.ClearBookings()
	return cuo
}

// RemoveBookingIDs removes the "bookings" edge to Booking entities by IDs.
func (cuo *CompanyUpdateOne) RemoveBookingIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveBookingIDs(ids...)
	return cuo
}

// RemoveBookings removes "bookings" edges to Booking entities.
func (cuo *CompanyUpdateOne) RemoveBookings(b ...*Booking) *CompanyUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.RemoveBookingIDs(ids...)
}

// ClearIncidents clears all "incidents" edges to the Incident entity.
func (cuo *CompanyUpdateOne) ClearIncidents() *CompanyUpdateOne {
	cuo.mutation.ClearIncidents()
	return cuo
}

// RemoveIncidentIDs removes the "incidents" edge to Incident entities by IDs.
func (cuo *CompanyUpdateOne) RemoveIncidentIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveIncidentIDs(ids...)
	return cuo
}

// RemoveIncidents removes "incidents" edges to Incident entities.
func (cuo *CompanyUpdateOne) RemoveIncidents(i ...*Incident) *CompanyUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cuo.RemoveIncidentIDs(ids...)
}

// ClearParcels clears all "parcels" edges to the Parcel entity.
func (cuo *CompanyUpdateOne) ClearParcels() *CompanyUpdateOne {
	cuo.mutation.ClearParcels()
	return cuo
}

// RemoveParcelIDs removes the "parcels" edge to Parcel entities by IDs.
func (cuo *CompanyUpdateOne) RemoveParcelIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveParcelIDs(ids...)
	return cuo
}

// RemoveParcels removes "parcels" edges to Parcel entities.
func (cuo *CompanyUpdateOne) RemoveParcels(p ...*Parcel) *CompanyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveParcelIDs(ids...)
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (cuo *CompanyUpdateOne) ClearTransactions() *CompanyUpdateOne {
	cuo.mutation.ClearTransactions()
	return cuo
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (cuo *CompanyUpdateOne) RemoveTransactionIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveTransactionIDs(ids...)
	return cuo
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (cuo *CompanyUpdateOne) RemoveTransactions(t ...*Transaction) *CompanyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTransactionIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (cuo *CompanyUpdateOne) ClearNotifications() *CompanyUpdateOne {
	cuo.mutation.ClearNotifications()
	return cuo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (cuo *CompanyUpdateOne) RemoveNotificationIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveNotificationIDs(ids...)
	return cuo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (cuo *CompanyUpdateOne) RemoveNotifications(n ...*Notification) *CompanyUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cuo.RemoveNotificationIDs(ids...)
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cuo *CompanyUpdateOne) Where(ps ...predicate.Company) *CompanyUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CompanyUpdateOne) Select(field string, fields ...string) *CompanyUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Company entity.
func (cuo *CompanyUpdateOne) Save(ctx context.Context) (*Company, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CompanyUpdateOne) SaveX(ctx context.Context) *Company {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CompanyUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CompanyUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CompanyUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := company.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CompanyUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := company.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Company.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Phone(); ok {
		if err := company.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Company.phone": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Email(); ok {
		if err := company.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Company.email": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.OnboardingStatus(); ok {
		if err := company.OnboardingStatusValidator(v); err != nil {
			return &ValidationError{Name: "onboarding_status", err: fmt.Errorf(`ent: validator failed for field "Company.onboarding_status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CompanyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CompanyUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CompanyUpdateOne) sqlSave(ctx context.Context) (_node *Company, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Company.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, company.FieldID)
		for _, f := range fields {
			if !company.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != company.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(company.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Phone(); ok {
		_spec.SetField(company.FieldPhone, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(company.FieldEmail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Certificate(); ok {
		_spec.SetField(company.FieldCertificate, field.TypeString, value)
	}
	if cuo.mutation.CertificateCleared() {
		_spec.ClearField(company.FieldCertificate, field.TypeString)
	}
	if value, ok := cuo.mutation.BankAccount(); ok {
		_spec.SetField(company.FieldBankAccount, field.TypeJSON, value)
	}
	if cuo.mutation.BankAccountCleared() {
		_spec.ClearField(company.FieldBankAccount, field.TypeJSON)
	}
	if value, ok := cuo.mutation.ContactPerson(); ok {
		_spec.SetField(company.FieldContactPerson, field.TypeJSON, value)
	}
	if cuo.mutation.ContactPersonCleared() {
		_spec.ClearField(company.FieldContactPerson, field.TypeJSON)
	}
	if value, ok := cuo.mutation.OnboardingStatus(); ok {
		_spec.SetField(company.FieldOnboardingStatus, field.TypeEnum, value)
	}
	if cuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ProfileTable,
			Columns: []string{company.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedProfileIDs(); len(nodes) > 0 && !cuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ProfileTable,
			Columns: []string{company.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ProfileTable,
			Columns: []string{company.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TerminalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TerminalsTable,
			Columns: []string{company.TerminalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(terminal.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTerminalsIDs(); len(nodes) > 0 && !cuo.mutation.TerminalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TerminalsTable,
			Columns: []string{company.TerminalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(terminal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TerminalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TerminalsTable,
			Columns: []string{company.TerminalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(terminal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.VehiclesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.VehiclesTable,
			Columns: []string{company.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedVehiclesIDs(); len(nodes) > 0 && !cuo.mutation.VehiclesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.VehiclesTable,
			Columns: []string{company.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.VehiclesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.VehiclesTable,
			Columns: []string{company.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.RoutesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.RoutesTable,
			Columns: []string{company.RoutesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(route.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedRoutesIDs(); len(nodes) > 0 && !cuo.mutation.RoutesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.RoutesTable,
			Columns: []string{company.RoutesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(route.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RoutesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.RoutesTable,
			Columns: []string{company.RoutesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(route.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TripsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TripsTable,
			Columns: []string{company.TripsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTripsIDs(); len(nodes) > 0 && !cuo.mutation.TripsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TripsTable,
			Columns: []string{company.TripsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TripsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TripsTable,
			Columns: []string{company.TripsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.BookingsTable,
			Columns: []string{company.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedBookingsIDs(); len(nodes) > 0 && !cuo.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.BookingsTable,
			Columns: []string{company.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.BookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.BookingsTable,
			Columns: []string{company.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.IncidentsTable,
			Columns: []string{company.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedIncidentsIDs(); len(nodes) > 0 && !cuo.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.IncidentsTable,
			Columns: []string{company.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.IncidentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.IncidentsTable,
			Columns: []string{company.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ParcelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ParcelsTable,
			Columns: []string{company.ParcelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedParcelsIDs(); len(nodes) > 0 && !cuo.mutation.ParcelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ParcelsTable,
			Columns: []string{company.ParcelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ParcelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ParcelsTable,
			Columns: []string{company.ParcelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TransactionsTable,
			Columns: []string{company.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !cuo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TransactionsTable,
			Columns: []string{company.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TransactionsTable,
			Columns: []string{company.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.NotificationsTable,
			Columns: []string{company.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !cuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.NotificationsTable,
			Columns: []string{company.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.NotificationsTable,
			Columns: []string{company.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Company{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
