// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/bookibus/ent/booking"
	"github.com/SeyramWood/bookibus/ent/customerluggage"
	"github.com/SeyramWood/bookibus/ent/predicate"
)

// CustomerLuggageUpdate is the builder for updating CustomerLuggage entities.
type CustomerLuggageUpdate struct {
	config
	hooks     []Hook
	mutation  *CustomerLuggageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CustomerLuggageUpdate builder.
func (clu *CustomerLuggageUpdate) Where(ps ...predicate.CustomerLuggage) *CustomerLuggageUpdate {
	clu.mutation.Where(ps...)
	return clu
}

// SetUpdatedAt sets the "updated_at" field.
func (clu *CustomerLuggageUpdate) SetUpdatedAt(t time.Time) *CustomerLuggageUpdate {
	clu.mutation.SetUpdatedAt(t)
	return clu
}

// SetBaggage sets the "baggage" field.
func (clu *CustomerLuggageUpdate) SetBaggage(c customerluggage.Baggage) *CustomerLuggageUpdate {
	clu.mutation.SetBaggage(c)
	return clu
}

// SetNillableBaggage sets the "baggage" field if the given value is not nil.
func (clu *CustomerLuggageUpdate) SetNillableBaggage(c *customerluggage.Baggage) *CustomerLuggageUpdate {
	if c != nil {
		clu.SetBaggage(*c)
	}
	return clu
}

// ClearBaggage clears the value of the "baggage" field.
func (clu *CustomerLuggageUpdate) ClearBaggage() *CustomerLuggageUpdate {
	clu.mutation.ClearBaggage()
	return clu
}

// SetQuantity sets the "quantity" field.
func (clu *CustomerLuggageUpdate) SetQuantity(i int) *CustomerLuggageUpdate {
	clu.mutation.ResetQuantity()
	clu.mutation.SetQuantity(i)
	return clu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (clu *CustomerLuggageUpdate) SetNillableQuantity(i *int) *CustomerLuggageUpdate {
	if i != nil {
		clu.SetQuantity(*i)
	}
	return clu
}

// AddQuantity adds i to the "quantity" field.
func (clu *CustomerLuggageUpdate) AddQuantity(i int) *CustomerLuggageUpdate {
	clu.mutation.AddQuantity(i)
	return clu
}

// SetAmount sets the "amount" field.
func (clu *CustomerLuggageUpdate) SetAmount(f float64) *CustomerLuggageUpdate {
	clu.mutation.ResetAmount()
	clu.mutation.SetAmount(f)
	return clu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (clu *CustomerLuggageUpdate) SetNillableAmount(f *float64) *CustomerLuggageUpdate {
	if f != nil {
		clu.SetAmount(*f)
	}
	return clu
}

// AddAmount adds f to the "amount" field.
func (clu *CustomerLuggageUpdate) AddAmount(f float64) *CustomerLuggageUpdate {
	clu.mutation.AddAmount(f)
	return clu
}

// SetBookingID sets the "booking" edge to the Booking entity by ID.
func (clu *CustomerLuggageUpdate) SetBookingID(id int) *CustomerLuggageUpdate {
	clu.mutation.SetBookingID(id)
	return clu
}

// SetNillableBookingID sets the "booking" edge to the Booking entity by ID if the given value is not nil.
func (clu *CustomerLuggageUpdate) SetNillableBookingID(id *int) *CustomerLuggageUpdate {
	if id != nil {
		clu = clu.SetBookingID(*id)
	}
	return clu
}

// SetBooking sets the "booking" edge to the Booking entity.
func (clu *CustomerLuggageUpdate) SetBooking(b *Booking) *CustomerLuggageUpdate {
	return clu.SetBookingID(b.ID)
}

// Mutation returns the CustomerLuggageMutation object of the builder.
func (clu *CustomerLuggageUpdate) Mutation() *CustomerLuggageMutation {
	return clu.mutation
}

// ClearBooking clears the "booking" edge to the Booking entity.
func (clu *CustomerLuggageUpdate) ClearBooking() *CustomerLuggageUpdate {
	clu.mutation.ClearBooking()
	return clu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clu *CustomerLuggageUpdate) Save(ctx context.Context) (int, error) {
	clu.defaults()
	return withHooks(ctx, clu.sqlSave, clu.mutation, clu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clu *CustomerLuggageUpdate) SaveX(ctx context.Context) int {
	affected, err := clu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clu *CustomerLuggageUpdate) Exec(ctx context.Context) error {
	_, err := clu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clu *CustomerLuggageUpdate) ExecX(ctx context.Context) {
	if err := clu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clu *CustomerLuggageUpdate) defaults() {
	if _, ok := clu.mutation.UpdatedAt(); !ok {
		v := customerluggage.UpdateDefaultUpdatedAt()
		clu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clu *CustomerLuggageUpdate) check() error {
	if v, ok := clu.mutation.Baggage(); ok {
		if err := customerluggage.BaggageValidator(v); err != nil {
			return &ValidationError{Name: "baggage", err: fmt.Errorf(`ent: validator failed for field "CustomerLuggage.baggage": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (clu *CustomerLuggageUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerLuggageUpdate {
	clu.modifiers = append(clu.modifiers, modifiers...)
	return clu
}

func (clu *CustomerLuggageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := clu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customerluggage.Table, customerluggage.Columns, sqlgraph.NewFieldSpec(customerluggage.FieldID, field.TypeInt))
	if ps := clu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := clu.mutation.UpdatedAt(); ok {
		_spec.SetField(customerluggage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := clu.mutation.Baggage(); ok {
		_spec.SetField(customerluggage.FieldBaggage, field.TypeEnum, value)
	}
	if clu.mutation.BaggageCleared() {
		_spec.ClearField(customerluggage.FieldBaggage, field.TypeEnum)
	}
	if value, ok := clu.mutation.Quantity(); ok {
		_spec.SetField(customerluggage.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := clu.mutation.AddedQuantity(); ok {
		_spec.AddField(customerluggage.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := clu.mutation.Amount(); ok {
		_spec.SetField(customerluggage.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := clu.mutation.AddedAmount(); ok {
		_spec.AddField(customerluggage.FieldAmount, field.TypeFloat64, value)
	}
	if clu.mutation.BookingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customerluggage.BookingTable,
			Columns: []string{customerluggage.BookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.BookingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customerluggage.BookingTable,
			Columns: []string{customerluggage.BookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(clu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, clu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customerluggage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clu.mutation.done = true
	return n, nil
}

// CustomerLuggageUpdateOne is the builder for updating a single CustomerLuggage entity.
type CustomerLuggageUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CustomerLuggageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cluo *CustomerLuggageUpdateOne) SetUpdatedAt(t time.Time) *CustomerLuggageUpdateOne {
	cluo.mutation.SetUpdatedAt(t)
	return cluo
}

// SetBaggage sets the "baggage" field.
func (cluo *CustomerLuggageUpdateOne) SetBaggage(c customerluggage.Baggage) *CustomerLuggageUpdateOne {
	cluo.mutation.SetBaggage(c)
	return cluo
}

// SetNillableBaggage sets the "baggage" field if the given value is not nil.
func (cluo *CustomerLuggageUpdateOne) SetNillableBaggage(c *customerluggage.Baggage) *CustomerLuggageUpdateOne {
	if c != nil {
		cluo.SetBaggage(*c)
	}
	return cluo
}

// ClearBaggage clears the value of the "baggage" field.
func (cluo *CustomerLuggageUpdateOne) ClearBaggage() *CustomerLuggageUpdateOne {
	cluo.mutation.ClearBaggage()
	return cluo
}

// SetQuantity sets the "quantity" field.
func (cluo *CustomerLuggageUpdateOne) SetQuantity(i int) *CustomerLuggageUpdateOne {
	cluo.mutation.ResetQuantity()
	cluo.mutation.SetQuantity(i)
	return cluo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (cluo *CustomerLuggageUpdateOne) SetNillableQuantity(i *int) *CustomerLuggageUpdateOne {
	if i != nil {
		cluo.SetQuantity(*i)
	}
	return cluo
}

// AddQuantity adds i to the "quantity" field.
func (cluo *CustomerLuggageUpdateOne) AddQuantity(i int) *CustomerLuggageUpdateOne {
	cluo.mutation.AddQuantity(i)
	return cluo
}

// SetAmount sets the "amount" field.
func (cluo *CustomerLuggageUpdateOne) SetAmount(f float64) *CustomerLuggageUpdateOne {
	cluo.mutation.ResetAmount()
	cluo.mutation.SetAmount(f)
	return cluo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (cluo *CustomerLuggageUpdateOne) SetNillableAmount(f *float64) *CustomerLuggageUpdateOne {
	if f != nil {
		cluo.SetAmount(*f)
	}
	return cluo
}

// AddAmount adds f to the "amount" field.
func (cluo *CustomerLuggageUpdateOne) AddAmount(f float64) *CustomerLuggageUpdateOne {
	cluo.mutation.AddAmount(f)
	return cluo
}

// SetBookingID sets the "booking" edge to the Booking entity by ID.
func (cluo *CustomerLuggageUpdateOne) SetBookingID(id int) *CustomerLuggageUpdateOne {
	cluo.mutation.SetBookingID(id)
	return cluo
}

// SetNillableBookingID sets the "booking" edge to the Booking entity by ID if the given value is not nil.
func (cluo *CustomerLuggageUpdateOne) SetNillableBookingID(id *int) *CustomerLuggageUpdateOne {
	if id != nil {
		cluo = cluo.SetBookingID(*id)
	}
	return cluo
}

// SetBooking sets the "booking" edge to the Booking entity.
func (cluo *CustomerLuggageUpdateOne) SetBooking(b *Booking) *CustomerLuggageUpdateOne {
	return cluo.SetBookingID(b.ID)
}

// Mutation returns the CustomerLuggageMutation object of the builder.
func (cluo *CustomerLuggageUpdateOne) Mutation() *CustomerLuggageMutation {
	return cluo.mutation
}

// ClearBooking clears the "booking" edge to the Booking entity.
func (cluo *CustomerLuggageUpdateOne) ClearBooking() *CustomerLuggageUpdateOne {
	cluo.mutation.ClearBooking()
	return cluo
}

// Where appends a list predicates to the CustomerLuggageUpdate builder.
func (cluo *CustomerLuggageUpdateOne) Where(ps ...predicate.CustomerLuggage) *CustomerLuggageUpdateOne {
	cluo.mutation.Where(ps...)
	return cluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cluo *CustomerLuggageUpdateOne) Select(field string, fields ...string) *CustomerLuggageUpdateOne {
	cluo.fields = append([]string{field}, fields...)
	return cluo
}

// Save executes the query and returns the updated CustomerLuggage entity.
func (cluo *CustomerLuggageUpdateOne) Save(ctx context.Context) (*CustomerLuggage, error) {
	cluo.defaults()
	return withHooks(ctx, cluo.sqlSave, cluo.mutation, cluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cluo *CustomerLuggageUpdateOne) SaveX(ctx context.Context) *CustomerLuggage {
	node, err := cluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cluo *CustomerLuggageUpdateOne) Exec(ctx context.Context) error {
	_, err := cluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluo *CustomerLuggageUpdateOne) ExecX(ctx context.Context) {
	if err := cluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cluo *CustomerLuggageUpdateOne) defaults() {
	if _, ok := cluo.mutation.UpdatedAt(); !ok {
		v := customerluggage.UpdateDefaultUpdatedAt()
		cluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cluo *CustomerLuggageUpdateOne) check() error {
	if v, ok := cluo.mutation.Baggage(); ok {
		if err := customerluggage.BaggageValidator(v); err != nil {
			return &ValidationError{Name: "baggage", err: fmt.Errorf(`ent: validator failed for field "CustomerLuggage.baggage": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cluo *CustomerLuggageUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerLuggageUpdateOne {
	cluo.modifiers = append(cluo.modifiers, modifiers...)
	return cluo
}

func (cluo *CustomerLuggageUpdateOne) sqlSave(ctx context.Context) (_node *CustomerLuggage, err error) {
	if err := cluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customerluggage.Table, customerluggage.Columns, sqlgraph.NewFieldSpec(customerluggage.FieldID, field.TypeInt))
	id, ok := cluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CustomerLuggage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customerluggage.FieldID)
		for _, f := range fields {
			if !customerluggage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customerluggage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cluo.mutation.UpdatedAt(); ok {
		_spec.SetField(customerluggage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cluo.mutation.Baggage(); ok {
		_spec.SetField(customerluggage.FieldBaggage, field.TypeEnum, value)
	}
	if cluo.mutation.BaggageCleared() {
		_spec.ClearField(customerluggage.FieldBaggage, field.TypeEnum)
	}
	if value, ok := cluo.mutation.Quantity(); ok {
		_spec.SetField(customerluggage.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := cluo.mutation.AddedQuantity(); ok {
		_spec.AddField(customerluggage.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := cluo.mutation.Amount(); ok {
		_spec.SetField(customerluggage.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cluo.mutation.AddedAmount(); ok {
		_spec.AddField(customerluggage.FieldAmount, field.TypeFloat64, value)
	}
	if cluo.mutation.BookingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customerluggage.BookingTable,
			Columns: []string{customerluggage.BookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.BookingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customerluggage.BookingTable,
			Columns: []string{customerluggage.BookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cluo.modifiers...)
	_node = &CustomerLuggage{config: cluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customerluggage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cluo.mutation.done = true
	return _node, nil
}
