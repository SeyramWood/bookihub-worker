// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/bookibus/ent/bookibususer"
	"github.com/SeyramWood/bookibus/ent/company"
	"github.com/SeyramWood/bookibus/ent/companyuser"
	"github.com/SeyramWood/bookibus/ent/customer"
	"github.com/SeyramWood/bookibus/ent/notification"
	"github.com/SeyramWood/bookibus/ent/predicate"
	"github.com/SeyramWood/bookibus/ent/schema"
)

// NotificationUpdate is the builder for updating Notification entities.
type NotificationUpdate struct {
	config
	hooks     []Hook
	mutation  *NotificationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nu *NotificationUpdate) Where(ps ...predicate.Notification) *NotificationUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetEvent sets the "event" field.
func (nu *NotificationUpdate) SetEvent(s string) *NotificationUpdate {
	nu.mutation.SetEvent(s)
	return nu
}

// SetActivity sets the "activity" field.
func (nu *NotificationUpdate) SetActivity(s string) *NotificationUpdate {
	nu.mutation.SetActivity(s)
	return nu
}

// SetDescription sets the "description" field.
func (nu *NotificationUpdate) SetDescription(s string) *NotificationUpdate {
	nu.mutation.SetDescription(s)
	return nu
}

// SetSubjectType sets the "subject_type" field.
func (nu *NotificationUpdate) SetSubjectType(s string) *NotificationUpdate {
	nu.mutation.SetSubjectType(s)
	return nu
}

// SetSubjectID sets the "subject_id" field.
func (nu *NotificationUpdate) SetSubjectID(i int) *NotificationUpdate {
	nu.mutation.ResetSubjectID()
	nu.mutation.SetSubjectID(i)
	return nu
}

// SetNillableSubjectID sets the "subject_id" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableSubjectID(i *int) *NotificationUpdate {
	if i != nil {
		nu.SetSubjectID(*i)
	}
	return nu
}

// AddSubjectID adds i to the "subject_id" field.
func (nu *NotificationUpdate) AddSubjectID(i int) *NotificationUpdate {
	nu.mutation.AddSubjectID(i)
	return nu
}

// ClearSubjectID clears the value of the "subject_id" field.
func (nu *NotificationUpdate) ClearSubjectID() *NotificationUpdate {
	nu.mutation.ClearSubjectID()
	return nu
}

// SetCreatorType sets the "creator_type" field.
func (nu *NotificationUpdate) SetCreatorType(s string) *NotificationUpdate {
	nu.mutation.SetCreatorType(s)
	return nu
}

// SetCreatorID sets the "creator_id" field.
func (nu *NotificationUpdate) SetCreatorID(i int) *NotificationUpdate {
	nu.mutation.ResetCreatorID()
	nu.mutation.SetCreatorID(i)
	return nu
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableCreatorID(i *int) *NotificationUpdate {
	if i != nil {
		nu.SetCreatorID(*i)
	}
	return nu
}

// AddCreatorID adds i to the "creator_id" field.
func (nu *NotificationUpdate) AddCreatorID(i int) *NotificationUpdate {
	nu.mutation.AddCreatorID(i)
	return nu
}

// ClearCreatorID clears the value of the "creator_id" field.
func (nu *NotificationUpdate) ClearCreatorID() *NotificationUpdate {
	nu.mutation.ClearCreatorID()
	return nu
}

// SetCustomerReadAt sets the "customer_read_at" field.
func (nu *NotificationUpdate) SetCustomerReadAt(s string) *NotificationUpdate {
	nu.mutation.SetCustomerReadAt(s)
	return nu
}

// SetNillableCustomerReadAt sets the "customer_read_at" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableCustomerReadAt(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetCustomerReadAt(*s)
	}
	return nu
}

// ClearCustomerReadAt clears the value of the "customer_read_at" field.
func (nu *NotificationUpdate) ClearCustomerReadAt() *NotificationUpdate {
	nu.mutation.ClearCustomerReadAt()
	return nu
}

// SetBookibusReadAt sets the "bookibus_read_at" field.
func (nu *NotificationUpdate) SetBookibusReadAt(sr []*schema.NotificationRead) *NotificationUpdate {
	nu.mutation.SetBookibusReadAt(sr)
	return nu
}

// AppendBookibusReadAt appends sr to the "bookibus_read_at" field.
func (nu *NotificationUpdate) AppendBookibusReadAt(sr []*schema.NotificationRead) *NotificationUpdate {
	nu.mutation.AppendBookibusReadAt(sr)
	return nu
}

// ClearBookibusReadAt clears the value of the "bookibus_read_at" field.
func (nu *NotificationUpdate) ClearBookibusReadAt() *NotificationUpdate {
	nu.mutation.ClearBookibusReadAt()
	return nu
}

// SetCompanyReadAt sets the "company_read_at" field.
func (nu *NotificationUpdate) SetCompanyReadAt(sr []*schema.NotificationRead) *NotificationUpdate {
	nu.mutation.SetCompanyReadAt(sr)
	return nu
}

// AppendCompanyReadAt appends sr to the "company_read_at" field.
func (nu *NotificationUpdate) AppendCompanyReadAt(sr []*schema.NotificationRead) *NotificationUpdate {
	nu.mutation.AppendCompanyReadAt(sr)
	return nu
}

// ClearCompanyReadAt clears the value of the "company_read_at" field.
func (nu *NotificationUpdate) ClearCompanyReadAt() *NotificationUpdate {
	nu.mutation.ClearCompanyReadAt()
	return nu
}

// SetData sets the "data" field.
func (nu *NotificationUpdate) SetData(s *struct {
	Data interface{} "json:\"data\""
}) *NotificationUpdate {
	nu.mutation.SetData(s)
	return nu
}

// ClearData clears the value of the "data" field.
func (nu *NotificationUpdate) ClearData() *NotificationUpdate {
	nu.mutation.ClearData()
	return nu
}

// AddBookibusUserIDs adds the "bookibus_user" edge to the BookibusUser entity by IDs.
func (nu *NotificationUpdate) AddBookibusUserIDs(ids ...int) *NotificationUpdate {
	nu.mutation.AddBookibusUserIDs(ids...)
	return nu
}

// AddBookibusUser adds the "bookibus_user" edges to the BookibusUser entity.
func (nu *NotificationUpdate) AddBookibusUser(b ...*BookibusUser) *NotificationUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return nu.AddBookibusUserIDs(ids...)
}

// AddCompanyUserIDs adds the "company_user" edge to the CompanyUser entity by IDs.
func (nu *NotificationUpdate) AddCompanyUserIDs(ids ...int) *NotificationUpdate {
	nu.mutation.AddCompanyUserIDs(ids...)
	return nu
}

// AddCompanyUser adds the "company_user" edges to the CompanyUser entity.
func (nu *NotificationUpdate) AddCompanyUser(c ...*CompanyUser) *NotificationUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.AddCompanyUserIDs(ids...)
}

// AddCustomerIDs adds the "customer" edge to the Customer entity by IDs.
func (nu *NotificationUpdate) AddCustomerIDs(ids ...int) *NotificationUpdate {
	nu.mutation.AddCustomerIDs(ids...)
	return nu
}

// AddCustomer adds the "customer" edges to the Customer entity.
func (nu *NotificationUpdate) AddCustomer(c ...*Customer) *NotificationUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.AddCustomerIDs(ids...)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (nu *NotificationUpdate) SetCompanyID(id int) *NotificationUpdate {
	nu.mutation.SetCompanyID(id)
	return nu
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (nu *NotificationUpdate) SetNillableCompanyID(id *int) *NotificationUpdate {
	if id != nil {
		nu = nu.SetCompanyID(*id)
	}
	return nu
}

// SetCompany sets the "company" edge to the Company entity.
func (nu *NotificationUpdate) SetCompany(c *Company) *NotificationUpdate {
	return nu.SetCompanyID(c.ID)
}

// Mutation returns the NotificationMutation object of the builder.
func (nu *NotificationUpdate) Mutation() *NotificationMutation {
	return nu.mutation
}

// ClearBookibusUser clears all "bookibus_user" edges to the BookibusUser entity.
func (nu *NotificationUpdate) ClearBookibusUser() *NotificationUpdate {
	nu.mutation.ClearBookibusUser()
	return nu
}

// RemoveBookibusUserIDs removes the "bookibus_user" edge to BookibusUser entities by IDs.
func (nu *NotificationUpdate) RemoveBookibusUserIDs(ids ...int) *NotificationUpdate {
	nu.mutation.RemoveBookibusUserIDs(ids...)
	return nu
}

// RemoveBookibusUser removes "bookibus_user" edges to BookibusUser entities.
func (nu *NotificationUpdate) RemoveBookibusUser(b ...*BookibusUser) *NotificationUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return nu.RemoveBookibusUserIDs(ids...)
}

// ClearCompanyUser clears all "company_user" edges to the CompanyUser entity.
func (nu *NotificationUpdate) ClearCompanyUser() *NotificationUpdate {
	nu.mutation.ClearCompanyUser()
	return nu
}

// RemoveCompanyUserIDs removes the "company_user" edge to CompanyUser entities by IDs.
func (nu *NotificationUpdate) RemoveCompanyUserIDs(ids ...int) *NotificationUpdate {
	nu.mutation.RemoveCompanyUserIDs(ids...)
	return nu
}

// RemoveCompanyUser removes "company_user" edges to CompanyUser entities.
func (nu *NotificationUpdate) RemoveCompanyUser(c ...*CompanyUser) *NotificationUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.RemoveCompanyUserIDs(ids...)
}

// ClearCustomer clears all "customer" edges to the Customer entity.
func (nu *NotificationUpdate) ClearCustomer() *NotificationUpdate {
	nu.mutation.ClearCustomer()
	return nu
}

// RemoveCustomerIDs removes the "customer" edge to Customer entities by IDs.
func (nu *NotificationUpdate) RemoveCustomerIDs(ids ...int) *NotificationUpdate {
	nu.mutation.RemoveCustomerIDs(ids...)
	return nu
}

// RemoveCustomer removes "customer" edges to Customer entities.
func (nu *NotificationUpdate) RemoveCustomer(c ...*Customer) *NotificationUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.RemoveCustomerIDs(ids...)
}

// ClearCompany clears the "company" edge to the Company entity.
func (nu *NotificationUpdate) ClearCompany() *NotificationUpdate {
	nu.mutation.ClearCompany()
	return nu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NotificationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NotificationUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NotificationUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NotificationUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NotificationUpdate) check() error {
	if v, ok := nu.mutation.Event(); ok {
		if err := notification.EventValidator(v); err != nil {
			return &ValidationError{Name: "event", err: fmt.Errorf(`ent: validator failed for field "Notification.event": %w`, err)}
		}
	}
	if v, ok := nu.mutation.Activity(); ok {
		if err := notification.ActivityValidator(v); err != nil {
			return &ValidationError{Name: "activity", err: fmt.Errorf(`ent: validator failed for field "Notification.activity": %w`, err)}
		}
	}
	if v, ok := nu.mutation.Description(); ok {
		if err := notification.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Notification.description": %w`, err)}
		}
	}
	if v, ok := nu.mutation.SubjectType(); ok {
		if err := notification.SubjectTypeValidator(v); err != nil {
			return &ValidationError{Name: "subject_type", err: fmt.Errorf(`ent: validator failed for field "Notification.subject_type": %w`, err)}
		}
	}
	if v, ok := nu.mutation.CreatorType(); ok {
		if err := notification.CreatorTypeValidator(v); err != nil {
			return &ValidationError{Name: "creator_type", err: fmt.Errorf(`ent: validator failed for field "Notification.creator_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (nu *NotificationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotificationUpdate {
	nu.modifiers = append(nu.modifiers, modifiers...)
	return nu
}

func (nu *NotificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Event(); ok {
		_spec.SetField(notification.FieldEvent, field.TypeString, value)
	}
	if value, ok := nu.mutation.Activity(); ok {
		_spec.SetField(notification.FieldActivity, field.TypeString, value)
	}
	if value, ok := nu.mutation.Description(); ok {
		_spec.SetField(notification.FieldDescription, field.TypeString, value)
	}
	if value, ok := nu.mutation.SubjectType(); ok {
		_spec.SetField(notification.FieldSubjectType, field.TypeString, value)
	}
	if value, ok := nu.mutation.SubjectID(); ok {
		_spec.SetField(notification.FieldSubjectID, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedSubjectID(); ok {
		_spec.AddField(notification.FieldSubjectID, field.TypeInt, value)
	}
	if nu.mutation.SubjectIDCleared() {
		_spec.ClearField(notification.FieldSubjectID, field.TypeInt)
	}
	if value, ok := nu.mutation.CreatorType(); ok {
		_spec.SetField(notification.FieldCreatorType, field.TypeString, value)
	}
	if value, ok := nu.mutation.CreatorID(); ok {
		_spec.SetField(notification.FieldCreatorID, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedCreatorID(); ok {
		_spec.AddField(notification.FieldCreatorID, field.TypeInt, value)
	}
	if nu.mutation.CreatorIDCleared() {
		_spec.ClearField(notification.FieldCreatorID, field.TypeInt)
	}
	if value, ok := nu.mutation.CustomerReadAt(); ok {
		_spec.SetField(notification.FieldCustomerReadAt, field.TypeString, value)
	}
	if nu.mutation.CustomerReadAtCleared() {
		_spec.ClearField(notification.FieldCustomerReadAt, field.TypeString)
	}
	if value, ok := nu.mutation.BookibusReadAt(); ok {
		_spec.SetField(notification.FieldBookibusReadAt, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedBookibusReadAt(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, notification.FieldBookibusReadAt, value)
		})
	}
	if nu.mutation.BookibusReadAtCleared() {
		_spec.ClearField(notification.FieldBookibusReadAt, field.TypeJSON)
	}
	if value, ok := nu.mutation.CompanyReadAt(); ok {
		_spec.SetField(notification.FieldCompanyReadAt, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedCompanyReadAt(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, notification.FieldCompanyReadAt, value)
		})
	}
	if nu.mutation.CompanyReadAtCleared() {
		_spec.ClearField(notification.FieldCompanyReadAt, field.TypeJSON)
	}
	if value, ok := nu.mutation.Data(); ok {
		_spec.SetField(notification.FieldData, field.TypeJSON, value)
	}
	if nu.mutation.DataCleared() {
		_spec.ClearField(notification.FieldData, field.TypeJSON)
	}
	if nu.mutation.BookibusUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.BookibusUserTable,
			Columns: notification.BookibusUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookibususer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedBookibusUserIDs(); len(nodes) > 0 && !nu.mutation.BookibusUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.BookibusUserTable,
			Columns: notification.BookibusUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookibususer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.BookibusUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.BookibusUserTable,
			Columns: notification.BookibusUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookibususer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.CompanyUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.CompanyUserTable,
			Columns: notification.CompanyUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedCompanyUserIDs(); len(nodes) > 0 && !nu.mutation.CompanyUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.CompanyUserTable,
			Columns: notification.CompanyUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.CompanyUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.CompanyUserTable,
			Columns: notification.CompanyUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.CustomerTable,
			Columns: notification.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedCustomerIDs(); len(nodes) > 0 && !nu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.CustomerTable,
			Columns: notification.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.CustomerTable,
			Columns: notification.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.CompanyTable,
			Columns: []string{notification.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.CompanyTable,
			Columns: []string{notification.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(nu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NotificationUpdateOne is the builder for updating a single Notification entity.
type NotificationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *NotificationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEvent sets the "event" field.
func (nuo *NotificationUpdateOne) SetEvent(s string) *NotificationUpdateOne {
	nuo.mutation.SetEvent(s)
	return nuo
}

// SetActivity sets the "activity" field.
func (nuo *NotificationUpdateOne) SetActivity(s string) *NotificationUpdateOne {
	nuo.mutation.SetActivity(s)
	return nuo
}

// SetDescription sets the "description" field.
func (nuo *NotificationUpdateOne) SetDescription(s string) *NotificationUpdateOne {
	nuo.mutation.SetDescription(s)
	return nuo
}

// SetSubjectType sets the "subject_type" field.
func (nuo *NotificationUpdateOne) SetSubjectType(s string) *NotificationUpdateOne {
	nuo.mutation.SetSubjectType(s)
	return nuo
}

// SetSubjectID sets the "subject_id" field.
func (nuo *NotificationUpdateOne) SetSubjectID(i int) *NotificationUpdateOne {
	nuo.mutation.ResetSubjectID()
	nuo.mutation.SetSubjectID(i)
	return nuo
}

// SetNillableSubjectID sets the "subject_id" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableSubjectID(i *int) *NotificationUpdateOne {
	if i != nil {
		nuo.SetSubjectID(*i)
	}
	return nuo
}

// AddSubjectID adds i to the "subject_id" field.
func (nuo *NotificationUpdateOne) AddSubjectID(i int) *NotificationUpdateOne {
	nuo.mutation.AddSubjectID(i)
	return nuo
}

// ClearSubjectID clears the value of the "subject_id" field.
func (nuo *NotificationUpdateOne) ClearSubjectID() *NotificationUpdateOne {
	nuo.mutation.ClearSubjectID()
	return nuo
}

// SetCreatorType sets the "creator_type" field.
func (nuo *NotificationUpdateOne) SetCreatorType(s string) *NotificationUpdateOne {
	nuo.mutation.SetCreatorType(s)
	return nuo
}

// SetCreatorID sets the "creator_id" field.
func (nuo *NotificationUpdateOne) SetCreatorID(i int) *NotificationUpdateOne {
	nuo.mutation.ResetCreatorID()
	nuo.mutation.SetCreatorID(i)
	return nuo
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableCreatorID(i *int) *NotificationUpdateOne {
	if i != nil {
		nuo.SetCreatorID(*i)
	}
	return nuo
}

// AddCreatorID adds i to the "creator_id" field.
func (nuo *NotificationUpdateOne) AddCreatorID(i int) *NotificationUpdateOne {
	nuo.mutation.AddCreatorID(i)
	return nuo
}

// ClearCreatorID clears the value of the "creator_id" field.
func (nuo *NotificationUpdateOne) ClearCreatorID() *NotificationUpdateOne {
	nuo.mutation.ClearCreatorID()
	return nuo
}

// SetCustomerReadAt sets the "customer_read_at" field.
func (nuo *NotificationUpdateOne) SetCustomerReadAt(s string) *NotificationUpdateOne {
	nuo.mutation.SetCustomerReadAt(s)
	return nuo
}

// SetNillableCustomerReadAt sets the "customer_read_at" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableCustomerReadAt(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetCustomerReadAt(*s)
	}
	return nuo
}

// ClearCustomerReadAt clears the value of the "customer_read_at" field.
func (nuo *NotificationUpdateOne) ClearCustomerReadAt() *NotificationUpdateOne {
	nuo.mutation.ClearCustomerReadAt()
	return nuo
}

// SetBookibusReadAt sets the "bookibus_read_at" field.
func (nuo *NotificationUpdateOne) SetBookibusReadAt(sr []*schema.NotificationRead) *NotificationUpdateOne {
	nuo.mutation.SetBookibusReadAt(sr)
	return nuo
}

// AppendBookibusReadAt appends sr to the "bookibus_read_at" field.
func (nuo *NotificationUpdateOne) AppendBookibusReadAt(sr []*schema.NotificationRead) *NotificationUpdateOne {
	nuo.mutation.AppendBookibusReadAt(sr)
	return nuo
}

// ClearBookibusReadAt clears the value of the "bookibus_read_at" field.
func (nuo *NotificationUpdateOne) ClearBookibusReadAt() *NotificationUpdateOne {
	nuo.mutation.ClearBookibusReadAt()
	return nuo
}

// SetCompanyReadAt sets the "company_read_at" field.
func (nuo *NotificationUpdateOne) SetCompanyReadAt(sr []*schema.NotificationRead) *NotificationUpdateOne {
	nuo.mutation.SetCompanyReadAt(sr)
	return nuo
}

// AppendCompanyReadAt appends sr to the "company_read_at" field.
func (nuo *NotificationUpdateOne) AppendCompanyReadAt(sr []*schema.NotificationRead) *NotificationUpdateOne {
	nuo.mutation.AppendCompanyReadAt(sr)
	return nuo
}

// ClearCompanyReadAt clears the value of the "company_read_at" field.
func (nuo *NotificationUpdateOne) ClearCompanyReadAt() *NotificationUpdateOne {
	nuo.mutation.ClearCompanyReadAt()
	return nuo
}

// SetData sets the "data" field.
func (nuo *NotificationUpdateOne) SetData(s *struct {
	Data interface{} "json:\"data\""
}) *NotificationUpdateOne {
	nuo.mutation.SetData(s)
	return nuo
}

// ClearData clears the value of the "data" field.
func (nuo *NotificationUpdateOne) ClearData() *NotificationUpdateOne {
	nuo.mutation.ClearData()
	return nuo
}

// AddBookibusUserIDs adds the "bookibus_user" edge to the BookibusUser entity by IDs.
func (nuo *NotificationUpdateOne) AddBookibusUserIDs(ids ...int) *NotificationUpdateOne {
	nuo.mutation.AddBookibusUserIDs(ids...)
	return nuo
}

// AddBookibusUser adds the "bookibus_user" edges to the BookibusUser entity.
func (nuo *NotificationUpdateOne) AddBookibusUser(b ...*BookibusUser) *NotificationUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return nuo.AddBookibusUserIDs(ids...)
}

// AddCompanyUserIDs adds the "company_user" edge to the CompanyUser entity by IDs.
func (nuo *NotificationUpdateOne) AddCompanyUserIDs(ids ...int) *NotificationUpdateOne {
	nuo.mutation.AddCompanyUserIDs(ids...)
	return nuo
}

// AddCompanyUser adds the "company_user" edges to the CompanyUser entity.
func (nuo *NotificationUpdateOne) AddCompanyUser(c ...*CompanyUser) *NotificationUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.AddCompanyUserIDs(ids...)
}

// AddCustomerIDs adds the "customer" edge to the Customer entity by IDs.
func (nuo *NotificationUpdateOne) AddCustomerIDs(ids ...int) *NotificationUpdateOne {
	nuo.mutation.AddCustomerIDs(ids...)
	return nuo
}

// AddCustomer adds the "customer" edges to the Customer entity.
func (nuo *NotificationUpdateOne) AddCustomer(c ...*Customer) *NotificationUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.AddCustomerIDs(ids...)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (nuo *NotificationUpdateOne) SetCompanyID(id int) *NotificationUpdateOne {
	nuo.mutation.SetCompanyID(id)
	return nuo
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableCompanyID(id *int) *NotificationUpdateOne {
	if id != nil {
		nuo = nuo.SetCompanyID(*id)
	}
	return nuo
}

// SetCompany sets the "company" edge to the Company entity.
func (nuo *NotificationUpdateOne) SetCompany(c *Company) *NotificationUpdateOne {
	return nuo.SetCompanyID(c.ID)
}

// Mutation returns the NotificationMutation object of the builder.
func (nuo *NotificationUpdateOne) Mutation() *NotificationMutation {
	return nuo.mutation
}

// ClearBookibusUser clears all "bookibus_user" edges to the BookibusUser entity.
func (nuo *NotificationUpdateOne) ClearBookibusUser() *NotificationUpdateOne {
	nuo.mutation.ClearBookibusUser()
	return nuo
}

// RemoveBookibusUserIDs removes the "bookibus_user" edge to BookibusUser entities by IDs.
func (nuo *NotificationUpdateOne) RemoveBookibusUserIDs(ids ...int) *NotificationUpdateOne {
	nuo.mutation.RemoveBookibusUserIDs(ids...)
	return nuo
}

// RemoveBookibusUser removes "bookibus_user" edges to BookibusUser entities.
func (nuo *NotificationUpdateOne) RemoveBookibusUser(b ...*BookibusUser) *NotificationUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return nuo.RemoveBookibusUserIDs(ids...)
}

// ClearCompanyUser clears all "company_user" edges to the CompanyUser entity.
func (nuo *NotificationUpdateOne) ClearCompanyUser() *NotificationUpdateOne {
	nuo.mutation.ClearCompanyUser()
	return nuo
}

// RemoveCompanyUserIDs removes the "company_user" edge to CompanyUser entities by IDs.
func (nuo *NotificationUpdateOne) RemoveCompanyUserIDs(ids ...int) *NotificationUpdateOne {
	nuo.mutation.RemoveCompanyUserIDs(ids...)
	return nuo
}

// RemoveCompanyUser removes "company_user" edges to CompanyUser entities.
func (nuo *NotificationUpdateOne) RemoveCompanyUser(c ...*CompanyUser) *NotificationUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.RemoveCompanyUserIDs(ids...)
}

// ClearCustomer clears all "customer" edges to the Customer entity.
func (nuo *NotificationUpdateOne) ClearCustomer() *NotificationUpdateOne {
	nuo.mutation.ClearCustomer()
	return nuo
}

// RemoveCustomerIDs removes the "customer" edge to Customer entities by IDs.
func (nuo *NotificationUpdateOne) RemoveCustomerIDs(ids ...int) *NotificationUpdateOne {
	nuo.mutation.RemoveCustomerIDs(ids...)
	return nuo
}

// RemoveCustomer removes "customer" edges to Customer entities.
func (nuo *NotificationUpdateOne) RemoveCustomer(c ...*Customer) *NotificationUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.RemoveCustomerIDs(ids...)
}

// ClearCompany clears the "company" edge to the Company entity.
func (nuo *NotificationUpdateOne) ClearCompany() *NotificationUpdateOne {
	nuo.mutation.ClearCompany()
	return nuo
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nuo *NotificationUpdateOne) Where(ps ...predicate.Notification) *NotificationUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NotificationUpdateOne) Select(field string, fields ...string) *NotificationUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Notification entity.
func (nuo *NotificationUpdateOne) Save(ctx context.Context) (*Notification, error) {
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NotificationUpdateOne) SaveX(ctx context.Context) *Notification {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NotificationUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NotificationUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NotificationUpdateOne) check() error {
	if v, ok := nuo.mutation.Event(); ok {
		if err := notification.EventValidator(v); err != nil {
			return &ValidationError{Name: "event", err: fmt.Errorf(`ent: validator failed for field "Notification.event": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.Activity(); ok {
		if err := notification.ActivityValidator(v); err != nil {
			return &ValidationError{Name: "activity", err: fmt.Errorf(`ent: validator failed for field "Notification.activity": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.Description(); ok {
		if err := notification.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Notification.description": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.SubjectType(); ok {
		if err := notification.SubjectTypeValidator(v); err != nil {
			return &ValidationError{Name: "subject_type", err: fmt.Errorf(`ent: validator failed for field "Notification.subject_type": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.CreatorType(); ok {
		if err := notification.CreatorTypeValidator(v); err != nil {
			return &ValidationError{Name: "creator_type", err: fmt.Errorf(`ent: validator failed for field "Notification.creator_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (nuo *NotificationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotificationUpdateOne {
	nuo.modifiers = append(nuo.modifiers, modifiers...)
	return nuo
}

func (nuo *NotificationUpdateOne) sqlSave(ctx context.Context) (_node *Notification, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Notification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notification.FieldID)
		for _, f := range fields {
			if !notification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.Event(); ok {
		_spec.SetField(notification.FieldEvent, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Activity(); ok {
		_spec.SetField(notification.FieldActivity, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Description(); ok {
		_spec.SetField(notification.FieldDescription, field.TypeString, value)
	}
	if value, ok := nuo.mutation.SubjectType(); ok {
		_spec.SetField(notification.FieldSubjectType, field.TypeString, value)
	}
	if value, ok := nuo.mutation.SubjectID(); ok {
		_spec.SetField(notification.FieldSubjectID, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedSubjectID(); ok {
		_spec.AddField(notification.FieldSubjectID, field.TypeInt, value)
	}
	if nuo.mutation.SubjectIDCleared() {
		_spec.ClearField(notification.FieldSubjectID, field.TypeInt)
	}
	if value, ok := nuo.mutation.CreatorType(); ok {
		_spec.SetField(notification.FieldCreatorType, field.TypeString, value)
	}
	if value, ok := nuo.mutation.CreatorID(); ok {
		_spec.SetField(notification.FieldCreatorID, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedCreatorID(); ok {
		_spec.AddField(notification.FieldCreatorID, field.TypeInt, value)
	}
	if nuo.mutation.CreatorIDCleared() {
		_spec.ClearField(notification.FieldCreatorID, field.TypeInt)
	}
	if value, ok := nuo.mutation.CustomerReadAt(); ok {
		_spec.SetField(notification.FieldCustomerReadAt, field.TypeString, value)
	}
	if nuo.mutation.CustomerReadAtCleared() {
		_spec.ClearField(notification.FieldCustomerReadAt, field.TypeString)
	}
	if value, ok := nuo.mutation.BookibusReadAt(); ok {
		_spec.SetField(notification.FieldBookibusReadAt, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedBookibusReadAt(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, notification.FieldBookibusReadAt, value)
		})
	}
	if nuo.mutation.BookibusReadAtCleared() {
		_spec.ClearField(notification.FieldBookibusReadAt, field.TypeJSON)
	}
	if value, ok := nuo.mutation.CompanyReadAt(); ok {
		_spec.SetField(notification.FieldCompanyReadAt, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedCompanyReadAt(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, notification.FieldCompanyReadAt, value)
		})
	}
	if nuo.mutation.CompanyReadAtCleared() {
		_spec.ClearField(notification.FieldCompanyReadAt, field.TypeJSON)
	}
	if value, ok := nuo.mutation.Data(); ok {
		_spec.SetField(notification.FieldData, field.TypeJSON, value)
	}
	if nuo.mutation.DataCleared() {
		_spec.ClearField(notification.FieldData, field.TypeJSON)
	}
	if nuo.mutation.BookibusUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.BookibusUserTable,
			Columns: notification.BookibusUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookibususer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedBookibusUserIDs(); len(nodes) > 0 && !nuo.mutation.BookibusUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.BookibusUserTable,
			Columns: notification.BookibusUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookibususer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.BookibusUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.BookibusUserTable,
			Columns: notification.BookibusUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookibususer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.CompanyUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.CompanyUserTable,
			Columns: notification.CompanyUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedCompanyUserIDs(); len(nodes) > 0 && !nuo.mutation.CompanyUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.CompanyUserTable,
			Columns: notification.CompanyUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.CompanyUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.CompanyUserTable,
			Columns: notification.CompanyUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.CustomerTable,
			Columns: notification.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedCustomerIDs(); len(nodes) > 0 && !nuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.CustomerTable,
			Columns: notification.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.CustomerTable,
			Columns: notification.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.CompanyTable,
			Columns: []string{notification.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.CompanyTable,
			Columns: []string{notification.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(nuo.modifiers...)
	_node = &Notification{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
