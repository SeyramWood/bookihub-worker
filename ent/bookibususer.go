// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/bookibus/ent/bookibususer"
	"github.com/SeyramWood/bookibus/ent/user"
)

// BookibusUser is the model entity for the BookibusUser schema.
type BookibusUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// OtherName holds the value of the "other_name" field.
	OtherName string `json:"other_name,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// OtherPhone holds the value of the "other_phone" field.
	OtherPhone string `json:"other_phone,omitempty"`
	// Role holds the value of the "role" field.
	Role bookibususer.Role `json:"role,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookibusUserQuery when eager-loading is set.
	Edges        BookibusUserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BookibusUserEdges holds the relations/edges for other nodes in the graph.
type BookibusUserEdges struct {
	// Profile holds the value of the profile edge.
	Profile *User `json:"profile,omitempty"`
	// Notifications holds the value of the notifications edge.
	Notifications []*Notification `json:"notifications,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookibusUserEdges) ProfileOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Profile == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Profile, nil
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// NotificationsOrErr returns the Notifications value or an error if the edge
// was not loaded in eager-loading.
func (e BookibusUserEdges) NotificationsOrErr() ([]*Notification, error) {
	if e.loadedTypes[1] {
		return e.Notifications, nil
	}
	return nil, &NotLoadedError{edge: "notifications"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BookibusUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bookibususer.FieldID:
			values[i] = new(sql.NullInt64)
		case bookibususer.FieldLastName, bookibususer.FieldOtherName, bookibususer.FieldPhone, bookibususer.FieldOtherPhone, bookibususer.FieldRole:
			values[i] = new(sql.NullString)
		case bookibususer.FieldCreatedAt, bookibususer.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BookibusUser fields.
func (bu *BookibusUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bookibususer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bu.ID = int(value.Int64)
		case bookibususer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bu.CreatedAt = value.Time
			}
		case bookibususer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bu.UpdatedAt = value.Time
			}
		case bookibususer.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				bu.LastName = value.String
			}
		case bookibususer.FieldOtherName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field other_name", values[i])
			} else if value.Valid {
				bu.OtherName = value.String
			}
		case bookibususer.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				bu.Phone = value.String
			}
		case bookibususer.FieldOtherPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field other_phone", values[i])
			} else if value.Valid {
				bu.OtherPhone = value.String
			}
		case bookibususer.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				bu.Role = bookibususer.Role(value.String)
			}
		default:
			bu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BookibusUser.
// This includes values selected through modifiers, order, etc.
func (bu *BookibusUser) Value(name string) (ent.Value, error) {
	return bu.selectValues.Get(name)
}

// QueryProfile queries the "profile" edge of the BookibusUser entity.
func (bu *BookibusUser) QueryProfile() *UserQuery {
	return NewBookibusUserClient(bu.config).QueryProfile(bu)
}

// QueryNotifications queries the "notifications" edge of the BookibusUser entity.
func (bu *BookibusUser) QueryNotifications() *NotificationQuery {
	return NewBookibusUserClient(bu.config).QueryNotifications(bu)
}

// Update returns a builder for updating this BookibusUser.
// Note that you need to call BookibusUser.Unwrap() before calling this method if this BookibusUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (bu *BookibusUser) Update() *BookibusUserUpdateOne {
	return NewBookibusUserClient(bu.config).UpdateOne(bu)
}

// Unwrap unwraps the BookibusUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bu *BookibusUser) Unwrap() *BookibusUser {
	_tx, ok := bu.config.driver.(*txDriver)
	if !ok {
		panic("ent: BookibusUser is not a transactional entity")
	}
	bu.config.driver = _tx.drv
	return bu
}

// String implements the fmt.Stringer.
func (bu *BookibusUser) String() string {
	var builder strings.Builder
	builder.WriteString("BookibusUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bu.ID))
	builder.WriteString("created_at=")
	builder.WriteString(bu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bu.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(bu.LastName)
	builder.WriteString(", ")
	builder.WriteString("other_name=")
	builder.WriteString(bu.OtherName)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(bu.Phone)
	builder.WriteString(", ")
	builder.WriteString("other_phone=")
	builder.WriteString(bu.OtherPhone)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", bu.Role))
	builder.WriteByte(')')
	return builder.String()
}

// BookibusUsers is a parsable slice of BookibusUser.
type BookibusUsers []*BookibusUser
