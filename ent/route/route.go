// Code generated by ent, DO NOT EDIT.

package route

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the route type in the database.
	Label = "route"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldFromLocation holds the string denoting the from_location field in the database.
	FieldFromLocation = "from_location"
	// FieldToLocation holds the string denoting the to_location field in the database.
	FieldToLocation = "to_location"
	// FieldFromLatitude holds the string denoting the from_latitude field in the database.
	FieldFromLatitude = "from_latitude"
	// FieldFromLongitude holds the string denoting the from_longitude field in the database.
	FieldFromLongitude = "from_longitude"
	// FieldToLatitude holds the string denoting the to_latitude field in the database.
	FieldToLatitude = "to_latitude"
	// FieldToLongitude holds the string denoting the to_longitude field in the database.
	FieldToLongitude = "to_longitude"
	// FieldRate holds the string denoting the rate field in the database.
	FieldRate = "rate"
	// FieldDiscount holds the string denoting the discount field in the database.
	FieldDiscount = "discount"
	// FieldPopularity holds the string denoting the popularity field in the database.
	FieldPopularity = "popularity"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// EdgeStops holds the string denoting the stops edge name in mutations.
	EdgeStops = "stops"
	// EdgeTrips holds the string denoting the trips edge name in mutations.
	EdgeTrips = "trips"
	// Table holds the table name of the route in the database.
	Table = "routes"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "routes"
	// CompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompanyInverseTable = "companies"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "company_routes"
	// StopsTable is the table that holds the stops relation/edge.
	StopsTable = "route_stops"
	// StopsInverseTable is the table name for the RouteStop entity.
	// It exists in this package in order to avoid circular dependency with the "routestop" package.
	StopsInverseTable = "route_stops"
	// StopsColumn is the table column denoting the stops relation/edge.
	StopsColumn = "route_stops"
	// TripsTable is the table that holds the trips relation/edge.
	TripsTable = "trips"
	// TripsInverseTable is the table name for the Trip entity.
	// It exists in this package in order to avoid circular dependency with the "trip" package.
	TripsInverseTable = "trips"
	// TripsColumn is the table column denoting the trips relation/edge.
	TripsColumn = "route_trips"
)

// Columns holds all SQL columns for route fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldFromLocation,
	FieldToLocation,
	FieldFromLatitude,
	FieldFromLongitude,
	FieldToLatitude,
	FieldToLongitude,
	FieldRate,
	FieldDiscount,
	FieldPopularity,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "routes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"company_routes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// FromLocationValidator is a validator for the "from_location" field. It is called by the builders before save.
	FromLocationValidator func(string) error
	// ToLocationValidator is a validator for the "to_location" field. It is called by the builders before save.
	ToLocationValidator func(string) error
	// DefaultRate holds the default value on creation for the "rate" field.
	DefaultRate float64
	// DefaultDiscount holds the default value on creation for the "discount" field.
	DefaultDiscount float32
	// DefaultPopularity holds the default value on creation for the "popularity" field.
	DefaultPopularity int
)

// OrderOption defines the ordering options for the Route queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByFromLocation orders the results by the from_location field.
func ByFromLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromLocation, opts...).ToFunc()
}

// ByToLocation orders the results by the to_location field.
func ByToLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToLocation, opts...).ToFunc()
}

// ByFromLatitude orders the results by the from_latitude field.
func ByFromLatitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromLatitude, opts...).ToFunc()
}

// ByFromLongitude orders the results by the from_longitude field.
func ByFromLongitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromLongitude, opts...).ToFunc()
}

// ByToLatitude orders the results by the to_latitude field.
func ByToLatitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToLatitude, opts...).ToFunc()
}

// ByToLongitude orders the results by the to_longitude field.
func ByToLongitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToLongitude, opts...).ToFunc()
}

// ByRate orders the results by the rate field.
func ByRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRate, opts...).ToFunc()
}

// ByDiscount orders the results by the discount field.
func ByDiscount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscount, opts...).ToFunc()
}

// ByPopularity orders the results by the popularity field.
func ByPopularity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPopularity, opts...).ToFunc()
}

// ByCompanyField orders the results by company field.
func ByCompanyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyStep(), sql.OrderByField(field, opts...))
	}
}

// ByStopsCount orders the results by stops count.
func ByStopsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStopsStep(), opts...)
	}
}

// ByStops orders the results by stops terms.
func ByStops(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStopsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTripsCount orders the results by trips count.
func ByTripsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTripsStep(), opts...)
	}
}

// ByTrips orders the results by trips terms.
func ByTrips(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTripsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
	)
}
func newStopsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StopsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StopsTable, StopsColumn),
	)
}
func newTripsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TripsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TripsTable, TripsColumn),
	)
}
