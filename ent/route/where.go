// Code generated by ent, DO NOT EDIT.

package route

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/SeyramWood/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldUpdatedAt, v))
}

// FromLocation applies equality check predicate on the "from_location" field. It's identical to FromLocationEQ.
func FromLocation(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldFromLocation, v))
}

// FromTerminal applies equality check predicate on the "from_terminal" field. It's identical to FromTerminalEQ.
func FromTerminal(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldFromTerminal, v))
}

// ToLocation applies equality check predicate on the "to_location" field. It's identical to ToLocationEQ.
func ToLocation(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldToLocation, v))
}

// ToTerminal applies equality check predicate on the "to_terminal" field. It's identical to ToTerminalEQ.
func ToTerminal(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldToTerminal, v))
}

// FromLatitude applies equality check predicate on the "from_latitude" field. It's identical to FromLatitudeEQ.
func FromLatitude(v float64) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldFromLatitude, v))
}

// FromLongitude applies equality check predicate on the "from_longitude" field. It's identical to FromLongitudeEQ.
func FromLongitude(v float64) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldFromLongitude, v))
}

// ToLatitude applies equality check predicate on the "to_latitude" field. It's identical to ToLatitudeEQ.
func ToLatitude(v float64) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldToLatitude, v))
}

// ToLongitude applies equality check predicate on the "to_longitude" field. It's identical to ToLongitudeEQ.
func ToLongitude(v float64) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldToLongitude, v))
}

// Rate applies equality check predicate on the "rate" field. It's identical to RateEQ.
func Rate(v float64) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldRate, v))
}

// Discount applies equality check predicate on the "discount" field. It's identical to DiscountEQ.
func Discount(v float32) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldDiscount, v))
}

// Popularity applies equality check predicate on the "popularity" field. It's identical to PopularityEQ.
func Popularity(v int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldPopularity, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldUpdatedAt, v))
}

// FromLocationEQ applies the EQ predicate on the "from_location" field.
func FromLocationEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldFromLocation, v))
}

// FromLocationNEQ applies the NEQ predicate on the "from_location" field.
func FromLocationNEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldFromLocation, v))
}

// FromLocationIn applies the In predicate on the "from_location" field.
func FromLocationIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldFromLocation, vs...))
}

// FromLocationNotIn applies the NotIn predicate on the "from_location" field.
func FromLocationNotIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldFromLocation, vs...))
}

// FromLocationGT applies the GT predicate on the "from_location" field.
func FromLocationGT(v string) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldFromLocation, v))
}

// FromLocationGTE applies the GTE predicate on the "from_location" field.
func FromLocationGTE(v string) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldFromLocation, v))
}

// FromLocationLT applies the LT predicate on the "from_location" field.
func FromLocationLT(v string) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldFromLocation, v))
}

// FromLocationLTE applies the LTE predicate on the "from_location" field.
func FromLocationLTE(v string) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldFromLocation, v))
}

// FromLocationContains applies the Contains predicate on the "from_location" field.
func FromLocationContains(v string) predicate.Route {
	return predicate.Route(sql.FieldContains(FieldFromLocation, v))
}

// FromLocationHasPrefix applies the HasPrefix predicate on the "from_location" field.
func FromLocationHasPrefix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasPrefix(FieldFromLocation, v))
}

// FromLocationHasSuffix applies the HasSuffix predicate on the "from_location" field.
func FromLocationHasSuffix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasSuffix(FieldFromLocation, v))
}

// FromLocationEqualFold applies the EqualFold predicate on the "from_location" field.
func FromLocationEqualFold(v string) predicate.Route {
	return predicate.Route(sql.FieldEqualFold(FieldFromLocation, v))
}

// FromLocationContainsFold applies the ContainsFold predicate on the "from_location" field.
func FromLocationContainsFold(v string) predicate.Route {
	return predicate.Route(sql.FieldContainsFold(FieldFromLocation, v))
}

// FromTerminalEQ applies the EQ predicate on the "from_terminal" field.
func FromTerminalEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldFromTerminal, v))
}

// FromTerminalNEQ applies the NEQ predicate on the "from_terminal" field.
func FromTerminalNEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldFromTerminal, v))
}

// FromTerminalIn applies the In predicate on the "from_terminal" field.
func FromTerminalIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldFromTerminal, vs...))
}

// FromTerminalNotIn applies the NotIn predicate on the "from_terminal" field.
func FromTerminalNotIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldFromTerminal, vs...))
}

// FromTerminalGT applies the GT predicate on the "from_terminal" field.
func FromTerminalGT(v string) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldFromTerminal, v))
}

// FromTerminalGTE applies the GTE predicate on the "from_terminal" field.
func FromTerminalGTE(v string) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldFromTerminal, v))
}

// FromTerminalLT applies the LT predicate on the "from_terminal" field.
func FromTerminalLT(v string) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldFromTerminal, v))
}

// FromTerminalLTE applies the LTE predicate on the "from_terminal" field.
func FromTerminalLTE(v string) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldFromTerminal, v))
}

// FromTerminalContains applies the Contains predicate on the "from_terminal" field.
func FromTerminalContains(v string) predicate.Route {
	return predicate.Route(sql.FieldContains(FieldFromTerminal, v))
}

// FromTerminalHasPrefix applies the HasPrefix predicate on the "from_terminal" field.
func FromTerminalHasPrefix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasPrefix(FieldFromTerminal, v))
}

// FromTerminalHasSuffix applies the HasSuffix predicate on the "from_terminal" field.
func FromTerminalHasSuffix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasSuffix(FieldFromTerminal, v))
}

// FromTerminalIsNil applies the IsNil predicate on the "from_terminal" field.
func FromTerminalIsNil() predicate.Route {
	return predicate.Route(sql.FieldIsNull(FieldFromTerminal))
}

// FromTerminalNotNil applies the NotNil predicate on the "from_terminal" field.
func FromTerminalNotNil() predicate.Route {
	return predicate.Route(sql.FieldNotNull(FieldFromTerminal))
}

// FromTerminalEqualFold applies the EqualFold predicate on the "from_terminal" field.
func FromTerminalEqualFold(v string) predicate.Route {
	return predicate.Route(sql.FieldEqualFold(FieldFromTerminal, v))
}

// FromTerminalContainsFold applies the ContainsFold predicate on the "from_terminal" field.
func FromTerminalContainsFold(v string) predicate.Route {
	return predicate.Route(sql.FieldContainsFold(FieldFromTerminal, v))
}

// ToLocationEQ applies the EQ predicate on the "to_location" field.
func ToLocationEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldToLocation, v))
}

// ToLocationNEQ applies the NEQ predicate on the "to_location" field.
func ToLocationNEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldToLocation, v))
}

// ToLocationIn applies the In predicate on the "to_location" field.
func ToLocationIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldToLocation, vs...))
}

// ToLocationNotIn applies the NotIn predicate on the "to_location" field.
func ToLocationNotIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldToLocation, vs...))
}

// ToLocationGT applies the GT predicate on the "to_location" field.
func ToLocationGT(v string) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldToLocation, v))
}

// ToLocationGTE applies the GTE predicate on the "to_location" field.
func ToLocationGTE(v string) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldToLocation, v))
}

// ToLocationLT applies the LT predicate on the "to_location" field.
func ToLocationLT(v string) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldToLocation, v))
}

// ToLocationLTE applies the LTE predicate on the "to_location" field.
func ToLocationLTE(v string) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldToLocation, v))
}

// ToLocationContains applies the Contains predicate on the "to_location" field.
func ToLocationContains(v string) predicate.Route {
	return predicate.Route(sql.FieldContains(FieldToLocation, v))
}

// ToLocationHasPrefix applies the HasPrefix predicate on the "to_location" field.
func ToLocationHasPrefix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasPrefix(FieldToLocation, v))
}

// ToLocationHasSuffix applies the HasSuffix predicate on the "to_location" field.
func ToLocationHasSuffix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasSuffix(FieldToLocation, v))
}

// ToLocationEqualFold applies the EqualFold predicate on the "to_location" field.
func ToLocationEqualFold(v string) predicate.Route {
	return predicate.Route(sql.FieldEqualFold(FieldToLocation, v))
}

// ToLocationContainsFold applies the ContainsFold predicate on the "to_location" field.
func ToLocationContainsFold(v string) predicate.Route {
	return predicate.Route(sql.FieldContainsFold(FieldToLocation, v))
}

// ToTerminalEQ applies the EQ predicate on the "to_terminal" field.
func ToTerminalEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldToTerminal, v))
}

// ToTerminalNEQ applies the NEQ predicate on the "to_terminal" field.
func ToTerminalNEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldToTerminal, v))
}

// ToTerminalIn applies the In predicate on the "to_terminal" field.
func ToTerminalIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldToTerminal, vs...))
}

// ToTerminalNotIn applies the NotIn predicate on the "to_terminal" field.
func ToTerminalNotIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldToTerminal, vs...))
}

// ToTerminalGT applies the GT predicate on the "to_terminal" field.
func ToTerminalGT(v string) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldToTerminal, v))
}

// ToTerminalGTE applies the GTE predicate on the "to_terminal" field.
func ToTerminalGTE(v string) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldToTerminal, v))
}

// ToTerminalLT applies the LT predicate on the "to_terminal" field.
func ToTerminalLT(v string) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldToTerminal, v))
}

// ToTerminalLTE applies the LTE predicate on the "to_terminal" field.
func ToTerminalLTE(v string) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldToTerminal, v))
}

// ToTerminalContains applies the Contains predicate on the "to_terminal" field.
func ToTerminalContains(v string) predicate.Route {
	return predicate.Route(sql.FieldContains(FieldToTerminal, v))
}

// ToTerminalHasPrefix applies the HasPrefix predicate on the "to_terminal" field.
func ToTerminalHasPrefix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasPrefix(FieldToTerminal, v))
}

// ToTerminalHasSuffix applies the HasSuffix predicate on the "to_terminal" field.
func ToTerminalHasSuffix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasSuffix(FieldToTerminal, v))
}

// ToTerminalIsNil applies the IsNil predicate on the "to_terminal" field.
func ToTerminalIsNil() predicate.Route {
	return predicate.Route(sql.FieldIsNull(FieldToTerminal))
}

// ToTerminalNotNil applies the NotNil predicate on the "to_terminal" field.
func ToTerminalNotNil() predicate.Route {
	return predicate.Route(sql.FieldNotNull(FieldToTerminal))
}

// ToTerminalEqualFold applies the EqualFold predicate on the "to_terminal" field.
func ToTerminalEqualFold(v string) predicate.Route {
	return predicate.Route(sql.FieldEqualFold(FieldToTerminal, v))
}

// ToTerminalContainsFold applies the ContainsFold predicate on the "to_terminal" field.
func ToTerminalContainsFold(v string) predicate.Route {
	return predicate.Route(sql.FieldContainsFold(FieldToTerminal, v))
}

// FromLatitudeEQ applies the EQ predicate on the "from_latitude" field.
func FromLatitudeEQ(v float64) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldFromLatitude, v))
}

// FromLatitudeNEQ applies the NEQ predicate on the "from_latitude" field.
func FromLatitudeNEQ(v float64) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldFromLatitude, v))
}

// FromLatitudeIn applies the In predicate on the "from_latitude" field.
func FromLatitudeIn(vs ...float64) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldFromLatitude, vs...))
}

// FromLatitudeNotIn applies the NotIn predicate on the "from_latitude" field.
func FromLatitudeNotIn(vs ...float64) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldFromLatitude, vs...))
}

// FromLatitudeGT applies the GT predicate on the "from_latitude" field.
func FromLatitudeGT(v float64) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldFromLatitude, v))
}

// FromLatitudeGTE applies the GTE predicate on the "from_latitude" field.
func FromLatitudeGTE(v float64) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldFromLatitude, v))
}

// FromLatitudeLT applies the LT predicate on the "from_latitude" field.
func FromLatitudeLT(v float64) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldFromLatitude, v))
}

// FromLatitudeLTE applies the LTE predicate on the "from_latitude" field.
func FromLatitudeLTE(v float64) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldFromLatitude, v))
}

// FromLatitudeIsNil applies the IsNil predicate on the "from_latitude" field.
func FromLatitudeIsNil() predicate.Route {
	return predicate.Route(sql.FieldIsNull(FieldFromLatitude))
}

// FromLatitudeNotNil applies the NotNil predicate on the "from_latitude" field.
func FromLatitudeNotNil() predicate.Route {
	return predicate.Route(sql.FieldNotNull(FieldFromLatitude))
}

// FromLongitudeEQ applies the EQ predicate on the "from_longitude" field.
func FromLongitudeEQ(v float64) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldFromLongitude, v))
}

// FromLongitudeNEQ applies the NEQ predicate on the "from_longitude" field.
func FromLongitudeNEQ(v float64) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldFromLongitude, v))
}

// FromLongitudeIn applies the In predicate on the "from_longitude" field.
func FromLongitudeIn(vs ...float64) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldFromLongitude, vs...))
}

// FromLongitudeNotIn applies the NotIn predicate on the "from_longitude" field.
func FromLongitudeNotIn(vs ...float64) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldFromLongitude, vs...))
}

// FromLongitudeGT applies the GT predicate on the "from_longitude" field.
func FromLongitudeGT(v float64) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldFromLongitude, v))
}

// FromLongitudeGTE applies the GTE predicate on the "from_longitude" field.
func FromLongitudeGTE(v float64) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldFromLongitude, v))
}

// FromLongitudeLT applies the LT predicate on the "from_longitude" field.
func FromLongitudeLT(v float64) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldFromLongitude, v))
}

// FromLongitudeLTE applies the LTE predicate on the "from_longitude" field.
func FromLongitudeLTE(v float64) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldFromLongitude, v))
}

// FromLongitudeIsNil applies the IsNil predicate on the "from_longitude" field.
func FromLongitudeIsNil() predicate.Route {
	return predicate.Route(sql.FieldIsNull(FieldFromLongitude))
}

// FromLongitudeNotNil applies the NotNil predicate on the "from_longitude" field.
func FromLongitudeNotNil() predicate.Route {
	return predicate.Route(sql.FieldNotNull(FieldFromLongitude))
}

// ToLatitudeEQ applies the EQ predicate on the "to_latitude" field.
func ToLatitudeEQ(v float64) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldToLatitude, v))
}

// ToLatitudeNEQ applies the NEQ predicate on the "to_latitude" field.
func ToLatitudeNEQ(v float64) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldToLatitude, v))
}

// ToLatitudeIn applies the In predicate on the "to_latitude" field.
func ToLatitudeIn(vs ...float64) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldToLatitude, vs...))
}

// ToLatitudeNotIn applies the NotIn predicate on the "to_latitude" field.
func ToLatitudeNotIn(vs ...float64) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldToLatitude, vs...))
}

// ToLatitudeGT applies the GT predicate on the "to_latitude" field.
func ToLatitudeGT(v float64) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldToLatitude, v))
}

// ToLatitudeGTE applies the GTE predicate on the "to_latitude" field.
func ToLatitudeGTE(v float64) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldToLatitude, v))
}

// ToLatitudeLT applies the LT predicate on the "to_latitude" field.
func ToLatitudeLT(v float64) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldToLatitude, v))
}

// ToLatitudeLTE applies the LTE predicate on the "to_latitude" field.
func ToLatitudeLTE(v float64) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldToLatitude, v))
}

// ToLatitudeIsNil applies the IsNil predicate on the "to_latitude" field.
func ToLatitudeIsNil() predicate.Route {
	return predicate.Route(sql.FieldIsNull(FieldToLatitude))
}

// ToLatitudeNotNil applies the NotNil predicate on the "to_latitude" field.
func ToLatitudeNotNil() predicate.Route {
	return predicate.Route(sql.FieldNotNull(FieldToLatitude))
}

// ToLongitudeEQ applies the EQ predicate on the "to_longitude" field.
func ToLongitudeEQ(v float64) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldToLongitude, v))
}

// ToLongitudeNEQ applies the NEQ predicate on the "to_longitude" field.
func ToLongitudeNEQ(v float64) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldToLongitude, v))
}

// ToLongitudeIn applies the In predicate on the "to_longitude" field.
func ToLongitudeIn(vs ...float64) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldToLongitude, vs...))
}

// ToLongitudeNotIn applies the NotIn predicate on the "to_longitude" field.
func ToLongitudeNotIn(vs ...float64) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldToLongitude, vs...))
}

// ToLongitudeGT applies the GT predicate on the "to_longitude" field.
func ToLongitudeGT(v float64) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldToLongitude, v))
}

// ToLongitudeGTE applies the GTE predicate on the "to_longitude" field.
func ToLongitudeGTE(v float64) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldToLongitude, v))
}

// ToLongitudeLT applies the LT predicate on the "to_longitude" field.
func ToLongitudeLT(v float64) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldToLongitude, v))
}

// ToLongitudeLTE applies the LTE predicate on the "to_longitude" field.
func ToLongitudeLTE(v float64) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldToLongitude, v))
}

// ToLongitudeIsNil applies the IsNil predicate on the "to_longitude" field.
func ToLongitudeIsNil() predicate.Route {
	return predicate.Route(sql.FieldIsNull(FieldToLongitude))
}

// ToLongitudeNotNil applies the NotNil predicate on the "to_longitude" field.
func ToLongitudeNotNil() predicate.Route {
	return predicate.Route(sql.FieldNotNull(FieldToLongitude))
}

// RateEQ applies the EQ predicate on the "rate" field.
func RateEQ(v float64) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldRate, v))
}

// RateNEQ applies the NEQ predicate on the "rate" field.
func RateNEQ(v float64) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldRate, v))
}

// RateIn applies the In predicate on the "rate" field.
func RateIn(vs ...float64) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldRate, vs...))
}

// RateNotIn applies the NotIn predicate on the "rate" field.
func RateNotIn(vs ...float64) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldRate, vs...))
}

// RateGT applies the GT predicate on the "rate" field.
func RateGT(v float64) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldRate, v))
}

// RateGTE applies the GTE predicate on the "rate" field.
func RateGTE(v float64) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldRate, v))
}

// RateLT applies the LT predicate on the "rate" field.
func RateLT(v float64) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldRate, v))
}

// RateLTE applies the LTE predicate on the "rate" field.
func RateLTE(v float64) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldRate, v))
}

// DiscountEQ applies the EQ predicate on the "discount" field.
func DiscountEQ(v float32) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldDiscount, v))
}

// DiscountNEQ applies the NEQ predicate on the "discount" field.
func DiscountNEQ(v float32) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldDiscount, v))
}

// DiscountIn applies the In predicate on the "discount" field.
func DiscountIn(vs ...float32) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldDiscount, vs...))
}

// DiscountNotIn applies the NotIn predicate on the "discount" field.
func DiscountNotIn(vs ...float32) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldDiscount, vs...))
}

// DiscountGT applies the GT predicate on the "discount" field.
func DiscountGT(v float32) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldDiscount, v))
}

// DiscountGTE applies the GTE predicate on the "discount" field.
func DiscountGTE(v float32) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldDiscount, v))
}

// DiscountLT applies the LT predicate on the "discount" field.
func DiscountLT(v float32) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldDiscount, v))
}

// DiscountLTE applies the LTE predicate on the "discount" field.
func DiscountLTE(v float32) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldDiscount, v))
}

// PopularityEQ applies the EQ predicate on the "popularity" field.
func PopularityEQ(v int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldPopularity, v))
}

// PopularityNEQ applies the NEQ predicate on the "popularity" field.
func PopularityNEQ(v int) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldPopularity, v))
}

// PopularityIn applies the In predicate on the "popularity" field.
func PopularityIn(vs ...int) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldPopularity, vs...))
}

// PopularityNotIn applies the NotIn predicate on the "popularity" field.
func PopularityNotIn(vs ...int) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldPopularity, vs...))
}

// PopularityGT applies the GT predicate on the "popularity" field.
func PopularityGT(v int) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldPopularity, v))
}

// PopularityGTE applies the GTE predicate on the "popularity" field.
func PopularityGTE(v int) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldPopularity, v))
}

// PopularityLT applies the LT predicate on the "popularity" field.
func PopularityLT(v int) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldPopularity, v))
}

// PopularityLTE applies the LTE predicate on the "popularity" field.
func PopularityLTE(v int) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldPopularity, v))
}

// HasCompany applies the HasEdge predicate on the "company" edge.
func HasCompany() predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyWith applies the HasEdge predicate on the "company" edge with a given conditions (other predicates).
func HasCompanyWith(preds ...predicate.Company) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		step := newCompanyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStops applies the HasEdge predicate on the "stops" edge.
func HasStops() predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StopsTable, StopsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStopsWith applies the HasEdge predicate on the "stops" edge with a given conditions (other predicates).
func HasStopsWith(preds ...predicate.RouteStop) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		step := newStopsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTrips applies the HasEdge predicate on the "trips" edge.
func HasTrips() predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TripsTable, TripsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTripsWith applies the HasEdge predicate on the "trips" edge with a given conditions (other predicates).
func HasTripsWith(preds ...predicate.Trip) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		step := newTripsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Route) predicate.Route {
	return predicate.Route(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Route) predicate.Route {
	return predicate.Route(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Route) predicate.Route {
	return predicate.Route(sql.NotPredicates(p))
}
