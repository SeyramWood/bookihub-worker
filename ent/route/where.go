// Code generated by ent, DO NOT EDIT.

package route

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/SeyramWood/bookibus/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldUpdatedAt, v))
}

// FromLocation applies equality check predicate on the "from_location" field. It's identical to FromLocationEQ.
func FromLocation(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldFromLocation, v))
}

// ToLocation applies equality check predicate on the "to_location" field. It's identical to ToLocationEQ.
func ToLocation(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldToLocation, v))
}

// Popularity applies equality check predicate on the "popularity" field. It's identical to PopularityEQ.
func Popularity(v int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldPopularity, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldUpdatedAt, v))
}

// FromLocationEQ applies the EQ predicate on the "from_location" field.
func FromLocationEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldFromLocation, v))
}

// FromLocationNEQ applies the NEQ predicate on the "from_location" field.
func FromLocationNEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldFromLocation, v))
}

// FromLocationIn applies the In predicate on the "from_location" field.
func FromLocationIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldFromLocation, vs...))
}

// FromLocationNotIn applies the NotIn predicate on the "from_location" field.
func FromLocationNotIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldFromLocation, vs...))
}

// FromLocationGT applies the GT predicate on the "from_location" field.
func FromLocationGT(v string) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldFromLocation, v))
}

// FromLocationGTE applies the GTE predicate on the "from_location" field.
func FromLocationGTE(v string) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldFromLocation, v))
}

// FromLocationLT applies the LT predicate on the "from_location" field.
func FromLocationLT(v string) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldFromLocation, v))
}

// FromLocationLTE applies the LTE predicate on the "from_location" field.
func FromLocationLTE(v string) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldFromLocation, v))
}

// FromLocationContains applies the Contains predicate on the "from_location" field.
func FromLocationContains(v string) predicate.Route {
	return predicate.Route(sql.FieldContains(FieldFromLocation, v))
}

// FromLocationHasPrefix applies the HasPrefix predicate on the "from_location" field.
func FromLocationHasPrefix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasPrefix(FieldFromLocation, v))
}

// FromLocationHasSuffix applies the HasSuffix predicate on the "from_location" field.
func FromLocationHasSuffix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasSuffix(FieldFromLocation, v))
}

// FromLocationEqualFold applies the EqualFold predicate on the "from_location" field.
func FromLocationEqualFold(v string) predicate.Route {
	return predicate.Route(sql.FieldEqualFold(FieldFromLocation, v))
}

// FromLocationContainsFold applies the ContainsFold predicate on the "from_location" field.
func FromLocationContainsFold(v string) predicate.Route {
	return predicate.Route(sql.FieldContainsFold(FieldFromLocation, v))
}

// ToLocationEQ applies the EQ predicate on the "to_location" field.
func ToLocationEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldToLocation, v))
}

// ToLocationNEQ applies the NEQ predicate on the "to_location" field.
func ToLocationNEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldToLocation, v))
}

// ToLocationIn applies the In predicate on the "to_location" field.
func ToLocationIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldToLocation, vs...))
}

// ToLocationNotIn applies the NotIn predicate on the "to_location" field.
func ToLocationNotIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldToLocation, vs...))
}

// ToLocationGT applies the GT predicate on the "to_location" field.
func ToLocationGT(v string) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldToLocation, v))
}

// ToLocationGTE applies the GTE predicate on the "to_location" field.
func ToLocationGTE(v string) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldToLocation, v))
}

// ToLocationLT applies the LT predicate on the "to_location" field.
func ToLocationLT(v string) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldToLocation, v))
}

// ToLocationLTE applies the LTE predicate on the "to_location" field.
func ToLocationLTE(v string) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldToLocation, v))
}

// ToLocationContains applies the Contains predicate on the "to_location" field.
func ToLocationContains(v string) predicate.Route {
	return predicate.Route(sql.FieldContains(FieldToLocation, v))
}

// ToLocationHasPrefix applies the HasPrefix predicate on the "to_location" field.
func ToLocationHasPrefix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasPrefix(FieldToLocation, v))
}

// ToLocationHasSuffix applies the HasSuffix predicate on the "to_location" field.
func ToLocationHasSuffix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasSuffix(FieldToLocation, v))
}

// ToLocationEqualFold applies the EqualFold predicate on the "to_location" field.
func ToLocationEqualFold(v string) predicate.Route {
	return predicate.Route(sql.FieldEqualFold(FieldToLocation, v))
}

// ToLocationContainsFold applies the ContainsFold predicate on the "to_location" field.
func ToLocationContainsFold(v string) predicate.Route {
	return predicate.Route(sql.FieldContainsFold(FieldToLocation, v))
}

// PopularityEQ applies the EQ predicate on the "popularity" field.
func PopularityEQ(v int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldPopularity, v))
}

// PopularityNEQ applies the NEQ predicate on the "popularity" field.
func PopularityNEQ(v int) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldPopularity, v))
}

// PopularityIn applies the In predicate on the "popularity" field.
func PopularityIn(vs ...int) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldPopularity, vs...))
}

// PopularityNotIn applies the NotIn predicate on the "popularity" field.
func PopularityNotIn(vs ...int) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldPopularity, vs...))
}

// PopularityGT applies the GT predicate on the "popularity" field.
func PopularityGT(v int) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldPopularity, v))
}

// PopularityGTE applies the GTE predicate on the "popularity" field.
func PopularityGTE(v int) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldPopularity, v))
}

// PopularityLT applies the LT predicate on the "popularity" field.
func PopularityLT(v int) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldPopularity, v))
}

// PopularityLTE applies the LTE predicate on the "popularity" field.
func PopularityLTE(v int) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldPopularity, v))
}

// HasCompany applies the HasEdge predicate on the "company" edge.
func HasCompany() predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyWith applies the HasEdge predicate on the "company" edge with a given conditions (other predicates).
func HasCompanyWith(preds ...predicate.Company) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		step := newCompanyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTrips applies the HasEdge predicate on the "trips" edge.
func HasTrips() predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TripsTable, TripsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTripsWith applies the HasEdge predicate on the "trips" edge with a given conditions (other predicates).
func HasTripsWith(preds ...predicate.Trip) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		step := newTripsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Route) predicate.Route {
	return predicate.Route(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Route) predicate.Route {
	return predicate.Route(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Route) predicate.Route {
	return predicate.Route(sql.NotPredicates(p))
}
