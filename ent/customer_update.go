// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/booking"
	"github.com/SeyramWood/ent/customer"
	"github.com/SeyramWood/ent/notification"
	"github.com/SeyramWood/ent/predicate"
	"github.com/SeyramWood/ent/user"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks     []Hook
	mutation  *CustomerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cu *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CustomerUpdate) SetUpdatedAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetLastName sets the "last_name" field.
func (cu *CustomerUpdate) SetLastName(s string) *CustomerUpdate {
	cu.mutation.SetLastName(s)
	return cu
}

// SetOtherName sets the "other_name" field.
func (cu *CustomerUpdate) SetOtherName(s string) *CustomerUpdate {
	cu.mutation.SetOtherName(s)
	return cu
}

// SetPhone sets the "phone" field.
func (cu *CustomerUpdate) SetPhone(s string) *CustomerUpdate {
	cu.mutation.SetPhone(s)
	return cu
}

// SetOtherPhone sets the "other_phone" field.
func (cu *CustomerUpdate) SetOtherPhone(s string) *CustomerUpdate {
	cu.mutation.SetOtherPhone(s)
	return cu
}

// SetNillableOtherPhone sets the "other_phone" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableOtherPhone(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetOtherPhone(*s)
	}
	return cu
}

// ClearOtherPhone clears the value of the "other_phone" field.
func (cu *CustomerUpdate) ClearOtherPhone() *CustomerUpdate {
	cu.mutation.ClearOtherPhone()
	return cu
}

// SetProfileID sets the "profile" edge to the User entity by ID.
func (cu *CustomerUpdate) SetProfileID(id int) *CustomerUpdate {
	cu.mutation.SetProfileID(id)
	return cu
}

// SetNillableProfileID sets the "profile" edge to the User entity by ID if the given value is not nil.
func (cu *CustomerUpdate) SetNillableProfileID(id *int) *CustomerUpdate {
	if id != nil {
		cu = cu.SetProfileID(*id)
	}
	return cu
}

// SetProfile sets the "profile" edge to the User entity.
func (cu *CustomerUpdate) SetProfile(u *User) *CustomerUpdate {
	return cu.SetProfileID(u.ID)
}

// SetBookingsID sets the "bookings" edge to the Booking entity by ID.
func (cu *CustomerUpdate) SetBookingsID(id int) *CustomerUpdate {
	cu.mutation.SetBookingsID(id)
	return cu
}

// SetNillableBookingsID sets the "bookings" edge to the Booking entity by ID if the given value is not nil.
func (cu *CustomerUpdate) SetNillableBookingsID(id *int) *CustomerUpdate {
	if id != nil {
		cu = cu.SetBookingsID(*id)
	}
	return cu
}

// SetBookings sets the "bookings" edge to the Booking entity.
func (cu *CustomerUpdate) SetBookings(b *Booking) *CustomerUpdate {
	return cu.SetBookingsID(b.ID)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (cu *CustomerUpdate) AddNotificationIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddNotificationIDs(ids...)
	return cu
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (cu *CustomerUpdate) AddNotifications(n ...*Notification) *CustomerUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cu.AddNotificationIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cu *CustomerUpdate) Mutation() *CustomerMutation {
	return cu.mutation
}

// ClearProfile clears the "profile" edge to the User entity.
func (cu *CustomerUpdate) ClearProfile() *CustomerUpdate {
	cu.mutation.ClearProfile()
	return cu
}

// ClearBookings clears the "bookings" edge to the Booking entity.
func (cu *CustomerUpdate) ClearBookings() *CustomerUpdate {
	cu.mutation.ClearBookings()
	return cu
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (cu *CustomerUpdate) ClearNotifications() *CustomerUpdate {
	cu.mutation.ClearNotifications()
	return cu
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (cu *CustomerUpdate) RemoveNotificationIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveNotificationIDs(ids...)
	return cu
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (cu *CustomerUpdate) RemoveNotifications(n ...*Notification) *CustomerUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cu.RemoveNotificationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CustomerUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CustomerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CustomerUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := customer.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CustomerUpdate) check() error {
	if v, ok := cu.mutation.LastName(); ok {
		if err := customer.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Customer.last_name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.OtherName(); ok {
		if err := customer.OtherNameValidator(v); err != nil {
			return &ValidationError{Name: "other_name", err: fmt.Errorf(`ent: validator failed for field "Customer.other_name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Phone(); ok {
		if err := customer.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Customer.phone": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CustomerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.LastName(); ok {
		_spec.SetField(customer.FieldLastName, field.TypeString, value)
	}
	if value, ok := cu.mutation.OtherName(); ok {
		_spec.SetField(customer.FieldOtherName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Phone(); ok {
		_spec.SetField(customer.FieldPhone, field.TypeString, value)
	}
	if value, ok := cu.mutation.OtherPhone(); ok {
		_spec.SetField(customer.FieldOtherPhone, field.TypeString, value)
	}
	if cu.mutation.OtherPhoneCleared() {
		_spec.ClearField(customer.FieldOtherPhone, field.TypeString)
	}
	if cu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.ProfileTable,
			Columns: []string{customer.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.ProfileTable,
			Columns: []string{customer.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.BookingsTable,
			Columns: []string{customer.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.BookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.BookingsTable,
			Columns: []string{customer.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customer.NotificationsTable,
			Columns: customer.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !cu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customer.NotificationsTable,
			Columns: customer.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customer.NotificationsTable,
			Columns: customer.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CustomerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CustomerUpdateOne) SetUpdatedAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetLastName sets the "last_name" field.
func (cuo *CustomerUpdateOne) SetLastName(s string) *CustomerUpdateOne {
	cuo.mutation.SetLastName(s)
	return cuo
}

// SetOtherName sets the "other_name" field.
func (cuo *CustomerUpdateOne) SetOtherName(s string) *CustomerUpdateOne {
	cuo.mutation.SetOtherName(s)
	return cuo
}

// SetPhone sets the "phone" field.
func (cuo *CustomerUpdateOne) SetPhone(s string) *CustomerUpdateOne {
	cuo.mutation.SetPhone(s)
	return cuo
}

// SetOtherPhone sets the "other_phone" field.
func (cuo *CustomerUpdateOne) SetOtherPhone(s string) *CustomerUpdateOne {
	cuo.mutation.SetOtherPhone(s)
	return cuo
}

// SetNillableOtherPhone sets the "other_phone" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableOtherPhone(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetOtherPhone(*s)
	}
	return cuo
}

// ClearOtherPhone clears the value of the "other_phone" field.
func (cuo *CustomerUpdateOne) ClearOtherPhone() *CustomerUpdateOne {
	cuo.mutation.ClearOtherPhone()
	return cuo
}

// SetProfileID sets the "profile" edge to the User entity by ID.
func (cuo *CustomerUpdateOne) SetProfileID(id int) *CustomerUpdateOne {
	cuo.mutation.SetProfileID(id)
	return cuo
}

// SetNillableProfileID sets the "profile" edge to the User entity by ID if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableProfileID(id *int) *CustomerUpdateOne {
	if id != nil {
		cuo = cuo.SetProfileID(*id)
	}
	return cuo
}

// SetProfile sets the "profile" edge to the User entity.
func (cuo *CustomerUpdateOne) SetProfile(u *User) *CustomerUpdateOne {
	return cuo.SetProfileID(u.ID)
}

// SetBookingsID sets the "bookings" edge to the Booking entity by ID.
func (cuo *CustomerUpdateOne) SetBookingsID(id int) *CustomerUpdateOne {
	cuo.mutation.SetBookingsID(id)
	return cuo
}

// SetNillableBookingsID sets the "bookings" edge to the Booking entity by ID if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableBookingsID(id *int) *CustomerUpdateOne {
	if id != nil {
		cuo = cuo.SetBookingsID(*id)
	}
	return cuo
}

// SetBookings sets the "bookings" edge to the Booking entity.
func (cuo *CustomerUpdateOne) SetBookings(b *Booking) *CustomerUpdateOne {
	return cuo.SetBookingsID(b.ID)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (cuo *CustomerUpdateOne) AddNotificationIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddNotificationIDs(ids...)
	return cuo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (cuo *CustomerUpdateOne) AddNotifications(n ...*Notification) *CustomerUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cuo.AddNotificationIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cuo *CustomerUpdateOne) Mutation() *CustomerMutation {
	return cuo.mutation
}

// ClearProfile clears the "profile" edge to the User entity.
func (cuo *CustomerUpdateOne) ClearProfile() *CustomerUpdateOne {
	cuo.mutation.ClearProfile()
	return cuo
}

// ClearBookings clears the "bookings" edge to the Booking entity.
func (cuo *CustomerUpdateOne) ClearBookings() *CustomerUpdateOne {
	cuo.mutation.ClearBookings()
	return cuo
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (cuo *CustomerUpdateOne) ClearNotifications() *CustomerUpdateOne {
	cuo.mutation.ClearNotifications()
	return cuo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (cuo *CustomerUpdateOne) RemoveNotificationIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveNotificationIDs(ids...)
	return cuo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (cuo *CustomerUpdateOne) RemoveNotifications(n ...*Notification) *CustomerUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cuo.RemoveNotificationIDs(ids...)
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cuo *CustomerUpdateOne) Where(ps ...predicate.Customer) *CustomerUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Customer entity.
func (cuo *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CustomerUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := customer.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CustomerUpdateOne) check() error {
	if v, ok := cuo.mutation.LastName(); ok {
		if err := customer.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Customer.last_name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.OtherName(); ok {
		if err := customer.OtherNameValidator(v); err != nil {
			return &ValidationError{Name: "other_name", err: fmt.Errorf(`ent: validator failed for field "Customer.other_name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Phone(); ok {
		if err := customer.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Customer.phone": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CustomerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Customer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.LastName(); ok {
		_spec.SetField(customer.FieldLastName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.OtherName(); ok {
		_spec.SetField(customer.FieldOtherName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Phone(); ok {
		_spec.SetField(customer.FieldPhone, field.TypeString, value)
	}
	if value, ok := cuo.mutation.OtherPhone(); ok {
		_spec.SetField(customer.FieldOtherPhone, field.TypeString, value)
	}
	if cuo.mutation.OtherPhoneCleared() {
		_spec.ClearField(customer.FieldOtherPhone, field.TypeString)
	}
	if cuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.ProfileTable,
			Columns: []string{customer.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.ProfileTable,
			Columns: []string{customer.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.BookingsTable,
			Columns: []string{customer.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.BookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.BookingsTable,
			Columns: []string{customer.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customer.NotificationsTable,
			Columns: customer.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !cuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customer.NotificationsTable,
			Columns: customer.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customer.NotificationsTable,
			Columns: customer.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Customer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
