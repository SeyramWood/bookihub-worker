// Code generated by ent, DO NOT EDIT.

package parcelimage

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the parcelimage type in the database.
	Label = "parcel_image"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// EdgeParcel holds the string denoting the parcel edge name in mutations.
	EdgeParcel = "parcel"
	// Table holds the table name of the parcelimage in the database.
	Table = "parcel_images"
	// ParcelTable is the table that holds the parcel relation/edge.
	ParcelTable = "parcel_images"
	// ParcelInverseTable is the table name for the Parcel entity.
	// It exists in this package in order to avoid circular dependency with the "parcel" package.
	ParcelInverseTable = "parcels"
	// ParcelColumn is the table column denoting the parcel relation/edge.
	ParcelColumn = "parcel_images"
)

// Columns holds all SQL columns for parcelimage fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldImage,
	FieldKind,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "parcel_images"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"parcel_images",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Kind defines the type for the "kind" enum field.
type Kind string

// KindParcel is the default value of the Kind enum.
const DefaultKind = KindParcel

// Kind values.
const (
	KindParcel    Kind = "parcel"
	KindRecipient Kind = "recipient"
)

func (k Kind) String() string {
	return string(k)
}

// KindValidator is a validator for the "kind" field enum values. It is called by the builders before save.
func KindValidator(k Kind) error {
	switch k {
	case KindParcel, KindRecipient:
		return nil
	default:
		return fmt.Errorf("parcelimage: invalid enum value for kind field: %q", k)
	}
}

// OrderOption defines the ordering options for the ParcelImage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByImage orders the results by the image field.
func ByImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByParcelField orders the results by parcel field.
func ByParcelField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParcelStep(), sql.OrderByField(field, opts...))
	}
}
func newParcelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParcelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParcelTable, ParcelColumn),
	)
}
