// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/ent/incident"
	"github.com/SeyramWood/ent/incidentimage"
)

// IncidentImage is the model entity for the IncidentImage schema.
type IncidentImage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IncidentImageQuery when eager-loading is set.
	Edges           IncidentImageEdges `json:"edges"`
	incident_images *int
	selectValues    sql.SelectValues
}

// IncidentImageEdges holds the relations/edges for other nodes in the graph.
type IncidentImageEdges struct {
	// Incident holds the value of the incident edge.
	Incident *Incident `json:"incident,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// IncidentOrErr returns the Incident value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentImageEdges) IncidentOrErr() (*Incident, error) {
	if e.loadedTypes[0] {
		if e.Incident == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: incident.Label}
		}
		return e.Incident, nil
	}
	return nil, &NotLoadedError{edge: "incident"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IncidentImage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case incidentimage.FieldID:
			values[i] = new(sql.NullInt64)
		case incidentimage.FieldImage:
			values[i] = new(sql.NullString)
		case incidentimage.FieldCreatedAt, incidentimage.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case incidentimage.ForeignKeys[0]: // incident_images
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IncidentImage fields.
func (ii *IncidentImage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case incidentimage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ii.ID = int(value.Int64)
		case incidentimage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ii.CreatedAt = value.Time
			}
		case incidentimage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ii.UpdatedAt = value.Time
			}
		case incidentimage.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				ii.Image = value.String
			}
		case incidentimage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field incident_images", value)
			} else if value.Valid {
				ii.incident_images = new(int)
				*ii.incident_images = int(value.Int64)
			}
		default:
			ii.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IncidentImage.
// This includes values selected through modifiers, order, etc.
func (ii *IncidentImage) Value(name string) (ent.Value, error) {
	return ii.selectValues.Get(name)
}

// QueryIncident queries the "incident" edge of the IncidentImage entity.
func (ii *IncidentImage) QueryIncident() *IncidentQuery {
	return NewIncidentImageClient(ii.config).QueryIncident(ii)
}

// Update returns a builder for updating this IncidentImage.
// Note that you need to call IncidentImage.Unwrap() before calling this method if this IncidentImage
// was returned from a transaction, and the transaction was committed or rolled back.
func (ii *IncidentImage) Update() *IncidentImageUpdateOne {
	return NewIncidentImageClient(ii.config).UpdateOne(ii)
}

// Unwrap unwraps the IncidentImage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ii *IncidentImage) Unwrap() *IncidentImage {
	_tx, ok := ii.config.driver.(*txDriver)
	if !ok {
		panic("ent: IncidentImage is not a transactional entity")
	}
	ii.config.driver = _tx.drv
	return ii
}

// String implements the fmt.Stringer.
func (ii *IncidentImage) String() string {
	var builder strings.Builder
	builder.WriteString("IncidentImage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ii.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ii.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ii.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(ii.Image)
	builder.WriteByte(')')
	return builder.String()
}

// IncidentImages is a parsable slice of IncidentImage.
type IncidentImages []*IncidentImage
