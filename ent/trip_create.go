// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/bookibus/ent/booking"
	"github.com/SeyramWood/bookibus/ent/company"
	"github.com/SeyramWood/bookibus/ent/companyuser"
	"github.com/SeyramWood/bookibus/ent/incident"
	"github.com/SeyramWood/bookibus/ent/parcel"
	"github.com/SeyramWood/bookibus/ent/route"
	"github.com/SeyramWood/bookibus/ent/terminal"
	"github.com/SeyramWood/bookibus/ent/trip"
	"github.com/SeyramWood/bookibus/ent/vehicle"
)

// TripCreate is the builder for creating a Trip entity.
type TripCreate struct {
	config
	mutation *TripMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tc *TripCreate) SetCreatedAt(t time.Time) *TripCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TripCreate) SetNillableCreatedAt(t *time.Time) *TripCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TripCreate) SetUpdatedAt(t time.Time) *TripCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TripCreate) SetNillableUpdatedAt(t *time.Time) *TripCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetDepartureDate sets the "departure_date" field.
func (tc *TripCreate) SetDepartureDate(t time.Time) *TripCreate {
	tc.mutation.SetDepartureDate(t)
	return tc
}

// SetNillableDepartureDate sets the "departure_date" field if the given value is not nil.
func (tc *TripCreate) SetNillableDepartureDate(t *time.Time) *TripCreate {
	if t != nil {
		tc.SetDepartureDate(*t)
	}
	return tc
}

// SetArrivalDate sets the "arrival_date" field.
func (tc *TripCreate) SetArrivalDate(t time.Time) *TripCreate {
	tc.mutation.SetArrivalDate(t)
	return tc
}

// SetNillableArrivalDate sets the "arrival_date" field if the given value is not nil.
func (tc *TripCreate) SetNillableArrivalDate(t *time.Time) *TripCreate {
	if t != nil {
		tc.SetArrivalDate(*t)
	}
	return tc
}

// SetReturnDate sets the "return_date" field.
func (tc *TripCreate) SetReturnDate(t time.Time) *TripCreate {
	tc.mutation.SetReturnDate(t)
	return tc
}

// SetNillableReturnDate sets the "return_date" field if the given value is not nil.
func (tc *TripCreate) SetNillableReturnDate(t *time.Time) *TripCreate {
	if t != nil {
		tc.SetReturnDate(*t)
	}
	return tc
}

// SetType sets the "type" field.
func (tc *TripCreate) SetType(t trip.Type) *TripCreate {
	tc.mutation.SetType(t)
	return tc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tc *TripCreate) SetNillableType(t *trip.Type) *TripCreate {
	if t != nil {
		tc.SetType(*t)
	}
	return tc
}

// SetExteriorInspected sets the "exterior_inspected" field.
func (tc *TripCreate) SetExteriorInspected(b bool) *TripCreate {
	tc.mutation.SetExteriorInspected(b)
	return tc
}

// SetNillableExteriorInspected sets the "exterior_inspected" field if the given value is not nil.
func (tc *TripCreate) SetNillableExteriorInspected(b *bool) *TripCreate {
	if b != nil {
		tc.SetExteriorInspected(*b)
	}
	return tc
}

// SetInteriorInspected sets the "interior_inspected" field.
func (tc *TripCreate) SetInteriorInspected(b bool) *TripCreate {
	tc.mutation.SetInteriorInspected(b)
	return tc
}

// SetNillableInteriorInspected sets the "interior_inspected" field if the given value is not nil.
func (tc *TripCreate) SetNillableInteriorInspected(b *bool) *TripCreate {
	if b != nil {
		tc.SetInteriorInspected(*b)
	}
	return tc
}

// SetEngineCompartmentInspected sets the "engine_compartment_inspected" field.
func (tc *TripCreate) SetEngineCompartmentInspected(b bool) *TripCreate {
	tc.mutation.SetEngineCompartmentInspected(b)
	return tc
}

// SetNillableEngineCompartmentInspected sets the "engine_compartment_inspected" field if the given value is not nil.
func (tc *TripCreate) SetNillableEngineCompartmentInspected(b *bool) *TripCreate {
	if b != nil {
		tc.SetEngineCompartmentInspected(*b)
	}
	return tc
}

// SetBrakeAndSteeringInspected sets the "brake_and_steering_inspected" field.
func (tc *TripCreate) SetBrakeAndSteeringInspected(b bool) *TripCreate {
	tc.mutation.SetBrakeAndSteeringInspected(b)
	return tc
}

// SetNillableBrakeAndSteeringInspected sets the "brake_and_steering_inspected" field if the given value is not nil.
func (tc *TripCreate) SetNillableBrakeAndSteeringInspected(b *bool) *TripCreate {
	if b != nil {
		tc.SetBrakeAndSteeringInspected(*b)
	}
	return tc
}

// SetEmergencyEquipmentInspected sets the "emergency_equipment_inspected" field.
func (tc *TripCreate) SetEmergencyEquipmentInspected(b bool) *TripCreate {
	tc.mutation.SetEmergencyEquipmentInspected(b)
	return tc
}

// SetNillableEmergencyEquipmentInspected sets the "emergency_equipment_inspected" field if the given value is not nil.
func (tc *TripCreate) SetNillableEmergencyEquipmentInspected(b *bool) *TripCreate {
	if b != nil {
		tc.SetEmergencyEquipmentInspected(*b)
	}
	return tc
}

// SetFuelAndFluidsInspected sets the "fuel_and_fluids_inspected" field.
func (tc *TripCreate) SetFuelAndFluidsInspected(b bool) *TripCreate {
	tc.mutation.SetFuelAndFluidsInspected(b)
	return tc
}

// SetNillableFuelAndFluidsInspected sets the "fuel_and_fluids_inspected" field if the given value is not nil.
func (tc *TripCreate) SetNillableFuelAndFluidsInspected(b *bool) *TripCreate {
	if b != nil {
		tc.SetFuelAndFluidsInspected(*b)
	}
	return tc
}

// SetScheduled sets the "scheduled" field.
func (tc *TripCreate) SetScheduled(b bool) *TripCreate {
	tc.mutation.SetScheduled(b)
	return tc
}

// SetNillableScheduled sets the "scheduled" field if the given value is not nil.
func (tc *TripCreate) SetNillableScheduled(b *bool) *TripCreate {
	if b != nil {
		tc.SetScheduled(*b)
	}
	return tc
}

// SetSeatLeft sets the "seat_left" field.
func (tc *TripCreate) SetSeatLeft(i int) *TripCreate {
	tc.mutation.SetSeatLeft(i)
	return tc
}

// SetNillableSeatLeft sets the "seat_left" field if the given value is not nil.
func (tc *TripCreate) SetNillableSeatLeft(i *int) *TripCreate {
	if i != nil {
		tc.SetSeatLeft(*i)
	}
	return tc
}

// SetRate sets the "rate" field.
func (tc *TripCreate) SetRate(f float64) *TripCreate {
	tc.mutation.SetRate(f)
	return tc
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (tc *TripCreate) SetNillableRate(f *float64) *TripCreate {
	if f != nil {
		tc.SetRate(*f)
	}
	return tc
}

// SetDiscount sets the "discount" field.
func (tc *TripCreate) SetDiscount(f float32) *TripCreate {
	tc.mutation.SetDiscount(f)
	return tc
}

// SetNillableDiscount sets the "discount" field if the given value is not nil.
func (tc *TripCreate) SetNillableDiscount(f *float32) *TripCreate {
	if f != nil {
		tc.SetDiscount(*f)
	}
	return tc
}

// SetStatus sets the "status" field.
func (tc *TripCreate) SetStatus(t trip.Status) *TripCreate {
	tc.mutation.SetStatus(t)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TripCreate) SetNillableStatus(t *trip.Status) *TripCreate {
	if t != nil {
		tc.SetStatus(*t)
	}
	return tc
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (tc *TripCreate) SetCompanyID(id int) *TripCreate {
	tc.mutation.SetCompanyID(id)
	return tc
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (tc *TripCreate) SetNillableCompanyID(id *int) *TripCreate {
	if id != nil {
		tc = tc.SetCompanyID(*id)
	}
	return tc
}

// SetCompany sets the "company" edge to the Company entity.
func (tc *TripCreate) SetCompany(c *Company) *TripCreate {
	return tc.SetCompanyID(c.ID)
}

// SetDriverID sets the "driver" edge to the CompanyUser entity by ID.
func (tc *TripCreate) SetDriverID(id int) *TripCreate {
	tc.mutation.SetDriverID(id)
	return tc
}

// SetNillableDriverID sets the "driver" edge to the CompanyUser entity by ID if the given value is not nil.
func (tc *TripCreate) SetNillableDriverID(id *int) *TripCreate {
	if id != nil {
		tc = tc.SetDriverID(*id)
	}
	return tc
}

// SetDriver sets the "driver" edge to the CompanyUser entity.
func (tc *TripCreate) SetDriver(c *CompanyUser) *TripCreate {
	return tc.SetDriverID(c.ID)
}

// SetFromTerminalID sets the "from_terminal" edge to the Terminal entity by ID.
func (tc *TripCreate) SetFromTerminalID(id int) *TripCreate {
	tc.mutation.SetFromTerminalID(id)
	return tc
}

// SetNillableFromTerminalID sets the "from_terminal" edge to the Terminal entity by ID if the given value is not nil.
func (tc *TripCreate) SetNillableFromTerminalID(id *int) *TripCreate {
	if id != nil {
		tc = tc.SetFromTerminalID(*id)
	}
	return tc
}

// SetFromTerminal sets the "from_terminal" edge to the Terminal entity.
func (tc *TripCreate) SetFromTerminal(t *Terminal) *TripCreate {
	return tc.SetFromTerminalID(t.ID)
}

// SetToTerminalID sets the "to_terminal" edge to the Terminal entity by ID.
func (tc *TripCreate) SetToTerminalID(id int) *TripCreate {
	tc.mutation.SetToTerminalID(id)
	return tc
}

// SetNillableToTerminalID sets the "to_terminal" edge to the Terminal entity by ID if the given value is not nil.
func (tc *TripCreate) SetNillableToTerminalID(id *int) *TripCreate {
	if id != nil {
		tc = tc.SetToTerminalID(*id)
	}
	return tc
}

// SetToTerminal sets the "to_terminal" edge to the Terminal entity.
func (tc *TripCreate) SetToTerminal(t *Terminal) *TripCreate {
	return tc.SetToTerminalID(t.ID)
}

// SetVehicleID sets the "vehicle" edge to the Vehicle entity by ID.
func (tc *TripCreate) SetVehicleID(id int) *TripCreate {
	tc.mutation.SetVehicleID(id)
	return tc
}

// SetNillableVehicleID sets the "vehicle" edge to the Vehicle entity by ID if the given value is not nil.
func (tc *TripCreate) SetNillableVehicleID(id *int) *TripCreate {
	if id != nil {
		tc = tc.SetVehicleID(*id)
	}
	return tc
}

// SetVehicle sets the "vehicle" edge to the Vehicle entity.
func (tc *TripCreate) SetVehicle(v *Vehicle) *TripCreate {
	return tc.SetVehicleID(v.ID)
}

// SetRouteID sets the "route" edge to the Route entity by ID.
func (tc *TripCreate) SetRouteID(id int) *TripCreate {
	tc.mutation.SetRouteID(id)
	return tc
}

// SetNillableRouteID sets the "route" edge to the Route entity by ID if the given value is not nil.
func (tc *TripCreate) SetNillableRouteID(id *int) *TripCreate {
	if id != nil {
		tc = tc.SetRouteID(*id)
	}
	return tc
}

// SetRoute sets the "route" edge to the Route entity.
func (tc *TripCreate) SetRoute(r *Route) *TripCreate {
	return tc.SetRouteID(r.ID)
}

// AddBookingIDs adds the "bookings" edge to the Booking entity by IDs.
func (tc *TripCreate) AddBookingIDs(ids ...int) *TripCreate {
	tc.mutation.AddBookingIDs(ids...)
	return tc
}

// AddBookings adds the "bookings" edges to the Booking entity.
func (tc *TripCreate) AddBookings(b ...*Booking) *TripCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tc.AddBookingIDs(ids...)
}

// AddIncidentIDs adds the "incidents" edge to the Incident entity by IDs.
func (tc *TripCreate) AddIncidentIDs(ids ...int) *TripCreate {
	tc.mutation.AddIncidentIDs(ids...)
	return tc
}

// AddIncidents adds the "incidents" edges to the Incident entity.
func (tc *TripCreate) AddIncidents(i ...*Incident) *TripCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tc.AddIncidentIDs(ids...)
}

// AddParcelIDs adds the "parcels" edge to the Parcel entity by IDs.
func (tc *TripCreate) AddParcelIDs(ids ...int) *TripCreate {
	tc.mutation.AddParcelIDs(ids...)
	return tc
}

// AddParcels adds the "parcels" edges to the Parcel entity.
func (tc *TripCreate) AddParcels(p ...*Parcel) *TripCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tc.AddParcelIDs(ids...)
}

// Mutation returns the TripMutation object of the builder.
func (tc *TripCreate) Mutation() *TripMutation {
	return tc.mutation
}

// Save creates the Trip in the database.
func (tc *TripCreate) Save(ctx context.Context) (*Trip, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TripCreate) SaveX(ctx context.Context) *Trip {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TripCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TripCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TripCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := trip.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := trip.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.GetType(); !ok {
		v := trip.DefaultType
		tc.mutation.SetType(v)
	}
	if _, ok := tc.mutation.ExteriorInspected(); !ok {
		v := trip.DefaultExteriorInspected
		tc.mutation.SetExteriorInspected(v)
	}
	if _, ok := tc.mutation.InteriorInspected(); !ok {
		v := trip.DefaultInteriorInspected
		tc.mutation.SetInteriorInspected(v)
	}
	if _, ok := tc.mutation.EngineCompartmentInspected(); !ok {
		v := trip.DefaultEngineCompartmentInspected
		tc.mutation.SetEngineCompartmentInspected(v)
	}
	if _, ok := tc.mutation.BrakeAndSteeringInspected(); !ok {
		v := trip.DefaultBrakeAndSteeringInspected
		tc.mutation.SetBrakeAndSteeringInspected(v)
	}
	if _, ok := tc.mutation.EmergencyEquipmentInspected(); !ok {
		v := trip.DefaultEmergencyEquipmentInspected
		tc.mutation.SetEmergencyEquipmentInspected(v)
	}
	if _, ok := tc.mutation.FuelAndFluidsInspected(); !ok {
		v := trip.DefaultFuelAndFluidsInspected
		tc.mutation.SetFuelAndFluidsInspected(v)
	}
	if _, ok := tc.mutation.Scheduled(); !ok {
		v := trip.DefaultScheduled
		tc.mutation.SetScheduled(v)
	}
	if _, ok := tc.mutation.SeatLeft(); !ok {
		v := trip.DefaultSeatLeft
		tc.mutation.SetSeatLeft(v)
	}
	if _, ok := tc.mutation.Rate(); !ok {
		v := trip.DefaultRate
		tc.mutation.SetRate(v)
	}
	if _, ok := tc.mutation.Discount(); !ok {
		v := trip.DefaultDiscount
		tc.mutation.SetDiscount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TripCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Trip.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Trip.updated_at"`)}
	}
	if _, ok := tc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Trip.type"`)}
	}
	if v, ok := tc.mutation.GetType(); ok {
		if err := trip.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Trip.type": %w`, err)}
		}
	}
	if _, ok := tc.mutation.ExteriorInspected(); !ok {
		return &ValidationError{Name: "exterior_inspected", err: errors.New(`ent: missing required field "Trip.exterior_inspected"`)}
	}
	if _, ok := tc.mutation.InteriorInspected(); !ok {
		return &ValidationError{Name: "interior_inspected", err: errors.New(`ent: missing required field "Trip.interior_inspected"`)}
	}
	if _, ok := tc.mutation.EngineCompartmentInspected(); !ok {
		return &ValidationError{Name: "engine_compartment_inspected", err: errors.New(`ent: missing required field "Trip.engine_compartment_inspected"`)}
	}
	if _, ok := tc.mutation.BrakeAndSteeringInspected(); !ok {
		return &ValidationError{Name: "brake_and_steering_inspected", err: errors.New(`ent: missing required field "Trip.brake_and_steering_inspected"`)}
	}
	if _, ok := tc.mutation.EmergencyEquipmentInspected(); !ok {
		return &ValidationError{Name: "emergency_equipment_inspected", err: errors.New(`ent: missing required field "Trip.emergency_equipment_inspected"`)}
	}
	if _, ok := tc.mutation.FuelAndFluidsInspected(); !ok {
		return &ValidationError{Name: "fuel_and_fluids_inspected", err: errors.New(`ent: missing required field "Trip.fuel_and_fluids_inspected"`)}
	}
	if _, ok := tc.mutation.Scheduled(); !ok {
		return &ValidationError{Name: "scheduled", err: errors.New(`ent: missing required field "Trip.scheduled"`)}
	}
	if _, ok := tc.mutation.SeatLeft(); !ok {
		return &ValidationError{Name: "seat_left", err: errors.New(`ent: missing required field "Trip.seat_left"`)}
	}
	if _, ok := tc.mutation.Rate(); !ok {
		return &ValidationError{Name: "rate", err: errors.New(`ent: missing required field "Trip.rate"`)}
	}
	if _, ok := tc.mutation.Discount(); !ok {
		return &ValidationError{Name: "discount", err: errors.New(`ent: missing required field "Trip.discount"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := trip.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Trip.status": %w`, err)}
		}
	}
	return nil
}

func (tc *TripCreate) sqlSave(ctx context.Context) (*Trip, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TripCreate) createSpec() (*Trip, *sqlgraph.CreateSpec) {
	var (
		_node = &Trip{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(trip.Table, sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(trip.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(trip.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.DepartureDate(); ok {
		_spec.SetField(trip.FieldDepartureDate, field.TypeTime, value)
		_node.DepartureDate = value
	}
	if value, ok := tc.mutation.ArrivalDate(); ok {
		_spec.SetField(trip.FieldArrivalDate, field.TypeTime, value)
		_node.ArrivalDate = value
	}
	if value, ok := tc.mutation.ReturnDate(); ok {
		_spec.SetField(trip.FieldReturnDate, field.TypeTime, value)
		_node.ReturnDate = value
	}
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(trip.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := tc.mutation.ExteriorInspected(); ok {
		_spec.SetField(trip.FieldExteriorInspected, field.TypeBool, value)
		_node.ExteriorInspected = value
	}
	if value, ok := tc.mutation.InteriorInspected(); ok {
		_spec.SetField(trip.FieldInteriorInspected, field.TypeBool, value)
		_node.InteriorInspected = value
	}
	if value, ok := tc.mutation.EngineCompartmentInspected(); ok {
		_spec.SetField(trip.FieldEngineCompartmentInspected, field.TypeBool, value)
		_node.EngineCompartmentInspected = value
	}
	if value, ok := tc.mutation.BrakeAndSteeringInspected(); ok {
		_spec.SetField(trip.FieldBrakeAndSteeringInspected, field.TypeBool, value)
		_node.BrakeAndSteeringInspected = value
	}
	if value, ok := tc.mutation.EmergencyEquipmentInspected(); ok {
		_spec.SetField(trip.FieldEmergencyEquipmentInspected, field.TypeBool, value)
		_node.EmergencyEquipmentInspected = value
	}
	if value, ok := tc.mutation.FuelAndFluidsInspected(); ok {
		_spec.SetField(trip.FieldFuelAndFluidsInspected, field.TypeBool, value)
		_node.FuelAndFluidsInspected = value
	}
	if value, ok := tc.mutation.Scheduled(); ok {
		_spec.SetField(trip.FieldScheduled, field.TypeBool, value)
		_node.Scheduled = value
	}
	if value, ok := tc.mutation.SeatLeft(); ok {
		_spec.SetField(trip.FieldSeatLeft, field.TypeInt, value)
		_node.SeatLeft = value
	}
	if value, ok := tc.mutation.Rate(); ok {
		_spec.SetField(trip.FieldRate, field.TypeFloat64, value)
		_node.Rate = value
	}
	if value, ok := tc.mutation.Discount(); ok {
		_spec.SetField(trip.FieldDiscount, field.TypeFloat32, value)
		_node.Discount = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(trip.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := tc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.CompanyTable,
			Columns: []string{trip.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_trips = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.DriverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.DriverTable,
			Columns: []string{trip.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_user_trips = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.FromTerminalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.FromTerminalTable,
			Columns: []string{trip.FromTerminalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(terminal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.terminal_from = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ToTerminalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.ToTerminalTable,
			Columns: []string{trip.ToTerminalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(terminal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.terminal_to = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.VehicleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.VehicleTable,
			Columns: []string{trip.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vehicle_trips = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.RouteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.RouteTable,
			Columns: []string{trip.RouteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(route.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.route_trips = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.BookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.BookingsTable,
			Columns: []string{trip.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.IncidentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.IncidentsTable,
			Columns: []string{trip.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ParcelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.ParcelsTable,
			Columns: []string{trip.ParcelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TripCreateBulk is the builder for creating many Trip entities in bulk.
type TripCreateBulk struct {
	config
	err      error
	builders []*TripCreate
}

// Save creates the Trip entities in the database.
func (tcb *TripCreateBulk) Save(ctx context.Context) ([]*Trip, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Trip, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TripMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TripCreateBulk) SaveX(ctx context.Context) []*Trip {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TripCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TripCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
