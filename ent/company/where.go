// Code generated by ent, DO NOT EDIT.

package company

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/SeyramWood/bookibus/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldName, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldPhone, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldEmail, v))
}

// Certificate applies equality check predicate on the "certificate" field. It's identical to CertificateEQ.
func Certificate(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldCertificate, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldName, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldPhone, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldEmail, v))
}

// CertificateEQ applies the EQ predicate on the "certificate" field.
func CertificateEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldCertificate, v))
}

// CertificateNEQ applies the NEQ predicate on the "certificate" field.
func CertificateNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldCertificate, v))
}

// CertificateIn applies the In predicate on the "certificate" field.
func CertificateIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldCertificate, vs...))
}

// CertificateNotIn applies the NotIn predicate on the "certificate" field.
func CertificateNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldCertificate, vs...))
}

// CertificateGT applies the GT predicate on the "certificate" field.
func CertificateGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldCertificate, v))
}

// CertificateGTE applies the GTE predicate on the "certificate" field.
func CertificateGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldCertificate, v))
}

// CertificateLT applies the LT predicate on the "certificate" field.
func CertificateLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldCertificate, v))
}

// CertificateLTE applies the LTE predicate on the "certificate" field.
func CertificateLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldCertificate, v))
}

// CertificateContains applies the Contains predicate on the "certificate" field.
func CertificateContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldCertificate, v))
}

// CertificateHasPrefix applies the HasPrefix predicate on the "certificate" field.
func CertificateHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldCertificate, v))
}

// CertificateHasSuffix applies the HasSuffix predicate on the "certificate" field.
func CertificateHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldCertificate, v))
}

// CertificateIsNil applies the IsNil predicate on the "certificate" field.
func CertificateIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldCertificate))
}

// CertificateNotNil applies the NotNil predicate on the "certificate" field.
func CertificateNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldCertificate))
}

// CertificateEqualFold applies the EqualFold predicate on the "certificate" field.
func CertificateEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldCertificate, v))
}

// CertificateContainsFold applies the ContainsFold predicate on the "certificate" field.
func CertificateContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldCertificate, v))
}

// BankAccountIsNil applies the IsNil predicate on the "bank_account" field.
func BankAccountIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldBankAccount))
}

// BankAccountNotNil applies the NotNil predicate on the "bank_account" field.
func BankAccountNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldBankAccount))
}

// ContactPersonIsNil applies the IsNil predicate on the "contact_person" field.
func ContactPersonIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldContactPerson))
}

// ContactPersonNotNil applies the NotNil predicate on the "contact_person" field.
func ContactPersonNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldContactPerson))
}

// OnboardingStatusEQ applies the EQ predicate on the "onboarding_status" field.
func OnboardingStatusEQ(v OnboardingStatus) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldOnboardingStatus, v))
}

// OnboardingStatusNEQ applies the NEQ predicate on the "onboarding_status" field.
func OnboardingStatusNEQ(v OnboardingStatus) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldOnboardingStatus, v))
}

// OnboardingStatusIn applies the In predicate on the "onboarding_status" field.
func OnboardingStatusIn(vs ...OnboardingStatus) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldOnboardingStatus, vs...))
}

// OnboardingStatusNotIn applies the NotIn predicate on the "onboarding_status" field.
func OnboardingStatusNotIn(vs ...OnboardingStatus) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldOnboardingStatus, vs...))
}

// HasProfile applies the HasEdge predicate on the "profile" edge.
func HasProfile() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProfileTable, ProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.CompanyUser) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTerminals applies the HasEdge predicate on the "terminals" edge.
func HasTerminals() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TerminalsTable, TerminalsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTerminalsWith applies the HasEdge predicate on the "terminals" edge with a given conditions (other predicates).
func HasTerminalsWith(preds ...predicate.Terminal) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newTerminalsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVehicles applies the HasEdge predicate on the "vehicles" edge.
func HasVehicles() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VehiclesTable, VehiclesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVehiclesWith applies the HasEdge predicate on the "vehicles" edge with a given conditions (other predicates).
func HasVehiclesWith(preds ...predicate.Vehicle) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newVehiclesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoutes applies the HasEdge predicate on the "routes" edge.
func HasRoutes() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RoutesTable, RoutesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoutesWith applies the HasEdge predicate on the "routes" edge with a given conditions (other predicates).
func HasRoutesWith(preds ...predicate.Route) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newRoutesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTrips applies the HasEdge predicate on the "trips" edge.
func HasTrips() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TripsTable, TripsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTripsWith applies the HasEdge predicate on the "trips" edge with a given conditions (other predicates).
func HasTripsWith(preds ...predicate.Trip) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newTripsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBookings applies the HasEdge predicate on the "bookings" edge.
func HasBookings() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BookingsTable, BookingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBookingsWith applies the HasEdge predicate on the "bookings" edge with a given conditions (other predicates).
func HasBookingsWith(preds ...predicate.Booking) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newBookingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIncidents applies the HasEdge predicate on the "incidents" edge.
func HasIncidents() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IncidentsTable, IncidentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncidentsWith applies the HasEdge predicate on the "incidents" edge with a given conditions (other predicates).
func HasIncidentsWith(preds ...predicate.Incident) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newIncidentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParcels applies the HasEdge predicate on the "parcels" edge.
func HasParcels() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ParcelsTable, ParcelsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParcelsWith applies the HasEdge predicate on the "parcels" edge with a given conditions (other predicates).
func HasParcelsWith(preds ...predicate.Parcel) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newParcelsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTransactions applies the HasEdge predicate on the "transactions" edge.
func HasTransactions() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TransactionsTable, TransactionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransactionsWith applies the HasEdge predicate on the "transactions" edge with a given conditions (other predicates).
func HasTransactionsWith(preds ...predicate.Transaction) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newTransactionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotifications applies the HasEdge predicate on the "notifications" edge.
func HasNotifications() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotificationsTable, NotificationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationsWith applies the HasEdge predicate on the "notifications" edge with a given conditions (other predicates).
func HasNotificationsWith(preds ...predicate.Notification) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newNotificationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Company) predicate.Company {
	return predicate.Company(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Company) predicate.Company {
	return predicate.Company(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Company) predicate.Company {
	return predicate.Company(sql.NotPredicates(p))
}
