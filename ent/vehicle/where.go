// Code generated by ent, DO NOT EDIT.

package vehicle

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/SeyramWood/bookibus/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldUpdatedAt, v))
}

// RegistrationNumber applies equality check predicate on the "registration_number" field. It's identical to RegistrationNumberEQ.
func RegistrationNumber(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldRegistrationNumber, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldModel, v))
}

// Seat applies equality check predicate on the "seat" field. It's identical to SeatEQ.
func Seat(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldSeat, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldUpdatedAt, v))
}

// RegistrationNumberEQ applies the EQ predicate on the "registration_number" field.
func RegistrationNumberEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldRegistrationNumber, v))
}

// RegistrationNumberNEQ applies the NEQ predicate on the "registration_number" field.
func RegistrationNumberNEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldRegistrationNumber, v))
}

// RegistrationNumberIn applies the In predicate on the "registration_number" field.
func RegistrationNumberIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldRegistrationNumber, vs...))
}

// RegistrationNumberNotIn applies the NotIn predicate on the "registration_number" field.
func RegistrationNumberNotIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldRegistrationNumber, vs...))
}

// RegistrationNumberGT applies the GT predicate on the "registration_number" field.
func RegistrationNumberGT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldRegistrationNumber, v))
}

// RegistrationNumberGTE applies the GTE predicate on the "registration_number" field.
func RegistrationNumberGTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldRegistrationNumber, v))
}

// RegistrationNumberLT applies the LT predicate on the "registration_number" field.
func RegistrationNumberLT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldRegistrationNumber, v))
}

// RegistrationNumberLTE applies the LTE predicate on the "registration_number" field.
func RegistrationNumberLTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldRegistrationNumber, v))
}

// RegistrationNumberContains applies the Contains predicate on the "registration_number" field.
func RegistrationNumberContains(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContains(FieldRegistrationNumber, v))
}

// RegistrationNumberHasPrefix applies the HasPrefix predicate on the "registration_number" field.
func RegistrationNumberHasPrefix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasPrefix(FieldRegistrationNumber, v))
}

// RegistrationNumberHasSuffix applies the HasSuffix predicate on the "registration_number" field.
func RegistrationNumberHasSuffix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasSuffix(FieldRegistrationNumber, v))
}

// RegistrationNumberEqualFold applies the EqualFold predicate on the "registration_number" field.
func RegistrationNumberEqualFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEqualFold(FieldRegistrationNumber, v))
}

// RegistrationNumberContainsFold applies the ContainsFold predicate on the "registration_number" field.
func RegistrationNumberContainsFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContainsFold(FieldRegistrationNumber, v))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasSuffix(FieldModel, v))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContainsFold(FieldModel, v))
}

// SeatEQ applies the EQ predicate on the "seat" field.
func SeatEQ(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldSeat, v))
}

// SeatNEQ applies the NEQ predicate on the "seat" field.
func SeatNEQ(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldSeat, v))
}

// SeatIn applies the In predicate on the "seat" field.
func SeatIn(vs ...int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldSeat, vs...))
}

// SeatNotIn applies the NotIn predicate on the "seat" field.
func SeatNotIn(vs ...int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldSeat, vs...))
}

// SeatGT applies the GT predicate on the "seat" field.
func SeatGT(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldSeat, v))
}

// SeatGTE applies the GTE predicate on the "seat" field.
func SeatGTE(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldSeat, v))
}

// SeatLT applies the LT predicate on the "seat" field.
func SeatLT(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldSeat, v))
}

// SeatLTE applies the LTE predicate on the "seat" field.
func SeatLTE(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldSeat, v))
}

// HasCompany applies the HasEdge predicate on the "company" edge.
func HasCompany() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyWith applies the HasEdge predicate on the "company" edge with a given conditions (other predicates).
func HasCompanyWith(preds ...predicate.Company) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := newCompanyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasImages applies the HasEdge predicate on the "images" edge.
func HasImages() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ImagesTable, ImagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImagesWith applies the HasEdge predicate on the "images" edge with a given conditions (other predicates).
func HasImagesWith(preds ...predicate.VehicleImage) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := newImagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTrips applies the HasEdge predicate on the "trips" edge.
func HasTrips() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TripsTable, TripsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTripsWith applies the HasEdge predicate on the "trips" edge with a given conditions (other predicates).
func HasTripsWith(preds ...predicate.Trip) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := newTripsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(sql.NotPredicates(p))
}
