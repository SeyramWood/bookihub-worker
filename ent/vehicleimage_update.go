// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/bookibus/ent/predicate"
	"github.com/SeyramWood/bookibus/ent/vehicle"
	"github.com/SeyramWood/bookibus/ent/vehicleimage"
)

// VehicleImageUpdate is the builder for updating VehicleImage entities.
type VehicleImageUpdate struct {
	config
	hooks     []Hook
	mutation  *VehicleImageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the VehicleImageUpdate builder.
func (viu *VehicleImageUpdate) Where(ps ...predicate.VehicleImage) *VehicleImageUpdate {
	viu.mutation.Where(ps...)
	return viu
}

// SetUpdatedAt sets the "updated_at" field.
func (viu *VehicleImageUpdate) SetUpdatedAt(t time.Time) *VehicleImageUpdate {
	viu.mutation.SetUpdatedAt(t)
	return viu
}

// SetImage sets the "image" field.
func (viu *VehicleImageUpdate) SetImage(s string) *VehicleImageUpdate {
	viu.mutation.SetImage(s)
	return viu
}

// SetVehicleID sets the "vehicle" edge to the Vehicle entity by ID.
func (viu *VehicleImageUpdate) SetVehicleID(id int) *VehicleImageUpdate {
	viu.mutation.SetVehicleID(id)
	return viu
}

// SetNillableVehicleID sets the "vehicle" edge to the Vehicle entity by ID if the given value is not nil.
func (viu *VehicleImageUpdate) SetNillableVehicleID(id *int) *VehicleImageUpdate {
	if id != nil {
		viu = viu.SetVehicleID(*id)
	}
	return viu
}

// SetVehicle sets the "vehicle" edge to the Vehicle entity.
func (viu *VehicleImageUpdate) SetVehicle(v *Vehicle) *VehicleImageUpdate {
	return viu.SetVehicleID(v.ID)
}

// Mutation returns the VehicleImageMutation object of the builder.
func (viu *VehicleImageUpdate) Mutation() *VehicleImageMutation {
	return viu.mutation
}

// ClearVehicle clears the "vehicle" edge to the Vehicle entity.
func (viu *VehicleImageUpdate) ClearVehicle() *VehicleImageUpdate {
	viu.mutation.ClearVehicle()
	return viu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (viu *VehicleImageUpdate) Save(ctx context.Context) (int, error) {
	viu.defaults()
	return withHooks(ctx, viu.sqlSave, viu.mutation, viu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (viu *VehicleImageUpdate) SaveX(ctx context.Context) int {
	affected, err := viu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (viu *VehicleImageUpdate) Exec(ctx context.Context) error {
	_, err := viu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (viu *VehicleImageUpdate) ExecX(ctx context.Context) {
	if err := viu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (viu *VehicleImageUpdate) defaults() {
	if _, ok := viu.mutation.UpdatedAt(); !ok {
		v := vehicleimage.UpdateDefaultUpdatedAt()
		viu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (viu *VehicleImageUpdate) check() error {
	if v, ok := viu.mutation.Image(); ok {
		if err := vehicleimage.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "VehicleImage.image": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (viu *VehicleImageUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VehicleImageUpdate {
	viu.modifiers = append(viu.modifiers, modifiers...)
	return viu
}

func (viu *VehicleImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := viu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vehicleimage.Table, vehicleimage.Columns, sqlgraph.NewFieldSpec(vehicleimage.FieldID, field.TypeInt))
	if ps := viu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := viu.mutation.UpdatedAt(); ok {
		_spec.SetField(vehicleimage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := viu.mutation.Image(); ok {
		_spec.SetField(vehicleimage.FieldImage, field.TypeString, value)
	}
	if viu.mutation.VehicleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicleimage.VehicleTable,
			Columns: []string{vehicleimage.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viu.mutation.VehicleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicleimage.VehicleTable,
			Columns: []string{vehicleimage.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(viu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, viu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicleimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	viu.mutation.done = true
	return n, nil
}

// VehicleImageUpdateOne is the builder for updating a single VehicleImage entity.
type VehicleImageUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *VehicleImageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (viuo *VehicleImageUpdateOne) SetUpdatedAt(t time.Time) *VehicleImageUpdateOne {
	viuo.mutation.SetUpdatedAt(t)
	return viuo
}

// SetImage sets the "image" field.
func (viuo *VehicleImageUpdateOne) SetImage(s string) *VehicleImageUpdateOne {
	viuo.mutation.SetImage(s)
	return viuo
}

// SetVehicleID sets the "vehicle" edge to the Vehicle entity by ID.
func (viuo *VehicleImageUpdateOne) SetVehicleID(id int) *VehicleImageUpdateOne {
	viuo.mutation.SetVehicleID(id)
	return viuo
}

// SetNillableVehicleID sets the "vehicle" edge to the Vehicle entity by ID if the given value is not nil.
func (viuo *VehicleImageUpdateOne) SetNillableVehicleID(id *int) *VehicleImageUpdateOne {
	if id != nil {
		viuo = viuo.SetVehicleID(*id)
	}
	return viuo
}

// SetVehicle sets the "vehicle" edge to the Vehicle entity.
func (viuo *VehicleImageUpdateOne) SetVehicle(v *Vehicle) *VehicleImageUpdateOne {
	return viuo.SetVehicleID(v.ID)
}

// Mutation returns the VehicleImageMutation object of the builder.
func (viuo *VehicleImageUpdateOne) Mutation() *VehicleImageMutation {
	return viuo.mutation
}

// ClearVehicle clears the "vehicle" edge to the Vehicle entity.
func (viuo *VehicleImageUpdateOne) ClearVehicle() *VehicleImageUpdateOne {
	viuo.mutation.ClearVehicle()
	return viuo
}

// Where appends a list predicates to the VehicleImageUpdate builder.
func (viuo *VehicleImageUpdateOne) Where(ps ...predicate.VehicleImage) *VehicleImageUpdateOne {
	viuo.mutation.Where(ps...)
	return viuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (viuo *VehicleImageUpdateOne) Select(field string, fields ...string) *VehicleImageUpdateOne {
	viuo.fields = append([]string{field}, fields...)
	return viuo
}

// Save executes the query and returns the updated VehicleImage entity.
func (viuo *VehicleImageUpdateOne) Save(ctx context.Context) (*VehicleImage, error) {
	viuo.defaults()
	return withHooks(ctx, viuo.sqlSave, viuo.mutation, viuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (viuo *VehicleImageUpdateOne) SaveX(ctx context.Context) *VehicleImage {
	node, err := viuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (viuo *VehicleImageUpdateOne) Exec(ctx context.Context) error {
	_, err := viuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (viuo *VehicleImageUpdateOne) ExecX(ctx context.Context) {
	if err := viuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (viuo *VehicleImageUpdateOne) defaults() {
	if _, ok := viuo.mutation.UpdatedAt(); !ok {
		v := vehicleimage.UpdateDefaultUpdatedAt()
		viuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (viuo *VehicleImageUpdateOne) check() error {
	if v, ok := viuo.mutation.Image(); ok {
		if err := vehicleimage.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "VehicleImage.image": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (viuo *VehicleImageUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VehicleImageUpdateOne {
	viuo.modifiers = append(viuo.modifiers, modifiers...)
	return viuo
}

func (viuo *VehicleImageUpdateOne) sqlSave(ctx context.Context) (_node *VehicleImage, err error) {
	if err := viuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vehicleimage.Table, vehicleimage.Columns, sqlgraph.NewFieldSpec(vehicleimage.FieldID, field.TypeInt))
	id, ok := viuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VehicleImage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := viuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vehicleimage.FieldID)
		for _, f := range fields {
			if !vehicleimage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vehicleimage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := viuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := viuo.mutation.UpdatedAt(); ok {
		_spec.SetField(vehicleimage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := viuo.mutation.Image(); ok {
		_spec.SetField(vehicleimage.FieldImage, field.TypeString, value)
	}
	if viuo.mutation.VehicleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicleimage.VehicleTable,
			Columns: []string{vehicleimage.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viuo.mutation.VehicleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicleimage.VehicleTable,
			Columns: []string{vehicleimage.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(viuo.modifiers...)
	_node = &VehicleImage{config: viuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, viuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicleimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	viuo.mutation.done = true
	return _node, nil
}
