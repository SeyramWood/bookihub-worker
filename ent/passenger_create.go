// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/booking"
	"github.com/SeyramWood/ent/passenger"
)

// PassengerCreate is the builder for creating a Passenger entity.
type PassengerCreate struct {
	config
	mutation *PassengerMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *PassengerCreate) SetCreatedAt(t time.Time) *PassengerCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PassengerCreate) SetNillableCreatedAt(t *time.Time) *PassengerCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PassengerCreate) SetUpdatedAt(t time.Time) *PassengerCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PassengerCreate) SetNillableUpdatedAt(t *time.Time) *PassengerCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetFullName sets the "full_name" field.
func (pc *PassengerCreate) SetFullName(s string) *PassengerCreate {
	pc.mutation.SetFullName(s)
	return pc
}

// SetAmount sets the "amount" field.
func (pc *PassengerCreate) SetAmount(f float64) *PassengerCreate {
	pc.mutation.SetAmount(f)
	return pc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pc *PassengerCreate) SetNillableAmount(f *float64) *PassengerCreate {
	if f != nil {
		pc.SetAmount(*f)
	}
	return pc
}

// SetMaturity sets the "maturity" field.
func (pc *PassengerCreate) SetMaturity(pa passenger.Maturity) *PassengerCreate {
	pc.mutation.SetMaturity(pa)
	return pc
}

// SetNillableMaturity sets the "maturity" field if the given value is not nil.
func (pc *PassengerCreate) SetNillableMaturity(pa *passenger.Maturity) *PassengerCreate {
	if pa != nil {
		pc.SetMaturity(*pa)
	}
	return pc
}

// SetGender sets the "gender" field.
func (pc *PassengerCreate) SetGender(pa passenger.Gender) *PassengerCreate {
	pc.mutation.SetGender(pa)
	return pc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (pc *PassengerCreate) SetNillableGender(pa *passenger.Gender) *PassengerCreate {
	if pa != nil {
		pc.SetGender(*pa)
	}
	return pc
}

// SetBookingID sets the "booking" edge to the Booking entity by ID.
func (pc *PassengerCreate) SetBookingID(id int) *PassengerCreate {
	pc.mutation.SetBookingID(id)
	return pc
}

// SetBooking sets the "booking" edge to the Booking entity.
func (pc *PassengerCreate) SetBooking(b *Booking) *PassengerCreate {
	return pc.SetBookingID(b.ID)
}

// Mutation returns the PassengerMutation object of the builder.
func (pc *PassengerCreate) Mutation() *PassengerMutation {
	return pc.mutation
}

// Save creates the Passenger in the database.
func (pc *PassengerCreate) Save(ctx context.Context) (*Passenger, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PassengerCreate) SaveX(ctx context.Context) *Passenger {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PassengerCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PassengerCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PassengerCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := passenger.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := passenger.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Amount(); !ok {
		v := passenger.DefaultAmount
		pc.mutation.SetAmount(v)
	}
	if _, ok := pc.mutation.Maturity(); !ok {
		v := passenger.DefaultMaturity
		pc.mutation.SetMaturity(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PassengerCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Passenger.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Passenger.updated_at"`)}
	}
	if _, ok := pc.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "Passenger.full_name"`)}
	}
	if v, ok := pc.mutation.FullName(); ok {
		if err := passenger.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "Passenger.full_name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Passenger.amount"`)}
	}
	if _, ok := pc.mutation.Maturity(); !ok {
		return &ValidationError{Name: "maturity", err: errors.New(`ent: missing required field "Passenger.maturity"`)}
	}
	if v, ok := pc.mutation.Maturity(); ok {
		if err := passenger.MaturityValidator(v); err != nil {
			return &ValidationError{Name: "maturity", err: fmt.Errorf(`ent: validator failed for field "Passenger.maturity": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Gender(); ok {
		if err := passenger.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Passenger.gender": %w`, err)}
		}
	}
	if _, ok := pc.mutation.BookingID(); !ok {
		return &ValidationError{Name: "booking", err: errors.New(`ent: missing required edge "Passenger.booking"`)}
	}
	return nil
}

func (pc *PassengerCreate) sqlSave(ctx context.Context) (*Passenger, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PassengerCreate) createSpec() (*Passenger, *sqlgraph.CreateSpec) {
	var (
		_node = &Passenger{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(passenger.Table, sqlgraph.NewFieldSpec(passenger.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(passenger.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(passenger.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.FullName(); ok {
		_spec.SetField(passenger.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := pc.mutation.Amount(); ok {
		_spec.SetField(passenger.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := pc.mutation.Maturity(); ok {
		_spec.SetField(passenger.FieldMaturity, field.TypeEnum, value)
		_node.Maturity = value
	}
	if value, ok := pc.mutation.Gender(); ok {
		_spec.SetField(passenger.FieldGender, field.TypeEnum, value)
		_node.Gender = value
	}
	if nodes := pc.mutation.BookingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passenger.BookingTable,
			Columns: []string{passenger.BookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.booking_passengers = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PassengerCreateBulk is the builder for creating many Passenger entities in bulk.
type PassengerCreateBulk struct {
	config
	err      error
	builders []*PassengerCreate
}

// Save creates the Passenger entities in the database.
func (pcb *PassengerCreateBulk) Save(ctx context.Context) ([]*Passenger, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Passenger, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PassengerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PassengerCreateBulk) SaveX(ctx context.Context) []*Passenger {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PassengerCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PassengerCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
