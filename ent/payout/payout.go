// Code generated by ent, DO NOT EDIT.

package payout

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the payout type in the database.
	Label = "payout"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAccountName holds the string denoting the account_name field in the database.
	FieldAccountName = "account_name"
	// FieldAccountNumber holds the string denoting the account_number field in the database.
	FieldAccountNumber = "account_number"
	// FieldBank holds the string denoting the bank field in the database.
	FieldBank = "bank"
	// FieldBranch holds the string denoting the branch field in the database.
	FieldBranch = "branch"
	// EdgeTransaction holds the string denoting the transaction edge name in mutations.
	EdgeTransaction = "transaction"
	// Table holds the table name of the payout in the database.
	Table = "payouts"
	// TransactionTable is the table that holds the transaction relation/edge.
	TransactionTable = "payouts"
	// TransactionInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	TransactionInverseTable = "transactions"
	// TransactionColumn is the table column denoting the transaction relation/edge.
	TransactionColumn = "payout_transaction"
)

// Columns holds all SQL columns for payout fields.
var Columns = []string{
	FieldID,
	FieldAccountName,
	FieldAccountNumber,
	FieldBank,
	FieldBranch,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "payouts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"payout_transaction",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// AccountNameValidator is a validator for the "account_name" field. It is called by the builders before save.
	AccountNameValidator func(string) error
	// AccountNumberValidator is a validator for the "account_number" field. It is called by the builders before save.
	AccountNumberValidator func(string) error
	// BankValidator is a validator for the "bank" field. It is called by the builders before save.
	BankValidator func(string) error
	// BranchValidator is a validator for the "branch" field. It is called by the builders before save.
	BranchValidator func(string) error
)

// OrderOption defines the ordering options for the Payout queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAccountName orders the results by the account_name field.
func ByAccountName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountName, opts...).ToFunc()
}

// ByAccountNumber orders the results by the account_number field.
func ByAccountNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountNumber, opts...).ToFunc()
}

// ByBank orders the results by the bank field.
func ByBank(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBank, opts...).ToFunc()
}

// ByBranch orders the results by the branch field.
func ByBranch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBranch, opts...).ToFunc()
}

// ByTransactionField orders the results by transaction field.
func ByTransactionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransactionStep(), sql.OrderByField(field, opts...))
	}
}
func newTransactionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransactionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TransactionTable, TransactionColumn),
	)
}
