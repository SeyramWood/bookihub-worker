// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/company"
	"github.com/SeyramWood/ent/route"
	"github.com/SeyramWood/ent/routestop"
	"github.com/SeyramWood/ent/trip"
)

// RouteCreate is the builder for creating a Route entity.
type RouteCreate struct {
	config
	mutation *RouteMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *RouteCreate) SetCreatedAt(t time.Time) *RouteCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RouteCreate) SetNillableCreatedAt(t *time.Time) *RouteCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RouteCreate) SetUpdatedAt(t time.Time) *RouteCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RouteCreate) SetNillableUpdatedAt(t *time.Time) *RouteCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetFromLocation sets the "from_location" field.
func (rc *RouteCreate) SetFromLocation(s string) *RouteCreate {
	rc.mutation.SetFromLocation(s)
	return rc
}

// SetFromTerminal sets the "from_terminal" field.
func (rc *RouteCreate) SetFromTerminal(s string) *RouteCreate {
	rc.mutation.SetFromTerminal(s)
	return rc
}

// SetNillableFromTerminal sets the "from_terminal" field if the given value is not nil.
func (rc *RouteCreate) SetNillableFromTerminal(s *string) *RouteCreate {
	if s != nil {
		rc.SetFromTerminal(*s)
	}
	return rc
}

// SetToLocation sets the "to_location" field.
func (rc *RouteCreate) SetToLocation(s string) *RouteCreate {
	rc.mutation.SetToLocation(s)
	return rc
}

// SetToTerminal sets the "to_terminal" field.
func (rc *RouteCreate) SetToTerminal(s string) *RouteCreate {
	rc.mutation.SetToTerminal(s)
	return rc
}

// SetNillableToTerminal sets the "to_terminal" field if the given value is not nil.
func (rc *RouteCreate) SetNillableToTerminal(s *string) *RouteCreate {
	if s != nil {
		rc.SetToTerminal(*s)
	}
	return rc
}

// SetFromLatitude sets the "from_latitude" field.
func (rc *RouteCreate) SetFromLatitude(f float64) *RouteCreate {
	rc.mutation.SetFromLatitude(f)
	return rc
}

// SetNillableFromLatitude sets the "from_latitude" field if the given value is not nil.
func (rc *RouteCreate) SetNillableFromLatitude(f *float64) *RouteCreate {
	if f != nil {
		rc.SetFromLatitude(*f)
	}
	return rc
}

// SetFromLongitude sets the "from_longitude" field.
func (rc *RouteCreate) SetFromLongitude(f float64) *RouteCreate {
	rc.mutation.SetFromLongitude(f)
	return rc
}

// SetNillableFromLongitude sets the "from_longitude" field if the given value is not nil.
func (rc *RouteCreate) SetNillableFromLongitude(f *float64) *RouteCreate {
	if f != nil {
		rc.SetFromLongitude(*f)
	}
	return rc
}

// SetToLatitude sets the "to_latitude" field.
func (rc *RouteCreate) SetToLatitude(f float64) *RouteCreate {
	rc.mutation.SetToLatitude(f)
	return rc
}

// SetNillableToLatitude sets the "to_latitude" field if the given value is not nil.
func (rc *RouteCreate) SetNillableToLatitude(f *float64) *RouteCreate {
	if f != nil {
		rc.SetToLatitude(*f)
	}
	return rc
}

// SetToLongitude sets the "to_longitude" field.
func (rc *RouteCreate) SetToLongitude(f float64) *RouteCreate {
	rc.mutation.SetToLongitude(f)
	return rc
}

// SetNillableToLongitude sets the "to_longitude" field if the given value is not nil.
func (rc *RouteCreate) SetNillableToLongitude(f *float64) *RouteCreate {
	if f != nil {
		rc.SetToLongitude(*f)
	}
	return rc
}

// SetRate sets the "rate" field.
func (rc *RouteCreate) SetRate(f float64) *RouteCreate {
	rc.mutation.SetRate(f)
	return rc
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (rc *RouteCreate) SetNillableRate(f *float64) *RouteCreate {
	if f != nil {
		rc.SetRate(*f)
	}
	return rc
}

// SetDiscount sets the "discount" field.
func (rc *RouteCreate) SetDiscount(f float32) *RouteCreate {
	rc.mutation.SetDiscount(f)
	return rc
}

// SetNillableDiscount sets the "discount" field if the given value is not nil.
func (rc *RouteCreate) SetNillableDiscount(f *float32) *RouteCreate {
	if f != nil {
		rc.SetDiscount(*f)
	}
	return rc
}

// SetPopularity sets the "popularity" field.
func (rc *RouteCreate) SetPopularity(i int) *RouteCreate {
	rc.mutation.SetPopularity(i)
	return rc
}

// SetNillablePopularity sets the "popularity" field if the given value is not nil.
func (rc *RouteCreate) SetNillablePopularity(i *int) *RouteCreate {
	if i != nil {
		rc.SetPopularity(*i)
	}
	return rc
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (rc *RouteCreate) SetCompanyID(id int) *RouteCreate {
	rc.mutation.SetCompanyID(id)
	return rc
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (rc *RouteCreate) SetNillableCompanyID(id *int) *RouteCreate {
	if id != nil {
		rc = rc.SetCompanyID(*id)
	}
	return rc
}

// SetCompany sets the "company" edge to the Company entity.
func (rc *RouteCreate) SetCompany(c *Company) *RouteCreate {
	return rc.SetCompanyID(c.ID)
}

// AddStopIDs adds the "stops" edge to the RouteStop entity by IDs.
func (rc *RouteCreate) AddStopIDs(ids ...int) *RouteCreate {
	rc.mutation.AddStopIDs(ids...)
	return rc
}

// AddStops adds the "stops" edges to the RouteStop entity.
func (rc *RouteCreate) AddStops(r ...*RouteStop) *RouteCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddStopIDs(ids...)
}

// AddTripIDs adds the "trips" edge to the Trip entity by IDs.
func (rc *RouteCreate) AddTripIDs(ids ...int) *RouteCreate {
	rc.mutation.AddTripIDs(ids...)
	return rc
}

// AddTrips adds the "trips" edges to the Trip entity.
func (rc *RouteCreate) AddTrips(t ...*Trip) *RouteCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return rc.AddTripIDs(ids...)
}

// Mutation returns the RouteMutation object of the builder.
func (rc *RouteCreate) Mutation() *RouteMutation {
	return rc.mutation
}

// Save creates the Route in the database.
func (rc *RouteCreate) Save(ctx context.Context) (*Route, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RouteCreate) SaveX(ctx context.Context) *Route {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RouteCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RouteCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RouteCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := route.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := route.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.Rate(); !ok {
		v := route.DefaultRate
		rc.mutation.SetRate(v)
	}
	if _, ok := rc.mutation.Discount(); !ok {
		v := route.DefaultDiscount
		rc.mutation.SetDiscount(v)
	}
	if _, ok := rc.mutation.Popularity(); !ok {
		v := route.DefaultPopularity
		rc.mutation.SetPopularity(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RouteCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Route.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Route.updated_at"`)}
	}
	if _, ok := rc.mutation.FromLocation(); !ok {
		return &ValidationError{Name: "from_location", err: errors.New(`ent: missing required field "Route.from_location"`)}
	}
	if v, ok := rc.mutation.FromLocation(); ok {
		if err := route.FromLocationValidator(v); err != nil {
			return &ValidationError{Name: "from_location", err: fmt.Errorf(`ent: validator failed for field "Route.from_location": %w`, err)}
		}
	}
	if _, ok := rc.mutation.ToLocation(); !ok {
		return &ValidationError{Name: "to_location", err: errors.New(`ent: missing required field "Route.to_location"`)}
	}
	if v, ok := rc.mutation.ToLocation(); ok {
		if err := route.ToLocationValidator(v); err != nil {
			return &ValidationError{Name: "to_location", err: fmt.Errorf(`ent: validator failed for field "Route.to_location": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Rate(); !ok {
		return &ValidationError{Name: "rate", err: errors.New(`ent: missing required field "Route.rate"`)}
	}
	if _, ok := rc.mutation.Discount(); !ok {
		return &ValidationError{Name: "discount", err: errors.New(`ent: missing required field "Route.discount"`)}
	}
	if _, ok := rc.mutation.Popularity(); !ok {
		return &ValidationError{Name: "popularity", err: errors.New(`ent: missing required field "Route.popularity"`)}
	}
	return nil
}

func (rc *RouteCreate) sqlSave(ctx context.Context) (*Route, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RouteCreate) createSpec() (*Route, *sqlgraph.CreateSpec) {
	var (
		_node = &Route{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(route.Table, sqlgraph.NewFieldSpec(route.FieldID, field.TypeInt))
	)
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(route.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(route.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.FromLocation(); ok {
		_spec.SetField(route.FieldFromLocation, field.TypeString, value)
		_node.FromLocation = value
	}
	if value, ok := rc.mutation.FromTerminal(); ok {
		_spec.SetField(route.FieldFromTerminal, field.TypeString, value)
		_node.FromTerminal = value
	}
	if value, ok := rc.mutation.ToLocation(); ok {
		_spec.SetField(route.FieldToLocation, field.TypeString, value)
		_node.ToLocation = value
	}
	if value, ok := rc.mutation.ToTerminal(); ok {
		_spec.SetField(route.FieldToTerminal, field.TypeString, value)
		_node.ToTerminal = value
	}
	if value, ok := rc.mutation.FromLatitude(); ok {
		_spec.SetField(route.FieldFromLatitude, field.TypeFloat64, value)
		_node.FromLatitude = value
	}
	if value, ok := rc.mutation.FromLongitude(); ok {
		_spec.SetField(route.FieldFromLongitude, field.TypeFloat64, value)
		_node.FromLongitude = value
	}
	if value, ok := rc.mutation.ToLatitude(); ok {
		_spec.SetField(route.FieldToLatitude, field.TypeFloat64, value)
		_node.ToLatitude = value
	}
	if value, ok := rc.mutation.ToLongitude(); ok {
		_spec.SetField(route.FieldToLongitude, field.TypeFloat64, value)
		_node.ToLongitude = value
	}
	if value, ok := rc.mutation.Rate(); ok {
		_spec.SetField(route.FieldRate, field.TypeFloat64, value)
		_node.Rate = value
	}
	if value, ok := rc.mutation.Discount(); ok {
		_spec.SetField(route.FieldDiscount, field.TypeFloat32, value)
		_node.Discount = value
	}
	if value, ok := rc.mutation.Popularity(); ok {
		_spec.SetField(route.FieldPopularity, field.TypeInt, value)
		_node.Popularity = value
	}
	if nodes := rc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   route.CompanyTable,
			Columns: []string{route.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_routes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.StopsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   route.StopsTable,
			Columns: []string{route.StopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routestop.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.TripsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   route.TripsTable,
			Columns: []string{route.TripsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RouteCreateBulk is the builder for creating many Route entities in bulk.
type RouteCreateBulk struct {
	config
	err      error
	builders []*RouteCreate
}

// Save creates the Route entities in the database.
func (rcb *RouteCreateBulk) Save(ctx context.Context) ([]*Route, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Route, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RouteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RouteCreateBulk) SaveX(ctx context.Context) []*Route {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RouteCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RouteCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
