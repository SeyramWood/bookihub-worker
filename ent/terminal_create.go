// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/bookibus/ent/company"
	"github.com/SeyramWood/bookibus/ent/terminal"
	"github.com/SeyramWood/bookibus/ent/trip"
)

// TerminalCreate is the builder for creating a Terminal entity.
type TerminalCreate struct {
	config
	mutation *TerminalMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tc *TerminalCreate) SetCreatedAt(t time.Time) *TerminalCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TerminalCreate) SetNillableCreatedAt(t *time.Time) *TerminalCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TerminalCreate) SetUpdatedAt(t time.Time) *TerminalCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TerminalCreate) SetNillableUpdatedAt(t *time.Time) *TerminalCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetAddress sets the "address" field.
func (tc *TerminalCreate) SetAddress(s string) *TerminalCreate {
	tc.mutation.SetAddress(s)
	return tc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (tc *TerminalCreate) SetNillableAddress(s *string) *TerminalCreate {
	if s != nil {
		tc.SetAddress(*s)
	}
	return tc
}

// SetLatitude sets the "latitude" field.
func (tc *TerminalCreate) SetLatitude(f float64) *TerminalCreate {
	tc.mutation.SetLatitude(f)
	return tc
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (tc *TerminalCreate) SetNillableLatitude(f *float64) *TerminalCreate {
	if f != nil {
		tc.SetLatitude(*f)
	}
	return tc
}

// SetLongitude sets the "longitude" field.
func (tc *TerminalCreate) SetLongitude(f float64) *TerminalCreate {
	tc.mutation.SetLongitude(f)
	return tc
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (tc *TerminalCreate) SetNillableLongitude(f *float64) *TerminalCreate {
	if f != nil {
		tc.SetLongitude(*f)
	}
	return tc
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (tc *TerminalCreate) SetCompanyID(id int) *TerminalCreate {
	tc.mutation.SetCompanyID(id)
	return tc
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (tc *TerminalCreate) SetNillableCompanyID(id *int) *TerminalCreate {
	if id != nil {
		tc = tc.SetCompanyID(*id)
	}
	return tc
}

// SetCompany sets the "company" edge to the Company entity.
func (tc *TerminalCreate) SetCompany(c *Company) *TerminalCreate {
	return tc.SetCompanyID(c.ID)
}

// AddFromIDs adds the "from" edge to the Trip entity by IDs.
func (tc *TerminalCreate) AddFromIDs(ids ...int) *TerminalCreate {
	tc.mutation.AddFromIDs(ids...)
	return tc
}

// AddFrom adds the "from" edges to the Trip entity.
func (tc *TerminalCreate) AddFrom(t ...*Trip) *TerminalCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddFromIDs(ids...)
}

// AddToIDs adds the "to" edge to the Trip entity by IDs.
func (tc *TerminalCreate) AddToIDs(ids ...int) *TerminalCreate {
	tc.mutation.AddToIDs(ids...)
	return tc
}

// AddTo adds the "to" edges to the Trip entity.
func (tc *TerminalCreate) AddTo(t ...*Trip) *TerminalCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddToIDs(ids...)
}

// Mutation returns the TerminalMutation object of the builder.
func (tc *TerminalCreate) Mutation() *TerminalMutation {
	return tc.mutation
}

// Save creates the Terminal in the database.
func (tc *TerminalCreate) Save(ctx context.Context) (*Terminal, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TerminalCreate) SaveX(ctx context.Context) *Terminal {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TerminalCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TerminalCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TerminalCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := terminal.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := terminal.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TerminalCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Terminal.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Terminal.updated_at"`)}
	}
	return nil
}

func (tc *TerminalCreate) sqlSave(ctx context.Context) (*Terminal, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TerminalCreate) createSpec() (*Terminal, *sqlgraph.CreateSpec) {
	var (
		_node = &Terminal{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(terminal.Table, sqlgraph.NewFieldSpec(terminal.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(terminal.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(terminal.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.Address(); ok {
		_spec.SetField(terminal.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := tc.mutation.Latitude(); ok {
		_spec.SetField(terminal.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := tc.mutation.Longitude(); ok {
		_spec.SetField(terminal.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if nodes := tc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   terminal.CompanyTable,
			Columns: []string{terminal.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_terminals = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.FromIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   terminal.FromTable,
			Columns: []string{terminal.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   terminal.ToTable,
			Columns: []string{terminal.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TerminalCreateBulk is the builder for creating many Terminal entities in bulk.
type TerminalCreateBulk struct {
	config
	err      error
	builders []*TerminalCreate
}

// Save creates the Terminal entities in the database.
func (tcb *TerminalCreateBulk) Save(ctx context.Context) ([]*Terminal, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Terminal, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TerminalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TerminalCreateBulk) SaveX(ctx context.Context) []*Terminal {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TerminalCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TerminalCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
