// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/bookibus/ent/payout"
	"github.com/SeyramWood/bookibus/ent/transaction"
)

// Payout is the model entity for the Payout schema.
type Payout struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AccountName holds the value of the "account_name" field.
	AccountName string `json:"account_name,omitempty"`
	// AccountNumber holds the value of the "account_number" field.
	AccountNumber string `json:"account_number,omitempty"`
	// Bank holds the value of the "bank" field.
	Bank string `json:"bank,omitempty"`
	// Branch holds the value of the "branch" field.
	Branch string `json:"branch,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PayoutQuery when eager-loading is set.
	Edges              PayoutEdges `json:"edges"`
	payout_transaction *int
	selectValues       sql.SelectValues
}

// PayoutEdges holds the relations/edges for other nodes in the graph.
type PayoutEdges struct {
	// Transaction holds the value of the transaction edge.
	Transaction *Transaction `json:"transaction,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TransactionOrErr returns the Transaction value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PayoutEdges) TransactionOrErr() (*Transaction, error) {
	if e.loadedTypes[0] {
		if e.Transaction == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: transaction.Label}
		}
		return e.Transaction, nil
	}
	return nil, &NotLoadedError{edge: "transaction"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Payout) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case payout.FieldID:
			values[i] = new(sql.NullInt64)
		case payout.FieldAccountName, payout.FieldAccountNumber, payout.FieldBank, payout.FieldBranch:
			values[i] = new(sql.NullString)
		case payout.ForeignKeys[0]: // payout_transaction
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Payout fields.
func (pa *Payout) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case payout.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case payout.FieldAccountName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_name", values[i])
			} else if value.Valid {
				pa.AccountName = value.String
			}
		case payout.FieldAccountNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_number", values[i])
			} else if value.Valid {
				pa.AccountNumber = value.String
			}
		case payout.FieldBank:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank", values[i])
			} else if value.Valid {
				pa.Bank = value.String
			}
		case payout.FieldBranch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field branch", values[i])
			} else if value.Valid {
				pa.Branch = value.String
			}
		case payout.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field payout_transaction", value)
			} else if value.Valid {
				pa.payout_transaction = new(int)
				*pa.payout_transaction = int(value.Int64)
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Payout.
// This includes values selected through modifiers, order, etc.
func (pa *Payout) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryTransaction queries the "transaction" edge of the Payout entity.
func (pa *Payout) QueryTransaction() *TransactionQuery {
	return NewPayoutClient(pa.config).QueryTransaction(pa)
}

// Update returns a builder for updating this Payout.
// Note that you need to call Payout.Unwrap() before calling this method if this Payout
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Payout) Update() *PayoutUpdateOne {
	return NewPayoutClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Payout entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Payout) Unwrap() *Payout {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Payout is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Payout) String() string {
	var builder strings.Builder
	builder.WriteString("Payout(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("account_name=")
	builder.WriteString(pa.AccountName)
	builder.WriteString(", ")
	builder.WriteString("account_number=")
	builder.WriteString(pa.AccountNumber)
	builder.WriteString(", ")
	builder.WriteString("bank=")
	builder.WriteString(pa.Bank)
	builder.WriteString(", ")
	builder.WriteString("branch=")
	builder.WriteString(pa.Branch)
	builder.WriteByte(')')
	return builder.String()
}

// Payouts is a parsable slice of Payout.
type Payouts []*Payout
