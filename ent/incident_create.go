// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/company"
	"github.com/SeyramWood/ent/companyuser"
	"github.com/SeyramWood/ent/incident"
	"github.com/SeyramWood/ent/incidentimage"
	"github.com/SeyramWood/ent/trip"
)

// IncidentCreate is the builder for creating a Incident entity.
type IncidentCreate struct {
	config
	mutation *IncidentMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ic *IncidentCreate) SetCreatedAt(t time.Time) *IncidentCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableCreatedAt(t *time.Time) *IncidentCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *IncidentCreate) SetUpdatedAt(t time.Time) *IncidentCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableUpdatedAt(t *time.Time) *IncidentCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetTime sets the "time" field.
func (ic *IncidentCreate) SetTime(t time.Time) *IncidentCreate {
	ic.mutation.SetTime(t)
	return ic
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableTime(t *time.Time) *IncidentCreate {
	if t != nil {
		ic.SetTime(*t)
	}
	return ic
}

// SetLocation sets the "location" field.
func (ic *IncidentCreate) SetLocation(s string) *IncidentCreate {
	ic.mutation.SetLocation(s)
	return ic
}

// SetDescription sets the "description" field.
func (ic *IncidentCreate) SetDescription(s string) *IncidentCreate {
	ic.mutation.SetDescription(s)
	return ic
}

// SetAudio sets the "audio" field.
func (ic *IncidentCreate) SetAudio(s string) *IncidentCreate {
	ic.mutation.SetAudio(s)
	return ic
}

// SetNillableAudio sets the "audio" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableAudio(s *string) *IncidentCreate {
	if s != nil {
		ic.SetAudio(*s)
	}
	return ic
}

// AddImageIDs adds the "images" edge to the IncidentImage entity by IDs.
func (ic *IncidentCreate) AddImageIDs(ids ...int) *IncidentCreate {
	ic.mutation.AddImageIDs(ids...)
	return ic
}

// AddImages adds the "images" edges to the IncidentImage entity.
func (ic *IncidentCreate) AddImages(i ...*IncidentImage) *IncidentCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddImageIDs(ids...)
}

// SetTripID sets the "trip" edge to the Trip entity by ID.
func (ic *IncidentCreate) SetTripID(id int) *IncidentCreate {
	ic.mutation.SetTripID(id)
	return ic
}

// SetNillableTripID sets the "trip" edge to the Trip entity by ID if the given value is not nil.
func (ic *IncidentCreate) SetNillableTripID(id *int) *IncidentCreate {
	if id != nil {
		ic = ic.SetTripID(*id)
	}
	return ic
}

// SetTrip sets the "trip" edge to the Trip entity.
func (ic *IncidentCreate) SetTrip(t *Trip) *IncidentCreate {
	return ic.SetTripID(t.ID)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (ic *IncidentCreate) SetCompanyID(id int) *IncidentCreate {
	ic.mutation.SetCompanyID(id)
	return ic
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (ic *IncidentCreate) SetNillableCompanyID(id *int) *IncidentCreate {
	if id != nil {
		ic = ic.SetCompanyID(*id)
	}
	return ic
}

// SetCompany sets the "company" edge to the Company entity.
func (ic *IncidentCreate) SetCompany(c *Company) *IncidentCreate {
	return ic.SetCompanyID(c.ID)
}

// SetDriverID sets the "driver" edge to the CompanyUser entity by ID.
func (ic *IncidentCreate) SetDriverID(id int) *IncidentCreate {
	ic.mutation.SetDriverID(id)
	return ic
}

// SetNillableDriverID sets the "driver" edge to the CompanyUser entity by ID if the given value is not nil.
func (ic *IncidentCreate) SetNillableDriverID(id *int) *IncidentCreate {
	if id != nil {
		ic = ic.SetDriverID(*id)
	}
	return ic
}

// SetDriver sets the "driver" edge to the CompanyUser entity.
func (ic *IncidentCreate) SetDriver(c *CompanyUser) *IncidentCreate {
	return ic.SetDriverID(c.ID)
}

// Mutation returns the IncidentMutation object of the builder.
func (ic *IncidentCreate) Mutation() *IncidentMutation {
	return ic.mutation
}

// Save creates the Incident in the database.
func (ic *IncidentCreate) Save(ctx context.Context) (*Incident, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IncidentCreate) SaveX(ctx context.Context) *Incident {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IncidentCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IncidentCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *IncidentCreate) defaults() {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := incident.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := incident.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IncidentCreate) check() error {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Incident.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Incident.updated_at"`)}
	}
	if _, ok := ic.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "Incident.location"`)}
	}
	if v, ok := ic.mutation.Location(); ok {
		if err := incident.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Incident.location": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Incident.description"`)}
	}
	if v, ok := ic.mutation.Description(); ok {
		if err := incident.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Incident.description": %w`, err)}
		}
	}
	return nil
}

func (ic *IncidentCreate) sqlSave(ctx context.Context) (*Incident, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *IncidentCreate) createSpec() (*Incident, *sqlgraph.CreateSpec) {
	var (
		_node = &Incident{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(incident.Table, sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt))
	)
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(incident.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(incident.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.Time(); ok {
		_spec.SetField(incident.FieldTime, field.TypeTime, value)
		_node.Time = value
	}
	if value, ok := ic.mutation.Location(); ok {
		_spec.SetField(incident.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := ic.mutation.Description(); ok {
		_spec.SetField(incident.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ic.mutation.Audio(); ok {
		_spec.SetField(incident.FieldAudio, field.TypeString, value)
		_node.Audio = value
	}
	if nodes := ic.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.ImagesTable,
			Columns: []string{incident.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.TripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incident.TripTable,
			Columns: []string{incident.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.trip_incidents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incident.CompanyTable,
			Columns: []string{incident.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_incidents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.DriverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incident.DriverTable,
			Columns: []string{incident.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_user_incidents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IncidentCreateBulk is the builder for creating many Incident entities in bulk.
type IncidentCreateBulk struct {
	config
	err      error
	builders []*IncidentCreate
}

// Save creates the Incident entities in the database.
func (icb *IncidentCreateBulk) Save(ctx context.Context) ([]*Incident, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Incident, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncidentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IncidentCreateBulk) SaveX(ctx context.Context) []*Incident {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IncidentCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IncidentCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
