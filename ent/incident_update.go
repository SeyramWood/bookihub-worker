// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/company"
	"github.com/SeyramWood/ent/companyuser"
	"github.com/SeyramWood/ent/incident"
	"github.com/SeyramWood/ent/incidentimage"
	"github.com/SeyramWood/ent/predicate"
	"github.com/SeyramWood/ent/trip"
)

// IncidentUpdate is the builder for updating Incident entities.
type IncidentUpdate struct {
	config
	hooks     []Hook
	mutation  *IncidentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IncidentUpdate builder.
func (iu *IncidentUpdate) Where(ps ...predicate.Incident) *IncidentUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *IncidentUpdate) SetUpdatedAt(t time.Time) *IncidentUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetTime sets the "time" field.
func (iu *IncidentUpdate) SetTime(t time.Time) *IncidentUpdate {
	iu.mutation.SetTime(t)
	return iu
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableTime(t *time.Time) *IncidentUpdate {
	if t != nil {
		iu.SetTime(*t)
	}
	return iu
}

// ClearTime clears the value of the "time" field.
func (iu *IncidentUpdate) ClearTime() *IncidentUpdate {
	iu.mutation.ClearTime()
	return iu
}

// SetLocation sets the "location" field.
func (iu *IncidentUpdate) SetLocation(s string) *IncidentUpdate {
	iu.mutation.SetLocation(s)
	return iu
}

// SetDescription sets the "description" field.
func (iu *IncidentUpdate) SetDescription(s string) *IncidentUpdate {
	iu.mutation.SetDescription(s)
	return iu
}

// SetAudio sets the "audio" field.
func (iu *IncidentUpdate) SetAudio(s string) *IncidentUpdate {
	iu.mutation.SetAudio(s)
	return iu
}

// SetNillableAudio sets the "audio" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableAudio(s *string) *IncidentUpdate {
	if s != nil {
		iu.SetAudio(*s)
	}
	return iu
}

// ClearAudio clears the value of the "audio" field.
func (iu *IncidentUpdate) ClearAudio() *IncidentUpdate {
	iu.mutation.ClearAudio()
	return iu
}

// AddImageIDs adds the "images" edge to the IncidentImage entity by IDs.
func (iu *IncidentUpdate) AddImageIDs(ids ...int) *IncidentUpdate {
	iu.mutation.AddImageIDs(ids...)
	return iu
}

// AddImages adds the "images" edges to the IncidentImage entity.
func (iu *IncidentUpdate) AddImages(i ...*IncidentImage) *IncidentUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddImageIDs(ids...)
}

// SetTripID sets the "trip" edge to the Trip entity by ID.
func (iu *IncidentUpdate) SetTripID(id int) *IncidentUpdate {
	iu.mutation.SetTripID(id)
	return iu
}

// SetNillableTripID sets the "trip" edge to the Trip entity by ID if the given value is not nil.
func (iu *IncidentUpdate) SetNillableTripID(id *int) *IncidentUpdate {
	if id != nil {
		iu = iu.SetTripID(*id)
	}
	return iu
}

// SetTrip sets the "trip" edge to the Trip entity.
func (iu *IncidentUpdate) SetTrip(t *Trip) *IncidentUpdate {
	return iu.SetTripID(t.ID)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (iu *IncidentUpdate) SetCompanyID(id int) *IncidentUpdate {
	iu.mutation.SetCompanyID(id)
	return iu
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (iu *IncidentUpdate) SetNillableCompanyID(id *int) *IncidentUpdate {
	if id != nil {
		iu = iu.SetCompanyID(*id)
	}
	return iu
}

// SetCompany sets the "company" edge to the Company entity.
func (iu *IncidentUpdate) SetCompany(c *Company) *IncidentUpdate {
	return iu.SetCompanyID(c.ID)
}

// SetDriverID sets the "driver" edge to the CompanyUser entity by ID.
func (iu *IncidentUpdate) SetDriverID(id int) *IncidentUpdate {
	iu.mutation.SetDriverID(id)
	return iu
}

// SetNillableDriverID sets the "driver" edge to the CompanyUser entity by ID if the given value is not nil.
func (iu *IncidentUpdate) SetNillableDriverID(id *int) *IncidentUpdate {
	if id != nil {
		iu = iu.SetDriverID(*id)
	}
	return iu
}

// SetDriver sets the "driver" edge to the CompanyUser entity.
func (iu *IncidentUpdate) SetDriver(c *CompanyUser) *IncidentUpdate {
	return iu.SetDriverID(c.ID)
}

// Mutation returns the IncidentMutation object of the builder.
func (iu *IncidentUpdate) Mutation() *IncidentMutation {
	return iu.mutation
}

// ClearImages clears all "images" edges to the IncidentImage entity.
func (iu *IncidentUpdate) ClearImages() *IncidentUpdate {
	iu.mutation.ClearImages()
	return iu
}

// RemoveImageIDs removes the "images" edge to IncidentImage entities by IDs.
func (iu *IncidentUpdate) RemoveImageIDs(ids ...int) *IncidentUpdate {
	iu.mutation.RemoveImageIDs(ids...)
	return iu
}

// RemoveImages removes "images" edges to IncidentImage entities.
func (iu *IncidentUpdate) RemoveImages(i ...*IncidentImage) *IncidentUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveImageIDs(ids...)
}

// ClearTrip clears the "trip" edge to the Trip entity.
func (iu *IncidentUpdate) ClearTrip() *IncidentUpdate {
	iu.mutation.ClearTrip()
	return iu
}

// ClearCompany clears the "company" edge to the Company entity.
func (iu *IncidentUpdate) ClearCompany() *IncidentUpdate {
	iu.mutation.ClearCompany()
	return iu
}

// ClearDriver clears the "driver" edge to the CompanyUser entity.
func (iu *IncidentUpdate) ClearDriver() *IncidentUpdate {
	iu.mutation.ClearDriver()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IncidentUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IncidentUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IncidentUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IncidentUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *IncidentUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := incident.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *IncidentUpdate) check() error {
	if v, ok := iu.mutation.Location(); ok {
		if err := incident.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Incident.location": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Description(); ok {
		if err := incident.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Incident.description": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iu *IncidentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentUpdate {
	iu.modifiers = append(iu.modifiers, modifiers...)
	return iu
}

func (iu *IncidentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(incident.Table, incident.Columns, sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(incident.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.Time(); ok {
		_spec.SetField(incident.FieldTime, field.TypeTime, value)
	}
	if iu.mutation.TimeCleared() {
		_spec.ClearField(incident.FieldTime, field.TypeTime)
	}
	if value, ok := iu.mutation.Location(); ok {
		_spec.SetField(incident.FieldLocation, field.TypeString, value)
	}
	if value, ok := iu.mutation.Description(); ok {
		_spec.SetField(incident.FieldDescription, field.TypeString, value)
	}
	if value, ok := iu.mutation.Audio(); ok {
		_spec.SetField(incident.FieldAudio, field.TypeString, value)
	}
	if iu.mutation.AudioCleared() {
		_spec.ClearField(incident.FieldAudio, field.TypeString)
	}
	if iu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.ImagesTable,
			Columns: []string{incident.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentimage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedImagesIDs(); len(nodes) > 0 && !iu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.ImagesTable,
			Columns: []string{incident.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.ImagesTable,
			Columns: []string{incident.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.TripCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incident.TripTable,
			Columns: []string{incident.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.TripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incident.TripTable,
			Columns: []string{incident.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incident.CompanyTable,
			Columns: []string{incident.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incident.CompanyTable,
			Columns: []string{incident.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.DriverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incident.DriverTable,
			Columns: []string{incident.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.DriverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incident.DriverTable,
			Columns: []string{incident.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(iu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incident.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IncidentUpdateOne is the builder for updating a single Incident entity.
type IncidentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IncidentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *IncidentUpdateOne) SetUpdatedAt(t time.Time) *IncidentUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetTime sets the "time" field.
func (iuo *IncidentUpdateOne) SetTime(t time.Time) *IncidentUpdateOne {
	iuo.mutation.SetTime(t)
	return iuo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableTime(t *time.Time) *IncidentUpdateOne {
	if t != nil {
		iuo.SetTime(*t)
	}
	return iuo
}

// ClearTime clears the value of the "time" field.
func (iuo *IncidentUpdateOne) ClearTime() *IncidentUpdateOne {
	iuo.mutation.ClearTime()
	return iuo
}

// SetLocation sets the "location" field.
func (iuo *IncidentUpdateOne) SetLocation(s string) *IncidentUpdateOne {
	iuo.mutation.SetLocation(s)
	return iuo
}

// SetDescription sets the "description" field.
func (iuo *IncidentUpdateOne) SetDescription(s string) *IncidentUpdateOne {
	iuo.mutation.SetDescription(s)
	return iuo
}

// SetAudio sets the "audio" field.
func (iuo *IncidentUpdateOne) SetAudio(s string) *IncidentUpdateOne {
	iuo.mutation.SetAudio(s)
	return iuo
}

// SetNillableAudio sets the "audio" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableAudio(s *string) *IncidentUpdateOne {
	if s != nil {
		iuo.SetAudio(*s)
	}
	return iuo
}

// ClearAudio clears the value of the "audio" field.
func (iuo *IncidentUpdateOne) ClearAudio() *IncidentUpdateOne {
	iuo.mutation.ClearAudio()
	return iuo
}

// AddImageIDs adds the "images" edge to the IncidentImage entity by IDs.
func (iuo *IncidentUpdateOne) AddImageIDs(ids ...int) *IncidentUpdateOne {
	iuo.mutation.AddImageIDs(ids...)
	return iuo
}

// AddImages adds the "images" edges to the IncidentImage entity.
func (iuo *IncidentUpdateOne) AddImages(i ...*IncidentImage) *IncidentUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddImageIDs(ids...)
}

// SetTripID sets the "trip" edge to the Trip entity by ID.
func (iuo *IncidentUpdateOne) SetTripID(id int) *IncidentUpdateOne {
	iuo.mutation.SetTripID(id)
	return iuo
}

// SetNillableTripID sets the "trip" edge to the Trip entity by ID if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableTripID(id *int) *IncidentUpdateOne {
	if id != nil {
		iuo = iuo.SetTripID(*id)
	}
	return iuo
}

// SetTrip sets the "trip" edge to the Trip entity.
func (iuo *IncidentUpdateOne) SetTrip(t *Trip) *IncidentUpdateOne {
	return iuo.SetTripID(t.ID)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (iuo *IncidentUpdateOne) SetCompanyID(id int) *IncidentUpdateOne {
	iuo.mutation.SetCompanyID(id)
	return iuo
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableCompanyID(id *int) *IncidentUpdateOne {
	if id != nil {
		iuo = iuo.SetCompanyID(*id)
	}
	return iuo
}

// SetCompany sets the "company" edge to the Company entity.
func (iuo *IncidentUpdateOne) SetCompany(c *Company) *IncidentUpdateOne {
	return iuo.SetCompanyID(c.ID)
}

// SetDriverID sets the "driver" edge to the CompanyUser entity by ID.
func (iuo *IncidentUpdateOne) SetDriverID(id int) *IncidentUpdateOne {
	iuo.mutation.SetDriverID(id)
	return iuo
}

// SetNillableDriverID sets the "driver" edge to the CompanyUser entity by ID if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableDriverID(id *int) *IncidentUpdateOne {
	if id != nil {
		iuo = iuo.SetDriverID(*id)
	}
	return iuo
}

// SetDriver sets the "driver" edge to the CompanyUser entity.
func (iuo *IncidentUpdateOne) SetDriver(c *CompanyUser) *IncidentUpdateOne {
	return iuo.SetDriverID(c.ID)
}

// Mutation returns the IncidentMutation object of the builder.
func (iuo *IncidentUpdateOne) Mutation() *IncidentMutation {
	return iuo.mutation
}

// ClearImages clears all "images" edges to the IncidentImage entity.
func (iuo *IncidentUpdateOne) ClearImages() *IncidentUpdateOne {
	iuo.mutation.ClearImages()
	return iuo
}

// RemoveImageIDs removes the "images" edge to IncidentImage entities by IDs.
func (iuo *IncidentUpdateOne) RemoveImageIDs(ids ...int) *IncidentUpdateOne {
	iuo.mutation.RemoveImageIDs(ids...)
	return iuo
}

// RemoveImages removes "images" edges to IncidentImage entities.
func (iuo *IncidentUpdateOne) RemoveImages(i ...*IncidentImage) *IncidentUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveImageIDs(ids...)
}

// ClearTrip clears the "trip" edge to the Trip entity.
func (iuo *IncidentUpdateOne) ClearTrip() *IncidentUpdateOne {
	iuo.mutation.ClearTrip()
	return iuo
}

// ClearCompany clears the "company" edge to the Company entity.
func (iuo *IncidentUpdateOne) ClearCompany() *IncidentUpdateOne {
	iuo.mutation.ClearCompany()
	return iuo
}

// ClearDriver clears the "driver" edge to the CompanyUser entity.
func (iuo *IncidentUpdateOne) ClearDriver() *IncidentUpdateOne {
	iuo.mutation.ClearDriver()
	return iuo
}

// Where appends a list predicates to the IncidentUpdate builder.
func (iuo *IncidentUpdateOne) Where(ps ...predicate.Incident) *IncidentUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IncidentUpdateOne) Select(field string, fields ...string) *IncidentUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Incident entity.
func (iuo *IncidentUpdateOne) Save(ctx context.Context) (*Incident, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IncidentUpdateOne) SaveX(ctx context.Context) *Incident {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IncidentUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IncidentUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *IncidentUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := incident.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IncidentUpdateOne) check() error {
	if v, ok := iuo.mutation.Location(); ok {
		if err := incident.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Incident.location": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Description(); ok {
		if err := incident.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Incident.description": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iuo *IncidentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentUpdateOne {
	iuo.modifiers = append(iuo.modifiers, modifiers...)
	return iuo
}

func (iuo *IncidentUpdateOne) sqlSave(ctx context.Context) (_node *Incident, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(incident.Table, incident.Columns, sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Incident.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incident.FieldID)
		for _, f := range fields {
			if !incident.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != incident.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(incident.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.Time(); ok {
		_spec.SetField(incident.FieldTime, field.TypeTime, value)
	}
	if iuo.mutation.TimeCleared() {
		_spec.ClearField(incident.FieldTime, field.TypeTime)
	}
	if value, ok := iuo.mutation.Location(); ok {
		_spec.SetField(incident.FieldLocation, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Description(); ok {
		_spec.SetField(incident.FieldDescription, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Audio(); ok {
		_spec.SetField(incident.FieldAudio, field.TypeString, value)
	}
	if iuo.mutation.AudioCleared() {
		_spec.ClearField(incident.FieldAudio, field.TypeString)
	}
	if iuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.ImagesTable,
			Columns: []string{incident.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentimage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !iuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.ImagesTable,
			Columns: []string{incident.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.ImagesTable,
			Columns: []string{incident.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.TripCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incident.TripTable,
			Columns: []string{incident.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.TripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incident.TripTable,
			Columns: []string{incident.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incident.CompanyTable,
			Columns: []string{incident.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incident.CompanyTable,
			Columns: []string{incident.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.DriverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incident.DriverTable,
			Columns: []string{incident.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.DriverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incident.DriverTable,
			Columns: []string{incident.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(iuo.modifiers...)
	_node = &Incident{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incident.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
