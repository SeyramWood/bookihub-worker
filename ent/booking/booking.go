// Code generated by ent, DO NOT EDIT.

package booking

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the booking type in the database.
	Label = "booking"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldBookingNumber holds the string denoting the booking_number field in the database.
	FieldBookingNumber = "booking_number"
	// FieldSmsNotification holds the string denoting the sms_notification field in the database.
	FieldSmsNotification = "sms_notification"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgePassengers holds the string denoting the passengers edge name in mutations.
	EdgePassengers = "passengers"
	// EdgeLuggages holds the string denoting the luggages edge name in mutations.
	EdgeLuggages = "luggages"
	// EdgeContact holds the string denoting the contact edge name in mutations.
	EdgeContact = "contact"
	// EdgeTransaction holds the string denoting the transaction edge name in mutations.
	EdgeTransaction = "transaction"
	// EdgeTrip holds the string denoting the trip edge name in mutations.
	EdgeTrip = "trip"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// Table holds the table name of the booking in the database.
	Table = "bookings"
	// PassengersTable is the table that holds the passengers relation/edge.
	PassengersTable = "passengers"
	// PassengersInverseTable is the table name for the Passenger entity.
	// It exists in this package in order to avoid circular dependency with the "passenger" package.
	PassengersInverseTable = "passengers"
	// PassengersColumn is the table column denoting the passengers relation/edge.
	PassengersColumn = "booking_passengers"
	// LuggagesTable is the table that holds the luggages relation/edge.
	LuggagesTable = "customer_luggages"
	// LuggagesInverseTable is the table name for the CustomerLuggage entity.
	// It exists in this package in order to avoid circular dependency with the "customerluggage" package.
	LuggagesInverseTable = "customer_luggages"
	// LuggagesColumn is the table column denoting the luggages relation/edge.
	LuggagesColumn = "booking_luggages"
	// ContactTable is the table that holds the contact relation/edge.
	ContactTable = "customer_contacts"
	// ContactInverseTable is the table name for the CustomerContact entity.
	// It exists in this package in order to avoid circular dependency with the "customercontact" package.
	ContactInverseTable = "customer_contacts"
	// ContactColumn is the table column denoting the contact relation/edge.
	ContactColumn = "booking_contact"
	// TransactionTable is the table that holds the transaction relation/edge.
	TransactionTable = "transactions"
	// TransactionInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	TransactionInverseTable = "transactions"
	// TransactionColumn is the table column denoting the transaction relation/edge.
	TransactionColumn = "booking_transaction"
	// TripTable is the table that holds the trip relation/edge.
	TripTable = "bookings"
	// TripInverseTable is the table name for the Trip entity.
	// It exists in this package in order to avoid circular dependency with the "trip" package.
	TripInverseTable = "trips"
	// TripColumn is the table column denoting the trip relation/edge.
	TripColumn = "trip_bookings"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "bookings"
	// CompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompanyInverseTable = "companies"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "company_bookings"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "bookings"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customers"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_bookings"
)

// Columns holds all SQL columns for booking fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldBookingNumber,
	FieldSmsNotification,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "bookings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"company_bookings",
	"customer_bookings",
	"trip_bookings",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// BookingNumberValidator is a validator for the "booking_number" field. It is called by the builders before save.
	BookingNumberValidator func(string) error
	// DefaultSmsNotification holds the default value on creation for the "sms_notification" field.
	DefaultSmsNotification bool
)

// Status defines the type for the "status" enum field.
type Status string

// StatusSuccessful is the default value of the Status enum.
const DefaultStatus = StatusSuccessful

// Status values.
const (
	StatusSuccessful Status = "successful"
	StatusCanceled   Status = "canceled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusSuccessful, StatusCanceled:
		return nil
	default:
		return fmt.Errorf("booking: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Booking queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByBookingNumber orders the results by the booking_number field.
func ByBookingNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBookingNumber, opts...).ToFunc()
}

// BySmsNotification orders the results by the sms_notification field.
func BySmsNotification(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSmsNotification, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPassengersCount orders the results by passengers count.
func ByPassengersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPassengersStep(), opts...)
	}
}

// ByPassengers orders the results by passengers terms.
func ByPassengers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPassengersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLuggagesCount orders the results by luggages count.
func ByLuggagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLuggagesStep(), opts...)
	}
}

// ByLuggages orders the results by luggages terms.
func ByLuggages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLuggagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByContactField orders the results by contact field.
func ByContactField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContactStep(), sql.OrderByField(field, opts...))
	}
}

// ByTransactionField orders the results by transaction field.
func ByTransactionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransactionStep(), sql.OrderByField(field, opts...))
	}
}

// ByTripField orders the results by trip field.
func ByTripField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTripStep(), sql.OrderByField(field, opts...))
	}
}

// ByCompanyField orders the results by company field.
func ByCompanyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyStep(), sql.OrderByField(field, opts...))
	}
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}
func newPassengersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PassengersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PassengersTable, PassengersColumn),
	)
}
func newLuggagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LuggagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LuggagesTable, LuggagesColumn),
	)
}
func newContactStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContactInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ContactTable, ContactColumn),
	)
}
func newTransactionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransactionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, TransactionTable, TransactionColumn),
	)
}
func newTripStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TripInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TripTable, TripColumn),
	)
}
func newCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
	)
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, CustomerTable, CustomerColumn),
	)
}
