// Code generated by ent, DO NOT EDIT.

package parcel

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the parcel type in the database.
	Label = "parcel"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldParcelCode holds the string denoting the parcel_code field in the database.
	FieldParcelCode = "parcel_code"
	// FieldSenderName holds the string denoting the sender_name field in the database.
	FieldSenderName = "sender_name"
	// FieldSenderPhone holds the string denoting the sender_phone field in the database.
	FieldSenderPhone = "sender_phone"
	// FieldRecipientName holds the string denoting the recipient_name field in the database.
	FieldRecipientName = "recipient_name"
	// FieldRecipientPhone holds the string denoting the recipient_phone field in the database.
	FieldRecipientPhone = "recipient_phone"
	// FieldRecipientLocation holds the string denoting the recipient_location field in the database.
	FieldRecipientLocation = "recipient_location"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldPaidAt holds the string denoting the paid_at field in the database.
	FieldPaidAt = "paid_at"
	// FieldTansType holds the string denoting the tans_type field in the database.
	FieldTansType = "tans_type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeImages holds the string denoting the images edge name in mutations.
	EdgeImages = "images"
	// EdgeTrip holds the string denoting the trip edge name in mutations.
	EdgeTrip = "trip"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// EdgeDriver holds the string denoting the driver edge name in mutations.
	EdgeDriver = "driver"
	// Table holds the table name of the parcel in the database.
	Table = "parcels"
	// ImagesTable is the table that holds the images relation/edge.
	ImagesTable = "parcel_images"
	// ImagesInverseTable is the table name for the ParcelImage entity.
	// It exists in this package in order to avoid circular dependency with the "parcelimage" package.
	ImagesInverseTable = "parcel_images"
	// ImagesColumn is the table column denoting the images relation/edge.
	ImagesColumn = "parcel_images"
	// TripTable is the table that holds the trip relation/edge.
	TripTable = "parcels"
	// TripInverseTable is the table name for the Trip entity.
	// It exists in this package in order to avoid circular dependency with the "trip" package.
	TripInverseTable = "trips"
	// TripColumn is the table column denoting the trip relation/edge.
	TripColumn = "trip_parcels"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "parcels"
	// CompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompanyInverseTable = "companies"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "company_parcels"
	// DriverTable is the table that holds the driver relation/edge.
	DriverTable = "parcels"
	// DriverInverseTable is the table name for the CompanyUser entity.
	// It exists in this package in order to avoid circular dependency with the "companyuser" package.
	DriverInverseTable = "company_users"
	// DriverColumn is the table column denoting the driver relation/edge.
	DriverColumn = "company_user_parcels"
)

// Columns holds all SQL columns for parcel fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldParcelCode,
	FieldSenderName,
	FieldSenderPhone,
	FieldRecipientName,
	FieldRecipientPhone,
	FieldRecipientLocation,
	FieldAmount,
	FieldPaidAt,
	FieldTansType,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "parcels"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"company_parcels",
	"company_user_parcels",
	"trip_parcels",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// ParcelCodeValidator is a validator for the "parcel_code" field. It is called by the builders before save.
	ParcelCodeValidator func(string) error
	// SenderNameValidator is a validator for the "sender_name" field. It is called by the builders before save.
	SenderNameValidator func(string) error
	// SenderPhoneValidator is a validator for the "sender_phone" field. It is called by the builders before save.
	SenderPhoneValidator func(string) error
	// RecipientNameValidator is a validator for the "recipient_name" field. It is called by the builders before save.
	RecipientNameValidator func(string) error
	// RecipientPhoneValidator is a validator for the "recipient_phone" field. It is called by the builders before save.
	RecipientPhoneValidator func(string) error
	// RecipientLocationValidator is a validator for the "recipient_location" field. It is called by the builders before save.
	RecipientLocationValidator func(string) error
	// DefaultAmount holds the default value on creation for the "amount" field.
	DefaultAmount float64
)

// TansType defines the type for the "tans_type" enum field.
type TansType string

// TansTypeCash is the default value of the TansType enum.
const DefaultTansType = TansTypeCash

// TansType values.
const (
	TansTypeMomo TansType = "momo"
	TansTypeCard TansType = "card"
	TansTypeCash TansType = "cash"
)

func (tt TansType) String() string {
	return string(tt)
}

// TansTypeValidator is a validator for the "tans_type" field enum values. It is called by the builders before save.
func TansTypeValidator(tt TansType) error {
	switch tt {
	case TansTypeMomo, TansTypeCard, TansTypeCash:
		return nil
	default:
		return fmt.Errorf("parcel: invalid enum value for tans_type field: %q", tt)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusOutgoing is the default value of the Status enum.
const DefaultStatus = StatusOutgoing

// Status values.
const (
	StatusOutgoing  Status = "outgoing"
	StatusDelivered Status = "delivered"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusOutgoing, StatusDelivered:
		return nil
	default:
		return fmt.Errorf("parcel: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Parcel queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByParcelCode orders the results by the parcel_code field.
func ByParcelCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParcelCode, opts...).ToFunc()
}

// BySenderName orders the results by the sender_name field.
func BySenderName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSenderName, opts...).ToFunc()
}

// BySenderPhone orders the results by the sender_phone field.
func BySenderPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSenderPhone, opts...).ToFunc()
}

// ByRecipientName orders the results by the recipient_name field.
func ByRecipientName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecipientName, opts...).ToFunc()
}

// ByRecipientPhone orders the results by the recipient_phone field.
func ByRecipientPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecipientPhone, opts...).ToFunc()
}

// ByRecipientLocation orders the results by the recipient_location field.
func ByRecipientLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecipientLocation, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByPaidAt orders the results by the paid_at field.
func ByPaidAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaidAt, opts...).ToFunc()
}

// ByTansType orders the results by the tans_type field.
func ByTansType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTansType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByImagesCount orders the results by images count.
func ByImagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newImagesStep(), opts...)
	}
}

// ByImages orders the results by images terms.
func ByImages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTripField orders the results by trip field.
func ByTripField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTripStep(), sql.OrderByField(field, opts...))
	}
}

// ByCompanyField orders the results by company field.
func ByCompanyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyStep(), sql.OrderByField(field, opts...))
	}
}

// ByDriverField orders the results by driver field.
func ByDriverField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDriverStep(), sql.OrderByField(field, opts...))
	}
}
func newImagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ImagesTable, ImagesColumn),
	)
}
func newTripStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TripInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TripTable, TripColumn),
	)
}
func newCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
	)
}
func newDriverStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DriverInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DriverTable, DriverColumn),
	)
}
