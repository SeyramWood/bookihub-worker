// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/bookibus/ent/booking"
	"github.com/SeyramWood/bookibus/ent/company"
	"github.com/SeyramWood/bookibus/ent/customer"
	"github.com/SeyramWood/bookibus/ent/customercontact"
	"github.com/SeyramWood/bookibus/ent/customerluggage"
	"github.com/SeyramWood/bookibus/ent/passenger"
	"github.com/SeyramWood/bookibus/ent/transaction"
	"github.com/SeyramWood/bookibus/ent/trip"
)

// BookingCreate is the builder for creating a Booking entity.
type BookingCreate struct {
	config
	mutation *BookingMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (bc *BookingCreate) SetCreatedAt(t time.Time) *BookingCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BookingCreate) SetNillableCreatedAt(t *time.Time) *BookingCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BookingCreate) SetUpdatedAt(t time.Time) *BookingCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BookingCreate) SetNillableUpdatedAt(t *time.Time) *BookingCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetBookingNumber sets the "booking_number" field.
func (bc *BookingCreate) SetBookingNumber(s string) *BookingCreate {
	bc.mutation.SetBookingNumber(s)
	return bc
}

// SetSmsNotification sets the "sms_notification" field.
func (bc *BookingCreate) SetSmsNotification(b bool) *BookingCreate {
	bc.mutation.SetSmsNotification(b)
	return bc
}

// SetNillableSmsNotification sets the "sms_notification" field if the given value is not nil.
func (bc *BookingCreate) SetNillableSmsNotification(b *bool) *BookingCreate {
	if b != nil {
		bc.SetSmsNotification(*b)
	}
	return bc
}

// SetStatus sets the "status" field.
func (bc *BookingCreate) SetStatus(b booking.Status) *BookingCreate {
	bc.mutation.SetStatus(b)
	return bc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bc *BookingCreate) SetNillableStatus(b *booking.Status) *BookingCreate {
	if b != nil {
		bc.SetStatus(*b)
	}
	return bc
}

// AddPassengerIDs adds the "passengers" edge to the Passenger entity by IDs.
func (bc *BookingCreate) AddPassengerIDs(ids ...int) *BookingCreate {
	bc.mutation.AddPassengerIDs(ids...)
	return bc
}

// AddPassengers adds the "passengers" edges to the Passenger entity.
func (bc *BookingCreate) AddPassengers(p ...*Passenger) *BookingCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bc.AddPassengerIDs(ids...)
}

// AddLuggageIDs adds the "luggages" edge to the CustomerLuggage entity by IDs.
func (bc *BookingCreate) AddLuggageIDs(ids ...int) *BookingCreate {
	bc.mutation.AddLuggageIDs(ids...)
	return bc
}

// AddLuggages adds the "luggages" edges to the CustomerLuggage entity.
func (bc *BookingCreate) AddLuggages(c ...*CustomerLuggage) *BookingCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bc.AddLuggageIDs(ids...)
}

// SetContactID sets the "contact" edge to the CustomerContact entity by ID.
func (bc *BookingCreate) SetContactID(id int) *BookingCreate {
	bc.mutation.SetContactID(id)
	return bc
}

// SetNillableContactID sets the "contact" edge to the CustomerContact entity by ID if the given value is not nil.
func (bc *BookingCreate) SetNillableContactID(id *int) *BookingCreate {
	if id != nil {
		bc = bc.SetContactID(*id)
	}
	return bc
}

// SetContact sets the "contact" edge to the CustomerContact entity.
func (bc *BookingCreate) SetContact(c *CustomerContact) *BookingCreate {
	return bc.SetContactID(c.ID)
}

// SetTransactionID sets the "transaction" edge to the Transaction entity by ID.
func (bc *BookingCreate) SetTransactionID(id int) *BookingCreate {
	bc.mutation.SetTransactionID(id)
	return bc
}

// SetNillableTransactionID sets the "transaction" edge to the Transaction entity by ID if the given value is not nil.
func (bc *BookingCreate) SetNillableTransactionID(id *int) *BookingCreate {
	if id != nil {
		bc = bc.SetTransactionID(*id)
	}
	return bc
}

// SetTransaction sets the "transaction" edge to the Transaction entity.
func (bc *BookingCreate) SetTransaction(t *Transaction) *BookingCreate {
	return bc.SetTransactionID(t.ID)
}

// SetTripID sets the "trip" edge to the Trip entity by ID.
func (bc *BookingCreate) SetTripID(id int) *BookingCreate {
	bc.mutation.SetTripID(id)
	return bc
}

// SetNillableTripID sets the "trip" edge to the Trip entity by ID if the given value is not nil.
func (bc *BookingCreate) SetNillableTripID(id *int) *BookingCreate {
	if id != nil {
		bc = bc.SetTripID(*id)
	}
	return bc
}

// SetTrip sets the "trip" edge to the Trip entity.
func (bc *BookingCreate) SetTrip(t *Trip) *BookingCreate {
	return bc.SetTripID(t.ID)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (bc *BookingCreate) SetCompanyID(id int) *BookingCreate {
	bc.mutation.SetCompanyID(id)
	return bc
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (bc *BookingCreate) SetNillableCompanyID(id *int) *BookingCreate {
	if id != nil {
		bc = bc.SetCompanyID(*id)
	}
	return bc
}

// SetCompany sets the "company" edge to the Company entity.
func (bc *BookingCreate) SetCompany(c *Company) *BookingCreate {
	return bc.SetCompanyID(c.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (bc *BookingCreate) SetCustomerID(id int) *BookingCreate {
	bc.mutation.SetCustomerID(id)
	return bc
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (bc *BookingCreate) SetNillableCustomerID(id *int) *BookingCreate {
	if id != nil {
		bc = bc.SetCustomerID(*id)
	}
	return bc
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (bc *BookingCreate) SetCustomer(c *Customer) *BookingCreate {
	return bc.SetCustomerID(c.ID)
}

// Mutation returns the BookingMutation object of the builder.
func (bc *BookingCreate) Mutation() *BookingMutation {
	return bc.mutation
}

// Save creates the Booking in the database.
func (bc *BookingCreate) Save(ctx context.Context) (*Booking, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BookingCreate) SaveX(ctx context.Context) *Booking {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BookingCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BookingCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BookingCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := booking.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := booking.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.SmsNotification(); !ok {
		v := booking.DefaultSmsNotification
		bc.mutation.SetSmsNotification(v)
	}
	if _, ok := bc.mutation.Status(); !ok {
		v := booking.DefaultStatus
		bc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BookingCreate) check() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Booking.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Booking.updated_at"`)}
	}
	if _, ok := bc.mutation.BookingNumber(); !ok {
		return &ValidationError{Name: "booking_number", err: errors.New(`ent: missing required field "Booking.booking_number"`)}
	}
	if v, ok := bc.mutation.BookingNumber(); ok {
		if err := booking.BookingNumberValidator(v); err != nil {
			return &ValidationError{Name: "booking_number", err: fmt.Errorf(`ent: validator failed for field "Booking.booking_number": %w`, err)}
		}
	}
	if _, ok := bc.mutation.SmsNotification(); !ok {
		return &ValidationError{Name: "sms_notification", err: errors.New(`ent: missing required field "Booking.sms_notification"`)}
	}
	if _, ok := bc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Booking.status"`)}
	}
	if v, ok := bc.mutation.Status(); ok {
		if err := booking.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Booking.status": %w`, err)}
		}
	}
	return nil
}

func (bc *BookingCreate) sqlSave(ctx context.Context) (*Booking, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BookingCreate) createSpec() (*Booking, *sqlgraph.CreateSpec) {
	var (
		_node = &Booking{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(booking.Table, sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt))
	)
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(booking.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(booking.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.BookingNumber(); ok {
		_spec.SetField(booking.FieldBookingNumber, field.TypeString, value)
		_node.BookingNumber = value
	}
	if value, ok := bc.mutation.SmsNotification(); ok {
		_spec.SetField(booking.FieldSmsNotification, field.TypeBool, value)
		_node.SmsNotification = value
	}
	if value, ok := bc.mutation.Status(); ok {
		_spec.SetField(booking.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := bc.mutation.PassengersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   booking.PassengersTable,
			Columns: []string{booking.PassengersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passenger.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.LuggagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   booking.LuggagesTable,
			Columns: []string{booking.LuggagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerluggage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   booking.ContactTable,
			Columns: []string{booking.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   booking.TransactionTable,
			Columns: []string{booking.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.TripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.TripTable,
			Columns: []string{booking.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.trip_bookings = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.CompanyTable,
			Columns: []string{booking.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_bookings = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   booking.CustomerTable,
			Columns: []string{booking.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.customer_bookings = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BookingCreateBulk is the builder for creating many Booking entities in bulk.
type BookingCreateBulk struct {
	config
	err      error
	builders []*BookingCreate
}

// Save creates the Booking entities in the database.
func (bcb *BookingCreateBulk) Save(ctx context.Context) ([]*Booking, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Booking, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BookingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BookingCreateBulk) SaveX(ctx context.Context) []*Booking {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BookingCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BookingCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
