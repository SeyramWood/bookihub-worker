// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/bookibus/ent/bookibususer"
	"github.com/SeyramWood/bookibus/ent/notification"
	"github.com/SeyramWood/bookibus/ent/predicate"
	"github.com/SeyramWood/bookibus/ent/user"
)

// BookibusUserUpdate is the builder for updating BookibusUser entities.
type BookibusUserUpdate struct {
	config
	hooks     []Hook
	mutation  *BookibusUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BookibusUserUpdate builder.
func (buu *BookibusUserUpdate) Where(ps ...predicate.BookibusUser) *BookibusUserUpdate {
	buu.mutation.Where(ps...)
	return buu
}

// SetUpdatedAt sets the "updated_at" field.
func (buu *BookibusUserUpdate) SetUpdatedAt(t time.Time) *BookibusUserUpdate {
	buu.mutation.SetUpdatedAt(t)
	return buu
}

// SetLastName sets the "last_name" field.
func (buu *BookibusUserUpdate) SetLastName(s string) *BookibusUserUpdate {
	buu.mutation.SetLastName(s)
	return buu
}

// SetOtherName sets the "other_name" field.
func (buu *BookibusUserUpdate) SetOtherName(s string) *BookibusUserUpdate {
	buu.mutation.SetOtherName(s)
	return buu
}

// SetPhone sets the "phone" field.
func (buu *BookibusUserUpdate) SetPhone(s string) *BookibusUserUpdate {
	buu.mutation.SetPhone(s)
	return buu
}

// SetOtherPhone sets the "other_phone" field.
func (buu *BookibusUserUpdate) SetOtherPhone(s string) *BookibusUserUpdate {
	buu.mutation.SetOtherPhone(s)
	return buu
}

// SetNillableOtherPhone sets the "other_phone" field if the given value is not nil.
func (buu *BookibusUserUpdate) SetNillableOtherPhone(s *string) *BookibusUserUpdate {
	if s != nil {
		buu.SetOtherPhone(*s)
	}
	return buu
}

// ClearOtherPhone clears the value of the "other_phone" field.
func (buu *BookibusUserUpdate) ClearOtherPhone() *BookibusUserUpdate {
	buu.mutation.ClearOtherPhone()
	return buu
}

// SetRole sets the "role" field.
func (buu *BookibusUserUpdate) SetRole(b bookibususer.Role) *BookibusUserUpdate {
	buu.mutation.SetRole(b)
	return buu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (buu *BookibusUserUpdate) SetNillableRole(b *bookibususer.Role) *BookibusUserUpdate {
	if b != nil {
		buu.SetRole(*b)
	}
	return buu
}

// SetProfileID sets the "profile" edge to the User entity by ID.
func (buu *BookibusUserUpdate) SetProfileID(id int) *BookibusUserUpdate {
	buu.mutation.SetProfileID(id)
	return buu
}

// SetNillableProfileID sets the "profile" edge to the User entity by ID if the given value is not nil.
func (buu *BookibusUserUpdate) SetNillableProfileID(id *int) *BookibusUserUpdate {
	if id != nil {
		buu = buu.SetProfileID(*id)
	}
	return buu
}

// SetProfile sets the "profile" edge to the User entity.
func (buu *BookibusUserUpdate) SetProfile(u *User) *BookibusUserUpdate {
	return buu.SetProfileID(u.ID)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (buu *BookibusUserUpdate) AddNotificationIDs(ids ...int) *BookibusUserUpdate {
	buu.mutation.AddNotificationIDs(ids...)
	return buu
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (buu *BookibusUserUpdate) AddNotifications(n ...*Notification) *BookibusUserUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return buu.AddNotificationIDs(ids...)
}

// Mutation returns the BookibusUserMutation object of the builder.
func (buu *BookibusUserUpdate) Mutation() *BookibusUserMutation {
	return buu.mutation
}

// ClearProfile clears the "profile" edge to the User entity.
func (buu *BookibusUserUpdate) ClearProfile() *BookibusUserUpdate {
	buu.mutation.ClearProfile()
	return buu
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (buu *BookibusUserUpdate) ClearNotifications() *BookibusUserUpdate {
	buu.mutation.ClearNotifications()
	return buu
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (buu *BookibusUserUpdate) RemoveNotificationIDs(ids ...int) *BookibusUserUpdate {
	buu.mutation.RemoveNotificationIDs(ids...)
	return buu
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (buu *BookibusUserUpdate) RemoveNotifications(n ...*Notification) *BookibusUserUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return buu.RemoveNotificationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (buu *BookibusUserUpdate) Save(ctx context.Context) (int, error) {
	buu.defaults()
	return withHooks(ctx, buu.sqlSave, buu.mutation, buu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buu *BookibusUserUpdate) SaveX(ctx context.Context) int {
	affected, err := buu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (buu *BookibusUserUpdate) Exec(ctx context.Context) error {
	_, err := buu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buu *BookibusUserUpdate) ExecX(ctx context.Context) {
	if err := buu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buu *BookibusUserUpdate) defaults() {
	if _, ok := buu.mutation.UpdatedAt(); !ok {
		v := bookibususer.UpdateDefaultUpdatedAt()
		buu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buu *BookibusUserUpdate) check() error {
	if v, ok := buu.mutation.LastName(); ok {
		if err := bookibususer.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "BookibusUser.last_name": %w`, err)}
		}
	}
	if v, ok := buu.mutation.OtherName(); ok {
		if err := bookibususer.OtherNameValidator(v); err != nil {
			return &ValidationError{Name: "other_name", err: fmt.Errorf(`ent: validator failed for field "BookibusUser.other_name": %w`, err)}
		}
	}
	if v, ok := buu.mutation.Phone(); ok {
		if err := bookibususer.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "BookibusUser.phone": %w`, err)}
		}
	}
	if v, ok := buu.mutation.Role(); ok {
		if err := bookibususer.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "BookibusUser.role": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (buu *BookibusUserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BookibusUserUpdate {
	buu.modifiers = append(buu.modifiers, modifiers...)
	return buu
}

func (buu *BookibusUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := buu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bookibususer.Table, bookibususer.Columns, sqlgraph.NewFieldSpec(bookibususer.FieldID, field.TypeInt))
	if ps := buu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buu.mutation.UpdatedAt(); ok {
		_spec.SetField(bookibususer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := buu.mutation.LastName(); ok {
		_spec.SetField(bookibususer.FieldLastName, field.TypeString, value)
	}
	if value, ok := buu.mutation.OtherName(); ok {
		_spec.SetField(bookibususer.FieldOtherName, field.TypeString, value)
	}
	if value, ok := buu.mutation.Phone(); ok {
		_spec.SetField(bookibususer.FieldPhone, field.TypeString, value)
	}
	if value, ok := buu.mutation.OtherPhone(); ok {
		_spec.SetField(bookibususer.FieldOtherPhone, field.TypeString, value)
	}
	if buu.mutation.OtherPhoneCleared() {
		_spec.ClearField(bookibususer.FieldOtherPhone, field.TypeString)
	}
	if value, ok := buu.mutation.Role(); ok {
		_spec.SetField(bookibususer.FieldRole, field.TypeEnum, value)
	}
	if buu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bookibususer.ProfileTable,
			Columns: []string{bookibususer.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bookibususer.ProfileTable,
			Columns: []string{bookibususer.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   bookibususer.NotificationsTable,
			Columns: bookibususer.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !buu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   bookibususer.NotificationsTable,
			Columns: bookibususer.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   bookibususer.NotificationsTable,
			Columns: bookibususer.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(buu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, buu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookibususer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	buu.mutation.done = true
	return n, nil
}

// BookibusUserUpdateOne is the builder for updating a single BookibusUser entity.
type BookibusUserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BookibusUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (buuo *BookibusUserUpdateOne) SetUpdatedAt(t time.Time) *BookibusUserUpdateOne {
	buuo.mutation.SetUpdatedAt(t)
	return buuo
}

// SetLastName sets the "last_name" field.
func (buuo *BookibusUserUpdateOne) SetLastName(s string) *BookibusUserUpdateOne {
	buuo.mutation.SetLastName(s)
	return buuo
}

// SetOtherName sets the "other_name" field.
func (buuo *BookibusUserUpdateOne) SetOtherName(s string) *BookibusUserUpdateOne {
	buuo.mutation.SetOtherName(s)
	return buuo
}

// SetPhone sets the "phone" field.
func (buuo *BookibusUserUpdateOne) SetPhone(s string) *BookibusUserUpdateOne {
	buuo.mutation.SetPhone(s)
	return buuo
}

// SetOtherPhone sets the "other_phone" field.
func (buuo *BookibusUserUpdateOne) SetOtherPhone(s string) *BookibusUserUpdateOne {
	buuo.mutation.SetOtherPhone(s)
	return buuo
}

// SetNillableOtherPhone sets the "other_phone" field if the given value is not nil.
func (buuo *BookibusUserUpdateOne) SetNillableOtherPhone(s *string) *BookibusUserUpdateOne {
	if s != nil {
		buuo.SetOtherPhone(*s)
	}
	return buuo
}

// ClearOtherPhone clears the value of the "other_phone" field.
func (buuo *BookibusUserUpdateOne) ClearOtherPhone() *BookibusUserUpdateOne {
	buuo.mutation.ClearOtherPhone()
	return buuo
}

// SetRole sets the "role" field.
func (buuo *BookibusUserUpdateOne) SetRole(b bookibususer.Role) *BookibusUserUpdateOne {
	buuo.mutation.SetRole(b)
	return buuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (buuo *BookibusUserUpdateOne) SetNillableRole(b *bookibususer.Role) *BookibusUserUpdateOne {
	if b != nil {
		buuo.SetRole(*b)
	}
	return buuo
}

// SetProfileID sets the "profile" edge to the User entity by ID.
func (buuo *BookibusUserUpdateOne) SetProfileID(id int) *BookibusUserUpdateOne {
	buuo.mutation.SetProfileID(id)
	return buuo
}

// SetNillableProfileID sets the "profile" edge to the User entity by ID if the given value is not nil.
func (buuo *BookibusUserUpdateOne) SetNillableProfileID(id *int) *BookibusUserUpdateOne {
	if id != nil {
		buuo = buuo.SetProfileID(*id)
	}
	return buuo
}

// SetProfile sets the "profile" edge to the User entity.
func (buuo *BookibusUserUpdateOne) SetProfile(u *User) *BookibusUserUpdateOne {
	return buuo.SetProfileID(u.ID)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (buuo *BookibusUserUpdateOne) AddNotificationIDs(ids ...int) *BookibusUserUpdateOne {
	buuo.mutation.AddNotificationIDs(ids...)
	return buuo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (buuo *BookibusUserUpdateOne) AddNotifications(n ...*Notification) *BookibusUserUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return buuo.AddNotificationIDs(ids...)
}

// Mutation returns the BookibusUserMutation object of the builder.
func (buuo *BookibusUserUpdateOne) Mutation() *BookibusUserMutation {
	return buuo.mutation
}

// ClearProfile clears the "profile" edge to the User entity.
func (buuo *BookibusUserUpdateOne) ClearProfile() *BookibusUserUpdateOne {
	buuo.mutation.ClearProfile()
	return buuo
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (buuo *BookibusUserUpdateOne) ClearNotifications() *BookibusUserUpdateOne {
	buuo.mutation.ClearNotifications()
	return buuo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (buuo *BookibusUserUpdateOne) RemoveNotificationIDs(ids ...int) *BookibusUserUpdateOne {
	buuo.mutation.RemoveNotificationIDs(ids...)
	return buuo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (buuo *BookibusUserUpdateOne) RemoveNotifications(n ...*Notification) *BookibusUserUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return buuo.RemoveNotificationIDs(ids...)
}

// Where appends a list predicates to the BookibusUserUpdate builder.
func (buuo *BookibusUserUpdateOne) Where(ps ...predicate.BookibusUser) *BookibusUserUpdateOne {
	buuo.mutation.Where(ps...)
	return buuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buuo *BookibusUserUpdateOne) Select(field string, fields ...string) *BookibusUserUpdateOne {
	buuo.fields = append([]string{field}, fields...)
	return buuo
}

// Save executes the query and returns the updated BookibusUser entity.
func (buuo *BookibusUserUpdateOne) Save(ctx context.Context) (*BookibusUser, error) {
	buuo.defaults()
	return withHooks(ctx, buuo.sqlSave, buuo.mutation, buuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buuo *BookibusUserUpdateOne) SaveX(ctx context.Context) *BookibusUser {
	node, err := buuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buuo *BookibusUserUpdateOne) Exec(ctx context.Context) error {
	_, err := buuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buuo *BookibusUserUpdateOne) ExecX(ctx context.Context) {
	if err := buuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buuo *BookibusUserUpdateOne) defaults() {
	if _, ok := buuo.mutation.UpdatedAt(); !ok {
		v := bookibususer.UpdateDefaultUpdatedAt()
		buuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buuo *BookibusUserUpdateOne) check() error {
	if v, ok := buuo.mutation.LastName(); ok {
		if err := bookibususer.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "BookibusUser.last_name": %w`, err)}
		}
	}
	if v, ok := buuo.mutation.OtherName(); ok {
		if err := bookibususer.OtherNameValidator(v); err != nil {
			return &ValidationError{Name: "other_name", err: fmt.Errorf(`ent: validator failed for field "BookibusUser.other_name": %w`, err)}
		}
	}
	if v, ok := buuo.mutation.Phone(); ok {
		if err := bookibususer.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "BookibusUser.phone": %w`, err)}
		}
	}
	if v, ok := buuo.mutation.Role(); ok {
		if err := bookibususer.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "BookibusUser.role": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (buuo *BookibusUserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BookibusUserUpdateOne {
	buuo.modifiers = append(buuo.modifiers, modifiers...)
	return buuo
}

func (buuo *BookibusUserUpdateOne) sqlSave(ctx context.Context) (_node *BookibusUser, err error) {
	if err := buuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bookibususer.Table, bookibususer.Columns, sqlgraph.NewFieldSpec(bookibususer.FieldID, field.TypeInt))
	id, ok := buuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BookibusUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bookibususer.FieldID)
		for _, f := range fields {
			if !bookibususer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bookibususer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buuo.mutation.UpdatedAt(); ok {
		_spec.SetField(bookibususer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := buuo.mutation.LastName(); ok {
		_spec.SetField(bookibususer.FieldLastName, field.TypeString, value)
	}
	if value, ok := buuo.mutation.OtherName(); ok {
		_spec.SetField(bookibususer.FieldOtherName, field.TypeString, value)
	}
	if value, ok := buuo.mutation.Phone(); ok {
		_spec.SetField(bookibususer.FieldPhone, field.TypeString, value)
	}
	if value, ok := buuo.mutation.OtherPhone(); ok {
		_spec.SetField(bookibususer.FieldOtherPhone, field.TypeString, value)
	}
	if buuo.mutation.OtherPhoneCleared() {
		_spec.ClearField(bookibususer.FieldOtherPhone, field.TypeString)
	}
	if value, ok := buuo.mutation.Role(); ok {
		_spec.SetField(bookibususer.FieldRole, field.TypeEnum, value)
	}
	if buuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bookibususer.ProfileTable,
			Columns: []string{bookibususer.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buuo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bookibususer.ProfileTable,
			Columns: []string{bookibususer.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   bookibususer.NotificationsTable,
			Columns: bookibususer.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buuo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !buuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   bookibususer.NotificationsTable,
			Columns: bookibususer.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buuo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   bookibususer.NotificationsTable,
			Columns: bookibususer.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(buuo.modifiers...)
	_node = &BookibusUser{config: buuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookibususer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buuo.mutation.done = true
	return _node, nil
}
