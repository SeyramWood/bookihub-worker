// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/bookibus/ent/booking"
	"github.com/SeyramWood/bookibus/ent/company"
	"github.com/SeyramWood/bookibus/ent/parcel"
	"github.com/SeyramWood/bookibus/ent/predicate"
	"github.com/SeyramWood/bookibus/ent/transaction"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks     []Hook
	mutation  *TransactionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tu *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TransactionUpdate) SetUpdatedAt(t time.Time) *TransactionUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetReference sets the "reference" field.
func (tu *TransactionUpdate) SetReference(s string) *TransactionUpdate {
	tu.mutation.SetReference(s)
	return tu
}

// SetAmount sets the "amount" field.
func (tu *TransactionUpdate) SetAmount(f float64) *TransactionUpdate {
	tu.mutation.ResetAmount()
	tu.mutation.SetAmount(f)
	return tu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableAmount(f *float64) *TransactionUpdate {
	if f != nil {
		tu.SetAmount(*f)
	}
	return tu
}

// AddAmount adds f to the "amount" field.
func (tu *TransactionUpdate) AddAmount(f float64) *TransactionUpdate {
	tu.mutation.AddAmount(f)
	return tu
}

// SetVat sets the "vat" field.
func (tu *TransactionUpdate) SetVat(f float64) *TransactionUpdate {
	tu.mutation.ResetVat()
	tu.mutation.SetVat(f)
	return tu
}

// SetNillableVat sets the "vat" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableVat(f *float64) *TransactionUpdate {
	if f != nil {
		tu.SetVat(*f)
	}
	return tu
}

// AddVat adds f to the "vat" field.
func (tu *TransactionUpdate) AddVat(f float64) *TransactionUpdate {
	tu.mutation.AddVat(f)
	return tu
}

// SetTransactionFee sets the "transaction_fee" field.
func (tu *TransactionUpdate) SetTransactionFee(f float64) *TransactionUpdate {
	tu.mutation.ResetTransactionFee()
	tu.mutation.SetTransactionFee(f)
	return tu
}

// SetNillableTransactionFee sets the "transaction_fee" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTransactionFee(f *float64) *TransactionUpdate {
	if f != nil {
		tu.SetTransactionFee(*f)
	}
	return tu
}

// AddTransactionFee adds f to the "transaction_fee" field.
func (tu *TransactionUpdate) AddTransactionFee(f float64) *TransactionUpdate {
	tu.mutation.AddTransactionFee(f)
	return tu
}

// SetCancellationFee sets the "cancellation_fee" field.
func (tu *TransactionUpdate) SetCancellationFee(f float64) *TransactionUpdate {
	tu.mutation.ResetCancellationFee()
	tu.mutation.SetCancellationFee(f)
	return tu
}

// SetNillableCancellationFee sets the "cancellation_fee" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableCancellationFee(f *float64) *TransactionUpdate {
	if f != nil {
		tu.SetCancellationFee(*f)
	}
	return tu
}

// AddCancellationFee adds f to the "cancellation_fee" field.
func (tu *TransactionUpdate) AddCancellationFee(f float64) *TransactionUpdate {
	tu.mutation.AddCancellationFee(f)
	return tu
}

// SetPaidAt sets the "paid_at" field.
func (tu *TransactionUpdate) SetPaidAt(t time.Time) *TransactionUpdate {
	tu.mutation.SetPaidAt(t)
	return tu
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillablePaidAt(t *time.Time) *TransactionUpdate {
	if t != nil {
		tu.SetPaidAt(*t)
	}
	return tu
}

// ClearPaidAt clears the value of the "paid_at" field.
func (tu *TransactionUpdate) ClearPaidAt() *TransactionUpdate {
	tu.mutation.ClearPaidAt()
	return tu
}

// SetCanceledAt sets the "canceled_at" field.
func (tu *TransactionUpdate) SetCanceledAt(t time.Time) *TransactionUpdate {
	tu.mutation.SetCanceledAt(t)
	return tu
}

// SetNillableCanceledAt sets the "canceled_at" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableCanceledAt(t *time.Time) *TransactionUpdate {
	if t != nil {
		tu.SetCanceledAt(*t)
	}
	return tu
}

// ClearCanceledAt clears the value of the "canceled_at" field.
func (tu *TransactionUpdate) ClearCanceledAt() *TransactionUpdate {
	tu.mutation.ClearCanceledAt()
	return tu
}

// SetChannel sets the "channel" field.
func (tu *TransactionUpdate) SetChannel(t transaction.Channel) *TransactionUpdate {
	tu.mutation.SetChannel(t)
	return tu
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableChannel(t *transaction.Channel) *TransactionUpdate {
	if t != nil {
		tu.SetChannel(*t)
	}
	return tu
}

// SetTansKind sets the "tans_kind" field.
func (tu *TransactionUpdate) SetTansKind(tk transaction.TansKind) *TransactionUpdate {
	tu.mutation.SetTansKind(tk)
	return tu
}

// SetNillableTansKind sets the "tans_kind" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTansKind(tk *transaction.TansKind) *TransactionUpdate {
	if tk != nil {
		tu.SetTansKind(*tk)
	}
	return tu
}

// SetBookingID sets the "booking" edge to the Booking entity by ID.
func (tu *TransactionUpdate) SetBookingID(id int) *TransactionUpdate {
	tu.mutation.SetBookingID(id)
	return tu
}

// SetNillableBookingID sets the "booking" edge to the Booking entity by ID if the given value is not nil.
func (tu *TransactionUpdate) SetNillableBookingID(id *int) *TransactionUpdate {
	if id != nil {
		tu = tu.SetBookingID(*id)
	}
	return tu
}

// SetBooking sets the "booking" edge to the Booking entity.
func (tu *TransactionUpdate) SetBooking(b *Booking) *TransactionUpdate {
	return tu.SetBookingID(b.ID)
}

// SetParcelID sets the "parcel" edge to the Parcel entity by ID.
func (tu *TransactionUpdate) SetParcelID(id int) *TransactionUpdate {
	tu.mutation.SetParcelID(id)
	return tu
}

// SetNillableParcelID sets the "parcel" edge to the Parcel entity by ID if the given value is not nil.
func (tu *TransactionUpdate) SetNillableParcelID(id *int) *TransactionUpdate {
	if id != nil {
		tu = tu.SetParcelID(*id)
	}
	return tu
}

// SetParcel sets the "parcel" edge to the Parcel entity.
func (tu *TransactionUpdate) SetParcel(p *Parcel) *TransactionUpdate {
	return tu.SetParcelID(p.ID)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (tu *TransactionUpdate) SetCompanyID(id int) *TransactionUpdate {
	tu.mutation.SetCompanyID(id)
	return tu
}

// SetCompany sets the "company" edge to the Company entity.
func (tu *TransactionUpdate) SetCompany(c *Company) *TransactionUpdate {
	return tu.SetCompanyID(c.ID)
}

// Mutation returns the TransactionMutation object of the builder.
func (tu *TransactionUpdate) Mutation() *TransactionMutation {
	return tu.mutation
}

// ClearBooking clears the "booking" edge to the Booking entity.
func (tu *TransactionUpdate) ClearBooking() *TransactionUpdate {
	tu.mutation.ClearBooking()
	return tu
}

// ClearParcel clears the "parcel" edge to the Parcel entity.
func (tu *TransactionUpdate) ClearParcel() *TransactionUpdate {
	tu.mutation.ClearParcel()
	return tu
}

// ClearCompany clears the "company" edge to the Company entity.
func (tu *TransactionUpdate) ClearCompany() *TransactionUpdate {
	tu.mutation.ClearCompany()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TransactionUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := transaction.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TransactionUpdate) check() error {
	if v, ok := tu.mutation.Reference(); ok {
		if err := transaction.ReferenceValidator(v); err != nil {
			return &ValidationError{Name: "reference", err: fmt.Errorf(`ent: validator failed for field "Transaction.reference": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Channel(); ok {
		if err := transaction.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`ent: validator failed for field "Transaction.channel": %w`, err)}
		}
	}
	if v, ok := tu.mutation.TansKind(); ok {
		if err := transaction.TansKindValidator(v); err != nil {
			return &ValidationError{Name: "tans_kind", err: fmt.Errorf(`ent: validator failed for field "Transaction.tans_kind": %w`, err)}
		}
	}
	if _, ok := tu.mutation.CompanyID(); tu.mutation.CompanyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Transaction.company"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TransactionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TransactionUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Reference(); ok {
		_spec.SetField(transaction.FieldReference, field.TypeString, value)
	}
	if value, ok := tu.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedAmount(); ok {
		_spec.AddField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.Vat(); ok {
		_spec.SetField(transaction.FieldVat, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedVat(); ok {
		_spec.AddField(transaction.FieldVat, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.TransactionFee(); ok {
		_spec.SetField(transaction.FieldTransactionFee, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedTransactionFee(); ok {
		_spec.AddField(transaction.FieldTransactionFee, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.CancellationFee(); ok {
		_spec.SetField(transaction.FieldCancellationFee, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedCancellationFee(); ok {
		_spec.AddField(transaction.FieldCancellationFee, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.PaidAt(); ok {
		_spec.SetField(transaction.FieldPaidAt, field.TypeTime, value)
	}
	if tu.mutation.PaidAtCleared() {
		_spec.ClearField(transaction.FieldPaidAt, field.TypeTime)
	}
	if value, ok := tu.mutation.CanceledAt(); ok {
		_spec.SetField(transaction.FieldCanceledAt, field.TypeTime, value)
	}
	if tu.mutation.CanceledAtCleared() {
		_spec.ClearField(transaction.FieldCanceledAt, field.TypeTime)
	}
	if value, ok := tu.mutation.Channel(); ok {
		_spec.SetField(transaction.FieldChannel, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.TansKind(); ok {
		_spec.SetField(transaction.FieldTansKind, field.TypeEnum, value)
	}
	if tu.mutation.BookingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transaction.BookingTable,
			Columns: []string{transaction.BookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.BookingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transaction.BookingTable,
			Columns: []string{transaction.BookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ParcelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transaction.ParcelTable,
			Columns: []string{transaction.ParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transaction.ParcelTable,
			Columns: []string{transaction.ParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.CompanyTable,
			Columns: []string{transaction.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.CompanyTable,
			Columns: []string{transaction.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TransactionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TransactionUpdateOne) SetUpdatedAt(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetReference sets the "reference" field.
func (tuo *TransactionUpdateOne) SetReference(s string) *TransactionUpdateOne {
	tuo.mutation.SetReference(s)
	return tuo
}

// SetAmount sets the "amount" field.
func (tuo *TransactionUpdateOne) SetAmount(f float64) *TransactionUpdateOne {
	tuo.mutation.ResetAmount()
	tuo.mutation.SetAmount(f)
	return tuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableAmount(f *float64) *TransactionUpdateOne {
	if f != nil {
		tuo.SetAmount(*f)
	}
	return tuo
}

// AddAmount adds f to the "amount" field.
func (tuo *TransactionUpdateOne) AddAmount(f float64) *TransactionUpdateOne {
	tuo.mutation.AddAmount(f)
	return tuo
}

// SetVat sets the "vat" field.
func (tuo *TransactionUpdateOne) SetVat(f float64) *TransactionUpdateOne {
	tuo.mutation.ResetVat()
	tuo.mutation.SetVat(f)
	return tuo
}

// SetNillableVat sets the "vat" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableVat(f *float64) *TransactionUpdateOne {
	if f != nil {
		tuo.SetVat(*f)
	}
	return tuo
}

// AddVat adds f to the "vat" field.
func (tuo *TransactionUpdateOne) AddVat(f float64) *TransactionUpdateOne {
	tuo.mutation.AddVat(f)
	return tuo
}

// SetTransactionFee sets the "transaction_fee" field.
func (tuo *TransactionUpdateOne) SetTransactionFee(f float64) *TransactionUpdateOne {
	tuo.mutation.ResetTransactionFee()
	tuo.mutation.SetTransactionFee(f)
	return tuo
}

// SetNillableTransactionFee sets the "transaction_fee" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTransactionFee(f *float64) *TransactionUpdateOne {
	if f != nil {
		tuo.SetTransactionFee(*f)
	}
	return tuo
}

// AddTransactionFee adds f to the "transaction_fee" field.
func (tuo *TransactionUpdateOne) AddTransactionFee(f float64) *TransactionUpdateOne {
	tuo.mutation.AddTransactionFee(f)
	return tuo
}

// SetCancellationFee sets the "cancellation_fee" field.
func (tuo *TransactionUpdateOne) SetCancellationFee(f float64) *TransactionUpdateOne {
	tuo.mutation.ResetCancellationFee()
	tuo.mutation.SetCancellationFee(f)
	return tuo
}

// SetNillableCancellationFee sets the "cancellation_fee" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableCancellationFee(f *float64) *TransactionUpdateOne {
	if f != nil {
		tuo.SetCancellationFee(*f)
	}
	return tuo
}

// AddCancellationFee adds f to the "cancellation_fee" field.
func (tuo *TransactionUpdateOne) AddCancellationFee(f float64) *TransactionUpdateOne {
	tuo.mutation.AddCancellationFee(f)
	return tuo
}

// SetPaidAt sets the "paid_at" field.
func (tuo *TransactionUpdateOne) SetPaidAt(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetPaidAt(t)
	return tuo
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillablePaidAt(t *time.Time) *TransactionUpdateOne {
	if t != nil {
		tuo.SetPaidAt(*t)
	}
	return tuo
}

// ClearPaidAt clears the value of the "paid_at" field.
func (tuo *TransactionUpdateOne) ClearPaidAt() *TransactionUpdateOne {
	tuo.mutation.ClearPaidAt()
	return tuo
}

// SetCanceledAt sets the "canceled_at" field.
func (tuo *TransactionUpdateOne) SetCanceledAt(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetCanceledAt(t)
	return tuo
}

// SetNillableCanceledAt sets the "canceled_at" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableCanceledAt(t *time.Time) *TransactionUpdateOne {
	if t != nil {
		tuo.SetCanceledAt(*t)
	}
	return tuo
}

// ClearCanceledAt clears the value of the "canceled_at" field.
func (tuo *TransactionUpdateOne) ClearCanceledAt() *TransactionUpdateOne {
	tuo.mutation.ClearCanceledAt()
	return tuo
}

// SetChannel sets the "channel" field.
func (tuo *TransactionUpdateOne) SetChannel(t transaction.Channel) *TransactionUpdateOne {
	tuo.mutation.SetChannel(t)
	return tuo
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableChannel(t *transaction.Channel) *TransactionUpdateOne {
	if t != nil {
		tuo.SetChannel(*t)
	}
	return tuo
}

// SetTansKind sets the "tans_kind" field.
func (tuo *TransactionUpdateOne) SetTansKind(tk transaction.TansKind) *TransactionUpdateOne {
	tuo.mutation.SetTansKind(tk)
	return tuo
}

// SetNillableTansKind sets the "tans_kind" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTansKind(tk *transaction.TansKind) *TransactionUpdateOne {
	if tk != nil {
		tuo.SetTansKind(*tk)
	}
	return tuo
}

// SetBookingID sets the "booking" edge to the Booking entity by ID.
func (tuo *TransactionUpdateOne) SetBookingID(id int) *TransactionUpdateOne {
	tuo.mutation.SetBookingID(id)
	return tuo
}

// SetNillableBookingID sets the "booking" edge to the Booking entity by ID if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableBookingID(id *int) *TransactionUpdateOne {
	if id != nil {
		tuo = tuo.SetBookingID(*id)
	}
	return tuo
}

// SetBooking sets the "booking" edge to the Booking entity.
func (tuo *TransactionUpdateOne) SetBooking(b *Booking) *TransactionUpdateOne {
	return tuo.SetBookingID(b.ID)
}

// SetParcelID sets the "parcel" edge to the Parcel entity by ID.
func (tuo *TransactionUpdateOne) SetParcelID(id int) *TransactionUpdateOne {
	tuo.mutation.SetParcelID(id)
	return tuo
}

// SetNillableParcelID sets the "parcel" edge to the Parcel entity by ID if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableParcelID(id *int) *TransactionUpdateOne {
	if id != nil {
		tuo = tuo.SetParcelID(*id)
	}
	return tuo
}

// SetParcel sets the "parcel" edge to the Parcel entity.
func (tuo *TransactionUpdateOne) SetParcel(p *Parcel) *TransactionUpdateOne {
	return tuo.SetParcelID(p.ID)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (tuo *TransactionUpdateOne) SetCompanyID(id int) *TransactionUpdateOne {
	tuo.mutation.SetCompanyID(id)
	return tuo
}

// SetCompany sets the "company" edge to the Company entity.
func (tuo *TransactionUpdateOne) SetCompany(c *Company) *TransactionUpdateOne {
	return tuo.SetCompanyID(c.ID)
}

// Mutation returns the TransactionMutation object of the builder.
func (tuo *TransactionUpdateOne) Mutation() *TransactionMutation {
	return tuo.mutation
}

// ClearBooking clears the "booking" edge to the Booking entity.
func (tuo *TransactionUpdateOne) ClearBooking() *TransactionUpdateOne {
	tuo.mutation.ClearBooking()
	return tuo
}

// ClearParcel clears the "parcel" edge to the Parcel entity.
func (tuo *TransactionUpdateOne) ClearParcel() *TransactionUpdateOne {
	tuo.mutation.ClearParcel()
	return tuo
}

// ClearCompany clears the "company" edge to the Company entity.
func (tuo *TransactionUpdateOne) ClearCompany() *TransactionUpdateOne {
	tuo.mutation.ClearCompany()
	return tuo
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tuo *TransactionUpdateOne) Where(ps ...predicate.Transaction) *TransactionUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transaction entity.
func (tuo *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TransactionUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := transaction.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TransactionUpdateOne) check() error {
	if v, ok := tuo.mutation.Reference(); ok {
		if err := transaction.ReferenceValidator(v); err != nil {
			return &ValidationError{Name: "reference", err: fmt.Errorf(`ent: validator failed for field "Transaction.reference": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Channel(); ok {
		if err := transaction.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`ent: validator failed for field "Transaction.channel": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.TansKind(); ok {
		if err := transaction.TansKindValidator(v); err != nil {
			return &ValidationError{Name: "tans_kind", err: fmt.Errorf(`ent: validator failed for field "Transaction.tans_kind": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.CompanyID(); tuo.mutation.CompanyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Transaction.company"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TransactionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TransactionUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Reference(); ok {
		_spec.SetField(transaction.FieldReference, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedAmount(); ok {
		_spec.AddField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.Vat(); ok {
		_spec.SetField(transaction.FieldVat, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedVat(); ok {
		_spec.AddField(transaction.FieldVat, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.TransactionFee(); ok {
		_spec.SetField(transaction.FieldTransactionFee, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedTransactionFee(); ok {
		_spec.AddField(transaction.FieldTransactionFee, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.CancellationFee(); ok {
		_spec.SetField(transaction.FieldCancellationFee, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedCancellationFee(); ok {
		_spec.AddField(transaction.FieldCancellationFee, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.PaidAt(); ok {
		_spec.SetField(transaction.FieldPaidAt, field.TypeTime, value)
	}
	if tuo.mutation.PaidAtCleared() {
		_spec.ClearField(transaction.FieldPaidAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.CanceledAt(); ok {
		_spec.SetField(transaction.FieldCanceledAt, field.TypeTime, value)
	}
	if tuo.mutation.CanceledAtCleared() {
		_spec.ClearField(transaction.FieldCanceledAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.Channel(); ok {
		_spec.SetField(transaction.FieldChannel, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.TansKind(); ok {
		_spec.SetField(transaction.FieldTansKind, field.TypeEnum, value)
	}
	if tuo.mutation.BookingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transaction.BookingTable,
			Columns: []string{transaction.BookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.BookingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transaction.BookingTable,
			Columns: []string{transaction.BookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ParcelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transaction.ParcelTable,
			Columns: []string{transaction.ParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transaction.ParcelTable,
			Columns: []string{transaction.ParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.CompanyTable,
			Columns: []string{transaction.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.CompanyTable,
			Columns: []string{transaction.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Transaction{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
