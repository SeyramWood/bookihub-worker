// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/bookibus/ent/company"
	"github.com/SeyramWood/bookibus/ent/companyuser"
	"github.com/SeyramWood/bookibus/ent/parcel"
	"github.com/SeyramWood/bookibus/ent/trip"
)

// Parcel is the model entity for the Parcel schema.
type Parcel struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ParcelCode holds the value of the "parcel_code" field.
	ParcelCode string `json:"parcel_code,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// SenderName holds the value of the "sender_name" field.
	SenderName string `json:"sender_name,omitempty"`
	// SenderPhone holds the value of the "sender_phone" field.
	SenderPhone string `json:"sender_phone,omitempty"`
	// SenderEmail holds the value of the "sender_email" field.
	SenderEmail string `json:"sender_email,omitempty"`
	// RecipientName holds the value of the "recipient_name" field.
	RecipientName string `json:"recipient_name,omitempty"`
	// RecipientPhone holds the value of the "recipient_phone" field.
	RecipientPhone string `json:"recipient_phone,omitempty"`
	// RecipientLocation holds the value of the "recipient_location" field.
	RecipientLocation string `json:"recipient_location,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight float32 `json:"weight,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// PaidAt holds the value of the "paid_at" field.
	PaidAt time.Time `json:"paid_at,omitempty"`
	// TansType holds the value of the "tans_type" field.
	TansType parcel.TansType `json:"tans_type,omitempty"`
	// Status holds the value of the "status" field.
	Status parcel.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ParcelQuery when eager-loading is set.
	Edges                ParcelEdges `json:"edges"`
	company_parcels      *int
	company_user_parcels *int
	trip_parcels         *int
	selectValues         sql.SelectValues
}

// ParcelEdges holds the relations/edges for other nodes in the graph.
type ParcelEdges struct {
	// Images holds the value of the images edge.
	Images []*ParcelImage `json:"images,omitempty"`
	// Trip holds the value of the trip edge.
	Trip *Trip `json:"trip,omitempty"`
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// Driver holds the value of the driver edge.
	Driver *CompanyUser `json:"driver,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ImagesOrErr returns the Images value or an error if the edge
// was not loaded in eager-loading.
func (e ParcelEdges) ImagesOrErr() ([]*ParcelImage, error) {
	if e.loadedTypes[0] {
		return e.Images, nil
	}
	return nil, &NotLoadedError{edge: "images"}
}

// TripOrErr returns the Trip value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParcelEdges) TripOrErr() (*Trip, error) {
	if e.loadedTypes[1] {
		if e.Trip == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: trip.Label}
		}
		return e.Trip, nil
	}
	return nil, &NotLoadedError{edge: "trip"}
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParcelEdges) CompanyOrErr() (*Company, error) {
	if e.loadedTypes[2] {
		if e.Company == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: company.Label}
		}
		return e.Company, nil
	}
	return nil, &NotLoadedError{edge: "company"}
}

// DriverOrErr returns the Driver value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParcelEdges) DriverOrErr() (*CompanyUser, error) {
	if e.loadedTypes[3] {
		if e.Driver == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: companyuser.Label}
		}
		return e.Driver, nil
	}
	return nil, &NotLoadedError{edge: "driver"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Parcel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case parcel.FieldWeight, parcel.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case parcel.FieldID:
			values[i] = new(sql.NullInt64)
		case parcel.FieldParcelCode, parcel.FieldType, parcel.FieldSenderName, parcel.FieldSenderPhone, parcel.FieldSenderEmail, parcel.FieldRecipientName, parcel.FieldRecipientPhone, parcel.FieldRecipientLocation, parcel.FieldTansType, parcel.FieldStatus:
			values[i] = new(sql.NullString)
		case parcel.FieldCreatedAt, parcel.FieldUpdatedAt, parcel.FieldPaidAt:
			values[i] = new(sql.NullTime)
		case parcel.ForeignKeys[0]: // company_parcels
			values[i] = new(sql.NullInt64)
		case parcel.ForeignKeys[1]: // company_user_parcels
			values[i] = new(sql.NullInt64)
		case parcel.ForeignKeys[2]: // trip_parcels
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Parcel fields.
func (pa *Parcel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case parcel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case parcel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case parcel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		case parcel.FieldParcelCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parcel_code", values[i])
			} else if value.Valid {
				pa.ParcelCode = value.String
			}
		case parcel.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pa.Type = value.String
			}
		case parcel.FieldSenderName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sender_name", values[i])
			} else if value.Valid {
				pa.SenderName = value.String
			}
		case parcel.FieldSenderPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sender_phone", values[i])
			} else if value.Valid {
				pa.SenderPhone = value.String
			}
		case parcel.FieldSenderEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sender_email", values[i])
			} else if value.Valid {
				pa.SenderEmail = value.String
			}
		case parcel.FieldRecipientName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recipient_name", values[i])
			} else if value.Valid {
				pa.RecipientName = value.String
			}
		case parcel.FieldRecipientPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recipient_phone", values[i])
			} else if value.Valid {
				pa.RecipientPhone = value.String
			}
		case parcel.FieldRecipientLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recipient_location", values[i])
			} else if value.Valid {
				pa.RecipientLocation = value.String
			}
		case parcel.FieldWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				pa.Weight = float32(value.Float64)
			}
		case parcel.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				pa.Amount = value.Float64
			}
		case parcel.FieldPaidAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field paid_at", values[i])
			} else if value.Valid {
				pa.PaidAt = value.Time
			}
		case parcel.FieldTansType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tans_type", values[i])
			} else if value.Valid {
				pa.TansType = parcel.TansType(value.String)
			}
		case parcel.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pa.Status = parcel.Status(value.String)
			}
		case parcel.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_parcels", value)
			} else if value.Valid {
				pa.company_parcels = new(int)
				*pa.company_parcels = int(value.Int64)
			}
		case parcel.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_user_parcels", value)
			} else if value.Valid {
				pa.company_user_parcels = new(int)
				*pa.company_user_parcels = int(value.Int64)
			}
		case parcel.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field trip_parcels", value)
			} else if value.Valid {
				pa.trip_parcels = new(int)
				*pa.trip_parcels = int(value.Int64)
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Parcel.
// This includes values selected through modifiers, order, etc.
func (pa *Parcel) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryImages queries the "images" edge of the Parcel entity.
func (pa *Parcel) QueryImages() *ParcelImageQuery {
	return NewParcelClient(pa.config).QueryImages(pa)
}

// QueryTrip queries the "trip" edge of the Parcel entity.
func (pa *Parcel) QueryTrip() *TripQuery {
	return NewParcelClient(pa.config).QueryTrip(pa)
}

// QueryCompany queries the "company" edge of the Parcel entity.
func (pa *Parcel) QueryCompany() *CompanyQuery {
	return NewParcelClient(pa.config).QueryCompany(pa)
}

// QueryDriver queries the "driver" edge of the Parcel entity.
func (pa *Parcel) QueryDriver() *CompanyUserQuery {
	return NewParcelClient(pa.config).QueryDriver(pa)
}

// Update returns a builder for updating this Parcel.
// Note that you need to call Parcel.Unwrap() before calling this method if this Parcel
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Parcel) Update() *ParcelUpdateOne {
	return NewParcelClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Parcel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Parcel) Unwrap() *Parcel {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Parcel is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Parcel) String() string {
	var builder strings.Builder
	builder.WriteString("Parcel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("parcel_code=")
	builder.WriteString(pa.ParcelCode)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(pa.Type)
	builder.WriteString(", ")
	builder.WriteString("sender_name=")
	builder.WriteString(pa.SenderName)
	builder.WriteString(", ")
	builder.WriteString("sender_phone=")
	builder.WriteString(pa.SenderPhone)
	builder.WriteString(", ")
	builder.WriteString("sender_email=")
	builder.WriteString(pa.SenderEmail)
	builder.WriteString(", ")
	builder.WriteString("recipient_name=")
	builder.WriteString(pa.RecipientName)
	builder.WriteString(", ")
	builder.WriteString("recipient_phone=")
	builder.WriteString(pa.RecipientPhone)
	builder.WriteString(", ")
	builder.WriteString("recipient_location=")
	builder.WriteString(pa.RecipientLocation)
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", pa.Weight))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", pa.Amount))
	builder.WriteString(", ")
	builder.WriteString("paid_at=")
	builder.WriteString(pa.PaidAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tans_type=")
	builder.WriteString(fmt.Sprintf("%v", pa.TansType))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pa.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Parcels is a parsable slice of Parcel.
type Parcels []*Parcel
