// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/incident"
	"github.com/SeyramWood/ent/incidentimage"
	"github.com/SeyramWood/ent/predicate"
)

// IncidentImageQuery is the builder for querying IncidentImage entities.
type IncidentImageQuery struct {
	config
	ctx          *QueryContext
	order        []incidentimage.OrderOption
	inters       []Interceptor
	predicates   []predicate.IncidentImage
	withIncident *IncidentQuery
	withFKs      bool
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IncidentImageQuery builder.
func (iiq *IncidentImageQuery) Where(ps ...predicate.IncidentImage) *IncidentImageQuery {
	iiq.predicates = append(iiq.predicates, ps...)
	return iiq
}

// Limit the number of records to be returned by this query.
func (iiq *IncidentImageQuery) Limit(limit int) *IncidentImageQuery {
	iiq.ctx.Limit = &limit
	return iiq
}

// Offset to start from.
func (iiq *IncidentImageQuery) Offset(offset int) *IncidentImageQuery {
	iiq.ctx.Offset = &offset
	return iiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (iiq *IncidentImageQuery) Unique(unique bool) *IncidentImageQuery {
	iiq.ctx.Unique = &unique
	return iiq
}

// Order specifies how the records should be ordered.
func (iiq *IncidentImageQuery) Order(o ...incidentimage.OrderOption) *IncidentImageQuery {
	iiq.order = append(iiq.order, o...)
	return iiq
}

// QueryIncident chains the current query on the "incident" edge.
func (iiq *IncidentImageQuery) QueryIncident() *IncidentQuery {
	query := (&IncidentClient{config: iiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incidentimage.Table, incidentimage.FieldID, selector),
			sqlgraph.To(incident.Table, incident.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, incidentimage.IncidentTable, incidentimage.IncidentColumn),
		)
		fromU = sqlgraph.SetNeighbors(iiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IncidentImage entity from the query.
// Returns a *NotFoundError when no IncidentImage was found.
func (iiq *IncidentImageQuery) First(ctx context.Context) (*IncidentImage, error) {
	nodes, err := iiq.Limit(1).All(setContextOp(ctx, iiq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{incidentimage.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (iiq *IncidentImageQuery) FirstX(ctx context.Context) *IncidentImage {
	node, err := iiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IncidentImage ID from the query.
// Returns a *NotFoundError when no IncidentImage ID was found.
func (iiq *IncidentImageQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = iiq.Limit(1).IDs(setContextOp(ctx, iiq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{incidentimage.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (iiq *IncidentImageQuery) FirstIDX(ctx context.Context) int {
	id, err := iiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IncidentImage entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IncidentImage entity is found.
// Returns a *NotFoundError when no IncidentImage entities are found.
func (iiq *IncidentImageQuery) Only(ctx context.Context) (*IncidentImage, error) {
	nodes, err := iiq.Limit(2).All(setContextOp(ctx, iiq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{incidentimage.Label}
	default:
		return nil, &NotSingularError{incidentimage.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (iiq *IncidentImageQuery) OnlyX(ctx context.Context) *IncidentImage {
	node, err := iiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IncidentImage ID in the query.
// Returns a *NotSingularError when more than one IncidentImage ID is found.
// Returns a *NotFoundError when no entities are found.
func (iiq *IncidentImageQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = iiq.Limit(2).IDs(setContextOp(ctx, iiq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{incidentimage.Label}
	default:
		err = &NotSingularError{incidentimage.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (iiq *IncidentImageQuery) OnlyIDX(ctx context.Context) int {
	id, err := iiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IncidentImages.
func (iiq *IncidentImageQuery) All(ctx context.Context) ([]*IncidentImage, error) {
	ctx = setContextOp(ctx, iiq.ctx, "All")
	if err := iiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*IncidentImage, *IncidentImageQuery]()
	return withInterceptors[[]*IncidentImage](ctx, iiq, qr, iiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (iiq *IncidentImageQuery) AllX(ctx context.Context) []*IncidentImage {
	nodes, err := iiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IncidentImage IDs.
func (iiq *IncidentImageQuery) IDs(ctx context.Context) (ids []int, err error) {
	if iiq.ctx.Unique == nil && iiq.path != nil {
		iiq.Unique(true)
	}
	ctx = setContextOp(ctx, iiq.ctx, "IDs")
	if err = iiq.Select(incidentimage.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (iiq *IncidentImageQuery) IDsX(ctx context.Context) []int {
	ids, err := iiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (iiq *IncidentImageQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, iiq.ctx, "Count")
	if err := iiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, iiq, querierCount[*IncidentImageQuery](), iiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (iiq *IncidentImageQuery) CountX(ctx context.Context) int {
	count, err := iiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (iiq *IncidentImageQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, iiq.ctx, "Exist")
	switch _, err := iiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (iiq *IncidentImageQuery) ExistX(ctx context.Context) bool {
	exist, err := iiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IncidentImageQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (iiq *IncidentImageQuery) Clone() *IncidentImageQuery {
	if iiq == nil {
		return nil
	}
	return &IncidentImageQuery{
		config:       iiq.config,
		ctx:          iiq.ctx.Clone(),
		order:        append([]incidentimage.OrderOption{}, iiq.order...),
		inters:       append([]Interceptor{}, iiq.inters...),
		predicates:   append([]predicate.IncidentImage{}, iiq.predicates...),
		withIncident: iiq.withIncident.Clone(),
		// clone intermediate query.
		sql:  iiq.sql.Clone(),
		path: iiq.path,
	}
}

// WithIncident tells the query-builder to eager-load the nodes that are connected to
// the "incident" edge. The optional arguments are used to configure the query builder of the edge.
func (iiq *IncidentImageQuery) WithIncident(opts ...func(*IncidentQuery)) *IncidentImageQuery {
	query := (&IncidentClient{config: iiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iiq.withIncident = query
	return iiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IncidentImage.Query().
//		GroupBy(incidentimage.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (iiq *IncidentImageQuery) GroupBy(field string, fields ...string) *IncidentImageGroupBy {
	iiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IncidentImageGroupBy{build: iiq}
	grbuild.flds = &iiq.ctx.Fields
	grbuild.label = incidentimage.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.IncidentImage.Query().
//		Select(incidentimage.FieldCreatedAt).
//		Scan(ctx, &v)
func (iiq *IncidentImageQuery) Select(fields ...string) *IncidentImageSelect {
	iiq.ctx.Fields = append(iiq.ctx.Fields, fields...)
	sbuild := &IncidentImageSelect{IncidentImageQuery: iiq}
	sbuild.label = incidentimage.Label
	sbuild.flds, sbuild.scan = &iiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IncidentImageSelect configured with the given aggregations.
func (iiq *IncidentImageQuery) Aggregate(fns ...AggregateFunc) *IncidentImageSelect {
	return iiq.Select().Aggregate(fns...)
}

func (iiq *IncidentImageQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range iiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, iiq); err != nil {
				return err
			}
		}
	}
	for _, f := range iiq.ctx.Fields {
		if !incidentimage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if iiq.path != nil {
		prev, err := iiq.path(ctx)
		if err != nil {
			return err
		}
		iiq.sql = prev
	}
	return nil
}

func (iiq *IncidentImageQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IncidentImage, error) {
	var (
		nodes       = []*IncidentImage{}
		withFKs     = iiq.withFKs
		_spec       = iiq.querySpec()
		loadedTypes = [1]bool{
			iiq.withIncident != nil,
		}
	)
	if iiq.withIncident != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, incidentimage.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*IncidentImage).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &IncidentImage{config: iiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(iiq.modifiers) > 0 {
		_spec.Modifiers = iiq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, iiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := iiq.withIncident; query != nil {
		if err := iiq.loadIncident(ctx, query, nodes, nil,
			func(n *IncidentImage, e *Incident) { n.Edges.Incident = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (iiq *IncidentImageQuery) loadIncident(ctx context.Context, query *IncidentQuery, nodes []*IncidentImage, init func(*IncidentImage), assign func(*IncidentImage, *Incident)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*IncidentImage)
	for i := range nodes {
		if nodes[i].incident_images == nil {
			continue
		}
		fk := *nodes[i].incident_images
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(incident.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "incident_images" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (iiq *IncidentImageQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := iiq.querySpec()
	if len(iiq.modifiers) > 0 {
		_spec.Modifiers = iiq.modifiers
	}
	_spec.Node.Columns = iiq.ctx.Fields
	if len(iiq.ctx.Fields) > 0 {
		_spec.Unique = iiq.ctx.Unique != nil && *iiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, iiq.driver, _spec)
}

func (iiq *IncidentImageQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(incidentimage.Table, incidentimage.Columns, sqlgraph.NewFieldSpec(incidentimage.FieldID, field.TypeInt))
	_spec.From = iiq.sql
	if unique := iiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if iiq.path != nil {
		_spec.Unique = true
	}
	if fields := iiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidentimage.FieldID)
		for i := range fields {
			if fields[i] != incidentimage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := iiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := iiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := iiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := iiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (iiq *IncidentImageQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(iiq.driver.Dialect())
	t1 := builder.Table(incidentimage.Table)
	columns := iiq.ctx.Fields
	if len(columns) == 0 {
		columns = incidentimage.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if iiq.sql != nil {
		selector = iiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if iiq.ctx.Unique != nil && *iiq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range iiq.modifiers {
		m(selector)
	}
	for _, p := range iiq.predicates {
		p(selector)
	}
	for _, p := range iiq.order {
		p(selector)
	}
	if offset := iiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := iiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (iiq *IncidentImageQuery) Modify(modifiers ...func(s *sql.Selector)) *IncidentImageSelect {
	iiq.modifiers = append(iiq.modifiers, modifiers...)
	return iiq.Select()
}

// IncidentImageGroupBy is the group-by builder for IncidentImage entities.
type IncidentImageGroupBy struct {
	selector
	build *IncidentImageQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (iigb *IncidentImageGroupBy) Aggregate(fns ...AggregateFunc) *IncidentImageGroupBy {
	iigb.fns = append(iigb.fns, fns...)
	return iigb
}

// Scan applies the selector query and scans the result into the given value.
func (iigb *IncidentImageGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, iigb.build.ctx, "GroupBy")
	if err := iigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IncidentImageQuery, *IncidentImageGroupBy](ctx, iigb.build, iigb, iigb.build.inters, v)
}

func (iigb *IncidentImageGroupBy) sqlScan(ctx context.Context, root *IncidentImageQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(iigb.fns))
	for _, fn := range iigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*iigb.flds)+len(iigb.fns))
		for _, f := range *iigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*iigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IncidentImageSelect is the builder for selecting fields of IncidentImage entities.
type IncidentImageSelect struct {
	*IncidentImageQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (iis *IncidentImageSelect) Aggregate(fns ...AggregateFunc) *IncidentImageSelect {
	iis.fns = append(iis.fns, fns...)
	return iis
}

// Scan applies the selector query and scans the result into the given value.
func (iis *IncidentImageSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, iis.ctx, "Select")
	if err := iis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IncidentImageQuery, *IncidentImageSelect](ctx, iis.IncidentImageQuery, iis, iis.inters, v)
}

func (iis *IncidentImageSelect) sqlScan(ctx context.Context, root *IncidentImageQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(iis.fns))
	for _, fn := range iis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*iis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (iis *IncidentImageSelect) Modify(modifiers ...func(s *sql.Selector)) *IncidentImageSelect {
	iis.modifiers = append(iis.modifiers, modifiers...)
	return iis
}
