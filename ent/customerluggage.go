// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/bookibus/ent/booking"
	"github.com/SeyramWood/bookibus/ent/customerluggage"
)

// CustomerLuggage is the model entity for the CustomerLuggage schema.
type CustomerLuggage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Baggage holds the value of the "baggage" field.
	Baggage customerluggage.Baggage `json:"baggage,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomerLuggageQuery when eager-loading is set.
	Edges            CustomerLuggageEdges `json:"edges"`
	booking_luggages *int
	selectValues     sql.SelectValues
}

// CustomerLuggageEdges holds the relations/edges for other nodes in the graph.
type CustomerLuggageEdges struct {
	// Booking holds the value of the booking edge.
	Booking *Booking `json:"booking,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BookingOrErr returns the Booking value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerLuggageEdges) BookingOrErr() (*Booking, error) {
	if e.loadedTypes[0] {
		if e.Booking == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: booking.Label}
		}
		return e.Booking, nil
	}
	return nil, &NotLoadedError{edge: "booking"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomerLuggage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customerluggage.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case customerluggage.FieldID, customerluggage.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case customerluggage.FieldBaggage:
			values[i] = new(sql.NullString)
		case customerluggage.FieldCreatedAt, customerluggage.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case customerluggage.ForeignKeys[0]: // booking_luggages
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomerLuggage fields.
func (cl *CustomerLuggage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customerluggage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cl.ID = int(value.Int64)
		case customerluggage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cl.CreatedAt = value.Time
			}
		case customerluggage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cl.UpdatedAt = value.Time
			}
		case customerluggage.FieldBaggage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field baggage", values[i])
			} else if value.Valid {
				cl.Baggage = customerluggage.Baggage(value.String)
			}
		case customerluggage.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				cl.Quantity = int(value.Int64)
			}
		case customerluggage.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				cl.Amount = value.Float64
			}
		case customerluggage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field booking_luggages", value)
			} else if value.Valid {
				cl.booking_luggages = new(int)
				*cl.booking_luggages = int(value.Int64)
			}
		default:
			cl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CustomerLuggage.
// This includes values selected through modifiers, order, etc.
func (cl *CustomerLuggage) Value(name string) (ent.Value, error) {
	return cl.selectValues.Get(name)
}

// QueryBooking queries the "booking" edge of the CustomerLuggage entity.
func (cl *CustomerLuggage) QueryBooking() *BookingQuery {
	return NewCustomerLuggageClient(cl.config).QueryBooking(cl)
}

// Update returns a builder for updating this CustomerLuggage.
// Note that you need to call CustomerLuggage.Unwrap() before calling this method if this CustomerLuggage
// was returned from a transaction, and the transaction was committed or rolled back.
func (cl *CustomerLuggage) Update() *CustomerLuggageUpdateOne {
	return NewCustomerLuggageClient(cl.config).UpdateOne(cl)
}

// Unwrap unwraps the CustomerLuggage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cl *CustomerLuggage) Unwrap() *CustomerLuggage {
	_tx, ok := cl.config.driver.(*txDriver)
	if !ok {
		panic("ent: CustomerLuggage is not a transactional entity")
	}
	cl.config.driver = _tx.drv
	return cl
}

// String implements the fmt.Stringer.
func (cl *CustomerLuggage) String() string {
	var builder strings.Builder
	builder.WriteString("CustomerLuggage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("baggage=")
	builder.WriteString(fmt.Sprintf("%v", cl.Baggage))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", cl.Quantity))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", cl.Amount))
	builder.WriteByte(')')
	return builder.String()
}

// CustomerLuggages is a parsable slice of CustomerLuggage.
type CustomerLuggages []*CustomerLuggage
