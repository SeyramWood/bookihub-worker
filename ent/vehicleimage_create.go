// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/vehicle"
	"github.com/SeyramWood/ent/vehicleimage"
)

// VehicleImageCreate is the builder for creating a VehicleImage entity.
type VehicleImageCreate struct {
	config
	mutation *VehicleImageMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (vic *VehicleImageCreate) SetCreatedAt(t time.Time) *VehicleImageCreate {
	vic.mutation.SetCreatedAt(t)
	return vic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vic *VehicleImageCreate) SetNillableCreatedAt(t *time.Time) *VehicleImageCreate {
	if t != nil {
		vic.SetCreatedAt(*t)
	}
	return vic
}

// SetUpdatedAt sets the "updated_at" field.
func (vic *VehicleImageCreate) SetUpdatedAt(t time.Time) *VehicleImageCreate {
	vic.mutation.SetUpdatedAt(t)
	return vic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vic *VehicleImageCreate) SetNillableUpdatedAt(t *time.Time) *VehicleImageCreate {
	if t != nil {
		vic.SetUpdatedAt(*t)
	}
	return vic
}

// SetImage sets the "image" field.
func (vic *VehicleImageCreate) SetImage(s string) *VehicleImageCreate {
	vic.mutation.SetImage(s)
	return vic
}

// SetVehicleID sets the "vehicle" edge to the Vehicle entity by ID.
func (vic *VehicleImageCreate) SetVehicleID(id int) *VehicleImageCreate {
	vic.mutation.SetVehicleID(id)
	return vic
}

// SetNillableVehicleID sets the "vehicle" edge to the Vehicle entity by ID if the given value is not nil.
func (vic *VehicleImageCreate) SetNillableVehicleID(id *int) *VehicleImageCreate {
	if id != nil {
		vic = vic.SetVehicleID(*id)
	}
	return vic
}

// SetVehicle sets the "vehicle" edge to the Vehicle entity.
func (vic *VehicleImageCreate) SetVehicle(v *Vehicle) *VehicleImageCreate {
	return vic.SetVehicleID(v.ID)
}

// Mutation returns the VehicleImageMutation object of the builder.
func (vic *VehicleImageCreate) Mutation() *VehicleImageMutation {
	return vic.mutation
}

// Save creates the VehicleImage in the database.
func (vic *VehicleImageCreate) Save(ctx context.Context) (*VehicleImage, error) {
	vic.defaults()
	return withHooks(ctx, vic.sqlSave, vic.mutation, vic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vic *VehicleImageCreate) SaveX(ctx context.Context) *VehicleImage {
	v, err := vic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vic *VehicleImageCreate) Exec(ctx context.Context) error {
	_, err := vic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vic *VehicleImageCreate) ExecX(ctx context.Context) {
	if err := vic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vic *VehicleImageCreate) defaults() {
	if _, ok := vic.mutation.CreatedAt(); !ok {
		v := vehicleimage.DefaultCreatedAt()
		vic.mutation.SetCreatedAt(v)
	}
	if _, ok := vic.mutation.UpdatedAt(); !ok {
		v := vehicleimage.DefaultUpdatedAt()
		vic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vic *VehicleImageCreate) check() error {
	if _, ok := vic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VehicleImage.created_at"`)}
	}
	if _, ok := vic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "VehicleImage.updated_at"`)}
	}
	if _, ok := vic.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "VehicleImage.image"`)}
	}
	if v, ok := vic.mutation.Image(); ok {
		if err := vehicleimage.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "VehicleImage.image": %w`, err)}
		}
	}
	return nil
}

func (vic *VehicleImageCreate) sqlSave(ctx context.Context) (*VehicleImage, error) {
	if err := vic.check(); err != nil {
		return nil, err
	}
	_node, _spec := vic.createSpec()
	if err := sqlgraph.CreateNode(ctx, vic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vic.mutation.id = &_node.ID
	vic.mutation.done = true
	return _node, nil
}

func (vic *VehicleImageCreate) createSpec() (*VehicleImage, *sqlgraph.CreateSpec) {
	var (
		_node = &VehicleImage{config: vic.config}
		_spec = sqlgraph.NewCreateSpec(vehicleimage.Table, sqlgraph.NewFieldSpec(vehicleimage.FieldID, field.TypeInt))
	)
	if value, ok := vic.mutation.CreatedAt(); ok {
		_spec.SetField(vehicleimage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vic.mutation.UpdatedAt(); ok {
		_spec.SetField(vehicleimage.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vic.mutation.Image(); ok {
		_spec.SetField(vehicleimage.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if nodes := vic.mutation.VehicleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicleimage.VehicleTable,
			Columns: []string{vehicleimage.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vehicle_images = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VehicleImageCreateBulk is the builder for creating many VehicleImage entities in bulk.
type VehicleImageCreateBulk struct {
	config
	err      error
	builders []*VehicleImageCreate
}

// Save creates the VehicleImage entities in the database.
func (vicb *VehicleImageCreateBulk) Save(ctx context.Context) ([]*VehicleImage, error) {
	if vicb.err != nil {
		return nil, vicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vicb.builders))
	nodes := make([]*VehicleImage, len(vicb.builders))
	mutators := make([]Mutator, len(vicb.builders))
	for i := range vicb.builders {
		func(i int, root context.Context) {
			builder := vicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VehicleImageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vicb *VehicleImageCreateBulk) SaveX(ctx context.Context) []*VehicleImage {
	v, err := vicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vicb *VehicleImageCreateBulk) Exec(ctx context.Context) error {
	_, err := vicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vicb *VehicleImageCreateBulk) ExecX(ctx context.Context) {
	if err := vicb.Exec(ctx); err != nil {
		panic(err)
	}
}
