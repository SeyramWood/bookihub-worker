// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/ent/booking"
	"github.com/SeyramWood/ent/customercontact"
)

// CustomerContact is the model entity for the CustomerContact schema.
type CustomerContact struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// FullName holds the value of the "full_name" field.
	FullName string `json:"full_name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomerContactQuery when eager-loading is set.
	Edges           CustomerContactEdges `json:"edges"`
	booking_contact *int
	selectValues    sql.SelectValues
}

// CustomerContactEdges holds the relations/edges for other nodes in the graph.
type CustomerContactEdges struct {
	// Booking holds the value of the booking edge.
	Booking *Booking `json:"booking,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BookingOrErr returns the Booking value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerContactEdges) BookingOrErr() (*Booking, error) {
	if e.loadedTypes[0] {
		if e.Booking == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: booking.Label}
		}
		return e.Booking, nil
	}
	return nil, &NotLoadedError{edge: "booking"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomerContact) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customercontact.FieldID:
			values[i] = new(sql.NullInt64)
		case customercontact.FieldFullName, customercontact.FieldEmail, customercontact.FieldPhone:
			values[i] = new(sql.NullString)
		case customercontact.FieldCreatedAt, customercontact.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case customercontact.ForeignKeys[0]: // booking_contact
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomerContact fields.
func (cc *CustomerContact) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customercontact.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cc.ID = int(value.Int64)
		case customercontact.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cc.CreatedAt = value.Time
			}
		case customercontact.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cc.UpdatedAt = value.Time
			}
		case customercontact.FieldFullName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_name", values[i])
			} else if value.Valid {
				cc.FullName = value.String
			}
		case customercontact.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				cc.Email = value.String
			}
		case customercontact.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				cc.Phone = value.String
			}
		case customercontact.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field booking_contact", value)
			} else if value.Valid {
				cc.booking_contact = new(int)
				*cc.booking_contact = int(value.Int64)
			}
		default:
			cc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CustomerContact.
// This includes values selected through modifiers, order, etc.
func (cc *CustomerContact) Value(name string) (ent.Value, error) {
	return cc.selectValues.Get(name)
}

// QueryBooking queries the "booking" edge of the CustomerContact entity.
func (cc *CustomerContact) QueryBooking() *BookingQuery {
	return NewCustomerContactClient(cc.config).QueryBooking(cc)
}

// Update returns a builder for updating this CustomerContact.
// Note that you need to call CustomerContact.Unwrap() before calling this method if this CustomerContact
// was returned from a transaction, and the transaction was committed or rolled back.
func (cc *CustomerContact) Update() *CustomerContactUpdateOne {
	return NewCustomerContactClient(cc.config).UpdateOne(cc)
}

// Unwrap unwraps the CustomerContact entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cc *CustomerContact) Unwrap() *CustomerContact {
	_tx, ok := cc.config.driver.(*txDriver)
	if !ok {
		panic("ent: CustomerContact is not a transactional entity")
	}
	cc.config.driver = _tx.drv
	return cc
}

// String implements the fmt.Stringer.
func (cc *CustomerContact) String() string {
	var builder strings.Builder
	builder.WriteString("CustomerContact(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("full_name=")
	builder.WriteString(cc.FullName)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(cc.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(cc.Phone)
	builder.WriteByte(')')
	return builder.String()
}

// CustomerContacts is a parsable slice of CustomerContact.
type CustomerContacts []*CustomerContact
