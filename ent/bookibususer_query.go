// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/bookibus/ent/bookibususer"
	"github.com/SeyramWood/bookibus/ent/notification"
	"github.com/SeyramWood/bookibus/ent/predicate"
	"github.com/SeyramWood/bookibus/ent/user"
)

// BookibusUserQuery is the builder for querying BookibusUser entities.
type BookibusUserQuery struct {
	config
	ctx               *QueryContext
	order             []bookibususer.OrderOption
	inters            []Interceptor
	predicates        []predicate.BookibusUser
	withProfile       *UserQuery
	withNotifications *NotificationQuery
	modifiers         []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BookibusUserQuery builder.
func (buq *BookibusUserQuery) Where(ps ...predicate.BookibusUser) *BookibusUserQuery {
	buq.predicates = append(buq.predicates, ps...)
	return buq
}

// Limit the number of records to be returned by this query.
func (buq *BookibusUserQuery) Limit(limit int) *BookibusUserQuery {
	buq.ctx.Limit = &limit
	return buq
}

// Offset to start from.
func (buq *BookibusUserQuery) Offset(offset int) *BookibusUserQuery {
	buq.ctx.Offset = &offset
	return buq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (buq *BookibusUserQuery) Unique(unique bool) *BookibusUserQuery {
	buq.ctx.Unique = &unique
	return buq
}

// Order specifies how the records should be ordered.
func (buq *BookibusUserQuery) Order(o ...bookibususer.OrderOption) *BookibusUserQuery {
	buq.order = append(buq.order, o...)
	return buq
}

// QueryProfile chains the current query on the "profile" edge.
func (buq *BookibusUserQuery) QueryProfile() *UserQuery {
	query := (&UserClient{config: buq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := buq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := buq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bookibususer.Table, bookibususer.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, bookibususer.ProfileTable, bookibususer.ProfileColumn),
		)
		fromU = sqlgraph.SetNeighbors(buq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNotifications chains the current query on the "notifications" edge.
func (buq *BookibusUserQuery) QueryNotifications() *NotificationQuery {
	query := (&NotificationClient{config: buq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := buq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := buq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bookibususer.Table, bookibususer.FieldID, selector),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, bookibususer.NotificationsTable, bookibususer.NotificationsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(buq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BookibusUser entity from the query.
// Returns a *NotFoundError when no BookibusUser was found.
func (buq *BookibusUserQuery) First(ctx context.Context) (*BookibusUser, error) {
	nodes, err := buq.Limit(1).All(setContextOp(ctx, buq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{bookibususer.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (buq *BookibusUserQuery) FirstX(ctx context.Context) *BookibusUser {
	node, err := buq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BookibusUser ID from the query.
// Returns a *NotFoundError when no BookibusUser ID was found.
func (buq *BookibusUserQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = buq.Limit(1).IDs(setContextOp(ctx, buq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{bookibususer.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (buq *BookibusUserQuery) FirstIDX(ctx context.Context) int {
	id, err := buq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BookibusUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BookibusUser entity is found.
// Returns a *NotFoundError when no BookibusUser entities are found.
func (buq *BookibusUserQuery) Only(ctx context.Context) (*BookibusUser, error) {
	nodes, err := buq.Limit(2).All(setContextOp(ctx, buq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{bookibususer.Label}
	default:
		return nil, &NotSingularError{bookibususer.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (buq *BookibusUserQuery) OnlyX(ctx context.Context) *BookibusUser {
	node, err := buq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BookibusUser ID in the query.
// Returns a *NotSingularError when more than one BookibusUser ID is found.
// Returns a *NotFoundError when no entities are found.
func (buq *BookibusUserQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = buq.Limit(2).IDs(setContextOp(ctx, buq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{bookibususer.Label}
	default:
		err = &NotSingularError{bookibususer.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (buq *BookibusUserQuery) OnlyIDX(ctx context.Context) int {
	id, err := buq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BookibusUsers.
func (buq *BookibusUserQuery) All(ctx context.Context) ([]*BookibusUser, error) {
	ctx = setContextOp(ctx, buq.ctx, "All")
	if err := buq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BookibusUser, *BookibusUserQuery]()
	return withInterceptors[[]*BookibusUser](ctx, buq, qr, buq.inters)
}

// AllX is like All, but panics if an error occurs.
func (buq *BookibusUserQuery) AllX(ctx context.Context) []*BookibusUser {
	nodes, err := buq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BookibusUser IDs.
func (buq *BookibusUserQuery) IDs(ctx context.Context) (ids []int, err error) {
	if buq.ctx.Unique == nil && buq.path != nil {
		buq.Unique(true)
	}
	ctx = setContextOp(ctx, buq.ctx, "IDs")
	if err = buq.Select(bookibususer.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (buq *BookibusUserQuery) IDsX(ctx context.Context) []int {
	ids, err := buq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (buq *BookibusUserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, buq.ctx, "Count")
	if err := buq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, buq, querierCount[*BookibusUserQuery](), buq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (buq *BookibusUserQuery) CountX(ctx context.Context) int {
	count, err := buq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (buq *BookibusUserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, buq.ctx, "Exist")
	switch _, err := buq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (buq *BookibusUserQuery) ExistX(ctx context.Context) bool {
	exist, err := buq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BookibusUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (buq *BookibusUserQuery) Clone() *BookibusUserQuery {
	if buq == nil {
		return nil
	}
	return &BookibusUserQuery{
		config:            buq.config,
		ctx:               buq.ctx.Clone(),
		order:             append([]bookibususer.OrderOption{}, buq.order...),
		inters:            append([]Interceptor{}, buq.inters...),
		predicates:        append([]predicate.BookibusUser{}, buq.predicates...),
		withProfile:       buq.withProfile.Clone(),
		withNotifications: buq.withNotifications.Clone(),
		// clone intermediate query.
		sql:  buq.sql.Clone(),
		path: buq.path,
	}
}

// WithProfile tells the query-builder to eager-load the nodes that are connected to
// the "profile" edge. The optional arguments are used to configure the query builder of the edge.
func (buq *BookibusUserQuery) WithProfile(opts ...func(*UserQuery)) *BookibusUserQuery {
	query := (&UserClient{config: buq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	buq.withProfile = query
	return buq
}

// WithNotifications tells the query-builder to eager-load the nodes that are connected to
// the "notifications" edge. The optional arguments are used to configure the query builder of the edge.
func (buq *BookibusUserQuery) WithNotifications(opts ...func(*NotificationQuery)) *BookibusUserQuery {
	query := (&NotificationClient{config: buq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	buq.withNotifications = query
	return buq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BookibusUser.Query().
//		GroupBy(bookibususer.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (buq *BookibusUserQuery) GroupBy(field string, fields ...string) *BookibusUserGroupBy {
	buq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BookibusUserGroupBy{build: buq}
	grbuild.flds = &buq.ctx.Fields
	grbuild.label = bookibususer.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.BookibusUser.Query().
//		Select(bookibususer.FieldCreatedAt).
//		Scan(ctx, &v)
func (buq *BookibusUserQuery) Select(fields ...string) *BookibusUserSelect {
	buq.ctx.Fields = append(buq.ctx.Fields, fields...)
	sbuild := &BookibusUserSelect{BookibusUserQuery: buq}
	sbuild.label = bookibususer.Label
	sbuild.flds, sbuild.scan = &buq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BookibusUserSelect configured with the given aggregations.
func (buq *BookibusUserQuery) Aggregate(fns ...AggregateFunc) *BookibusUserSelect {
	return buq.Select().Aggregate(fns...)
}

func (buq *BookibusUserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range buq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, buq); err != nil {
				return err
			}
		}
	}
	for _, f := range buq.ctx.Fields {
		if !bookibususer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if buq.path != nil {
		prev, err := buq.path(ctx)
		if err != nil {
			return err
		}
		buq.sql = prev
	}
	return nil
}

func (buq *BookibusUserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BookibusUser, error) {
	var (
		nodes       = []*BookibusUser{}
		_spec       = buq.querySpec()
		loadedTypes = [2]bool{
			buq.withProfile != nil,
			buq.withNotifications != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BookibusUser).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BookibusUser{config: buq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(buq.modifiers) > 0 {
		_spec.Modifiers = buq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, buq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := buq.withProfile; query != nil {
		if err := buq.loadProfile(ctx, query, nodes, nil,
			func(n *BookibusUser, e *User) { n.Edges.Profile = e }); err != nil {
			return nil, err
		}
	}
	if query := buq.withNotifications; query != nil {
		if err := buq.loadNotifications(ctx, query, nodes,
			func(n *BookibusUser) { n.Edges.Notifications = []*Notification{} },
			func(n *BookibusUser, e *Notification) { n.Edges.Notifications = append(n.Edges.Notifications, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (buq *BookibusUserQuery) loadProfile(ctx context.Context, query *UserQuery, nodes []*BookibusUser, init func(*BookibusUser), assign func(*BookibusUser, *User)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*BookibusUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.User(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(bookibususer.ProfileColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.bookibus_user_profile
		if fk == nil {
			return fmt.Errorf(`foreign-key "bookibus_user_profile" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "bookibus_user_profile" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (buq *BookibusUserQuery) loadNotifications(ctx context.Context, query *NotificationQuery, nodes []*BookibusUser, init func(*BookibusUser), assign func(*BookibusUser, *Notification)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*BookibusUser)
	nids := make(map[int]map[*BookibusUser]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(bookibususer.NotificationsTable)
		s.Join(joinT).On(s.C(notification.FieldID), joinT.C(bookibususer.NotificationsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(bookibususer.NotificationsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(bookibususer.NotificationsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*BookibusUser]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Notification](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "notifications" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (buq *BookibusUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := buq.querySpec()
	if len(buq.modifiers) > 0 {
		_spec.Modifiers = buq.modifiers
	}
	_spec.Node.Columns = buq.ctx.Fields
	if len(buq.ctx.Fields) > 0 {
		_spec.Unique = buq.ctx.Unique != nil && *buq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, buq.driver, _spec)
}

func (buq *BookibusUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(bookibususer.Table, bookibususer.Columns, sqlgraph.NewFieldSpec(bookibususer.FieldID, field.TypeInt))
	_spec.From = buq.sql
	if unique := buq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if buq.path != nil {
		_spec.Unique = true
	}
	if fields := buq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bookibususer.FieldID)
		for i := range fields {
			if fields[i] != bookibususer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := buq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := buq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := buq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := buq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (buq *BookibusUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(buq.driver.Dialect())
	t1 := builder.Table(bookibususer.Table)
	columns := buq.ctx.Fields
	if len(columns) == 0 {
		columns = bookibususer.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if buq.sql != nil {
		selector = buq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if buq.ctx.Unique != nil && *buq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range buq.modifiers {
		m(selector)
	}
	for _, p := range buq.predicates {
		p(selector)
	}
	for _, p := range buq.order {
		p(selector)
	}
	if offset := buq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := buq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (buq *BookibusUserQuery) Modify(modifiers ...func(s *sql.Selector)) *BookibusUserSelect {
	buq.modifiers = append(buq.modifiers, modifiers...)
	return buq.Select()
}

// BookibusUserGroupBy is the group-by builder for BookibusUser entities.
type BookibusUserGroupBy struct {
	selector
	build *BookibusUserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bugb *BookibusUserGroupBy) Aggregate(fns ...AggregateFunc) *BookibusUserGroupBy {
	bugb.fns = append(bugb.fns, fns...)
	return bugb
}

// Scan applies the selector query and scans the result into the given value.
func (bugb *BookibusUserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bugb.build.ctx, "GroupBy")
	if err := bugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BookibusUserQuery, *BookibusUserGroupBy](ctx, bugb.build, bugb, bugb.build.inters, v)
}

func (bugb *BookibusUserGroupBy) sqlScan(ctx context.Context, root *BookibusUserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bugb.fns))
	for _, fn := range bugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bugb.flds)+len(bugb.fns))
		for _, f := range *bugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BookibusUserSelect is the builder for selecting fields of BookibusUser entities.
type BookibusUserSelect struct {
	*BookibusUserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bus *BookibusUserSelect) Aggregate(fns ...AggregateFunc) *BookibusUserSelect {
	bus.fns = append(bus.fns, fns...)
	return bus
}

// Scan applies the selector query and scans the result into the given value.
func (bus *BookibusUserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bus.ctx, "Select")
	if err := bus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BookibusUserQuery, *BookibusUserSelect](ctx, bus.BookibusUserQuery, bus, bus.inters, v)
}

func (bus *BookibusUserSelect) sqlScan(ctx context.Context, root *BookibusUserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bus.fns))
	for _, fn := range bus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (bus *BookibusUserSelect) Modify(modifiers ...func(s *sql.Selector)) *BookibusUserSelect {
	bus.modifiers = append(bus.modifiers, modifiers...)
	return bus
}
