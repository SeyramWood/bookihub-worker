// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/booking"
	"github.com/SeyramWood/ent/company"
	"github.com/SeyramWood/ent/companyuser"
	"github.com/SeyramWood/ent/predicate"
	"github.com/SeyramWood/ent/route"
	"github.com/SeyramWood/ent/trip"
	"github.com/SeyramWood/ent/vehicle"
)

// TripUpdate is the builder for updating Trip entities.
type TripUpdate struct {
	config
	hooks     []Hook
	mutation  *TripMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TripUpdate builder.
func (tu *TripUpdate) Where(ps ...predicate.Trip) *TripUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TripUpdate) SetUpdatedAt(t time.Time) *TripUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetDepartureDate sets the "departure_date" field.
func (tu *TripUpdate) SetDepartureDate(t time.Time) *TripUpdate {
	tu.mutation.SetDepartureDate(t)
	return tu
}

// SetNillableDepartureDate sets the "departure_date" field if the given value is not nil.
func (tu *TripUpdate) SetNillableDepartureDate(t *time.Time) *TripUpdate {
	if t != nil {
		tu.SetDepartureDate(*t)
	}
	return tu
}

// ClearDepartureDate clears the value of the "departure_date" field.
func (tu *TripUpdate) ClearDepartureDate() *TripUpdate {
	tu.mutation.ClearDepartureDate()
	return tu
}

// SetArrivalDate sets the "arrival_date" field.
func (tu *TripUpdate) SetArrivalDate(t time.Time) *TripUpdate {
	tu.mutation.SetArrivalDate(t)
	return tu
}

// SetNillableArrivalDate sets the "arrival_date" field if the given value is not nil.
func (tu *TripUpdate) SetNillableArrivalDate(t *time.Time) *TripUpdate {
	if t != nil {
		tu.SetArrivalDate(*t)
	}
	return tu
}

// ClearArrivalDate clears the value of the "arrival_date" field.
func (tu *TripUpdate) ClearArrivalDate() *TripUpdate {
	tu.mutation.ClearArrivalDate()
	return tu
}

// SetReturnDate sets the "return_date" field.
func (tu *TripUpdate) SetReturnDate(t time.Time) *TripUpdate {
	tu.mutation.SetReturnDate(t)
	return tu
}

// SetNillableReturnDate sets the "return_date" field if the given value is not nil.
func (tu *TripUpdate) SetNillableReturnDate(t *time.Time) *TripUpdate {
	if t != nil {
		tu.SetReturnDate(*t)
	}
	return tu
}

// ClearReturnDate clears the value of the "return_date" field.
func (tu *TripUpdate) ClearReturnDate() *TripUpdate {
	tu.mutation.ClearReturnDate()
	return tu
}

// SetType sets the "type" field.
func (tu *TripUpdate) SetType(t trip.Type) *TripUpdate {
	tu.mutation.SetType(t)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TripUpdate) SetNillableType(t *trip.Type) *TripUpdate {
	if t != nil {
		tu.SetType(*t)
	}
	return tu
}

// SetExteriorInspected sets the "exterior_inspected" field.
func (tu *TripUpdate) SetExteriorInspected(b bool) *TripUpdate {
	tu.mutation.SetExteriorInspected(b)
	return tu
}

// SetNillableExteriorInspected sets the "exterior_inspected" field if the given value is not nil.
func (tu *TripUpdate) SetNillableExteriorInspected(b *bool) *TripUpdate {
	if b != nil {
		tu.SetExteriorInspected(*b)
	}
	return tu
}

// SetInteriorInspected sets the "interior_inspected" field.
func (tu *TripUpdate) SetInteriorInspected(b bool) *TripUpdate {
	tu.mutation.SetInteriorInspected(b)
	return tu
}

// SetNillableInteriorInspected sets the "interior_inspected" field if the given value is not nil.
func (tu *TripUpdate) SetNillableInteriorInspected(b *bool) *TripUpdate {
	if b != nil {
		tu.SetInteriorInspected(*b)
	}
	return tu
}

// SetEngineCompartmentInspected sets the "engine_compartment_inspected" field.
func (tu *TripUpdate) SetEngineCompartmentInspected(b bool) *TripUpdate {
	tu.mutation.SetEngineCompartmentInspected(b)
	return tu
}

// SetNillableEngineCompartmentInspected sets the "engine_compartment_inspected" field if the given value is not nil.
func (tu *TripUpdate) SetNillableEngineCompartmentInspected(b *bool) *TripUpdate {
	if b != nil {
		tu.SetEngineCompartmentInspected(*b)
	}
	return tu
}

// SetBrakeAndSteeringInspected sets the "brake_and_steering_inspected" field.
func (tu *TripUpdate) SetBrakeAndSteeringInspected(b bool) *TripUpdate {
	tu.mutation.SetBrakeAndSteeringInspected(b)
	return tu
}

// SetNillableBrakeAndSteeringInspected sets the "brake_and_steering_inspected" field if the given value is not nil.
func (tu *TripUpdate) SetNillableBrakeAndSteeringInspected(b *bool) *TripUpdate {
	if b != nil {
		tu.SetBrakeAndSteeringInspected(*b)
	}
	return tu
}

// SetEmergencyEquipmentInspected sets the "emergency_equipment_inspected" field.
func (tu *TripUpdate) SetEmergencyEquipmentInspected(b bool) *TripUpdate {
	tu.mutation.SetEmergencyEquipmentInspected(b)
	return tu
}

// SetNillableEmergencyEquipmentInspected sets the "emergency_equipment_inspected" field if the given value is not nil.
func (tu *TripUpdate) SetNillableEmergencyEquipmentInspected(b *bool) *TripUpdate {
	if b != nil {
		tu.SetEmergencyEquipmentInspected(*b)
	}
	return tu
}

// SetFuelAndFluidsInspected sets the "fuel_and_fluids_inspected" field.
func (tu *TripUpdate) SetFuelAndFluidsInspected(b bool) *TripUpdate {
	tu.mutation.SetFuelAndFluidsInspected(b)
	return tu
}

// SetNillableFuelAndFluidsInspected sets the "fuel_and_fluids_inspected" field if the given value is not nil.
func (tu *TripUpdate) SetNillableFuelAndFluidsInspected(b *bool) *TripUpdate {
	if b != nil {
		tu.SetFuelAndFluidsInspected(*b)
	}
	return tu
}

// SetScheduled sets the "scheduled" field.
func (tu *TripUpdate) SetScheduled(b bool) *TripUpdate {
	tu.mutation.SetScheduled(b)
	return tu
}

// SetNillableScheduled sets the "scheduled" field if the given value is not nil.
func (tu *TripUpdate) SetNillableScheduled(b *bool) *TripUpdate {
	if b != nil {
		tu.SetScheduled(*b)
	}
	return tu
}

// SetSeatLeft sets the "seat_left" field.
func (tu *TripUpdate) SetSeatLeft(i int) *TripUpdate {
	tu.mutation.ResetSeatLeft()
	tu.mutation.SetSeatLeft(i)
	return tu
}

// SetNillableSeatLeft sets the "seat_left" field if the given value is not nil.
func (tu *TripUpdate) SetNillableSeatLeft(i *int) *TripUpdate {
	if i != nil {
		tu.SetSeatLeft(*i)
	}
	return tu
}

// AddSeatLeft adds i to the "seat_left" field.
func (tu *TripUpdate) AddSeatLeft(i int) *TripUpdate {
	tu.mutation.AddSeatLeft(i)
	return tu
}

// SetStatus sets the "status" field.
func (tu *TripUpdate) SetStatus(t trip.Status) *TripUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TripUpdate) SetNillableStatus(t *trip.Status) *TripUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// ClearStatus clears the value of the "status" field.
func (tu *TripUpdate) ClearStatus() *TripUpdate {
	tu.mutation.ClearStatus()
	return tu
}

// SetBoardingPoints sets the "boarding_points" field.
func (tu *TripUpdate) SetBoardingPoints(s []struct {
	ID       string "json:\"id\""
	Location string "json:\"location\""
}) *TripUpdate {
	tu.mutation.SetBoardingPoints(s)
	return tu
}

// AppendBoardingPoints appends s to the "boarding_points" field.
func (tu *TripUpdate) AppendBoardingPoints(s []struct {
	ID       string "json:\"id\""
	Location string "json:\"location\""
}) *TripUpdate {
	tu.mutation.AppendBoardingPoints(s)
	return tu
}

// ClearBoardingPoints clears the value of the "boarding_points" field.
func (tu *TripUpdate) ClearBoardingPoints() *TripUpdate {
	tu.mutation.ClearBoardingPoints()
	return tu
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (tu *TripUpdate) SetCompanyID(id int) *TripUpdate {
	tu.mutation.SetCompanyID(id)
	return tu
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (tu *TripUpdate) SetNillableCompanyID(id *int) *TripUpdate {
	if id != nil {
		tu = tu.SetCompanyID(*id)
	}
	return tu
}

// SetCompany sets the "company" edge to the Company entity.
func (tu *TripUpdate) SetCompany(c *Company) *TripUpdate {
	return tu.SetCompanyID(c.ID)
}

// SetDriverID sets the "driver" edge to the CompanyUser entity by ID.
func (tu *TripUpdate) SetDriverID(id int) *TripUpdate {
	tu.mutation.SetDriverID(id)
	return tu
}

// SetNillableDriverID sets the "driver" edge to the CompanyUser entity by ID if the given value is not nil.
func (tu *TripUpdate) SetNillableDriverID(id *int) *TripUpdate {
	if id != nil {
		tu = tu.SetDriverID(*id)
	}
	return tu
}

// SetDriver sets the "driver" edge to the CompanyUser entity.
func (tu *TripUpdate) SetDriver(c *CompanyUser) *TripUpdate {
	return tu.SetDriverID(c.ID)
}

// SetVehicleID sets the "vehicle" edge to the Vehicle entity by ID.
func (tu *TripUpdate) SetVehicleID(id int) *TripUpdate {
	tu.mutation.SetVehicleID(id)
	return tu
}

// SetNillableVehicleID sets the "vehicle" edge to the Vehicle entity by ID if the given value is not nil.
func (tu *TripUpdate) SetNillableVehicleID(id *int) *TripUpdate {
	if id != nil {
		tu = tu.SetVehicleID(*id)
	}
	return tu
}

// SetVehicle sets the "vehicle" edge to the Vehicle entity.
func (tu *TripUpdate) SetVehicle(v *Vehicle) *TripUpdate {
	return tu.SetVehicleID(v.ID)
}

// SetRouteID sets the "route" edge to the Route entity by ID.
func (tu *TripUpdate) SetRouteID(id int) *TripUpdate {
	tu.mutation.SetRouteID(id)
	return tu
}

// SetNillableRouteID sets the "route" edge to the Route entity by ID if the given value is not nil.
func (tu *TripUpdate) SetNillableRouteID(id *int) *TripUpdate {
	if id != nil {
		tu = tu.SetRouteID(*id)
	}
	return tu
}

// SetRoute sets the "route" edge to the Route entity.
func (tu *TripUpdate) SetRoute(r *Route) *TripUpdate {
	return tu.SetRouteID(r.ID)
}

// AddBookingIDs adds the "bookings" edge to the Booking entity by IDs.
func (tu *TripUpdate) AddBookingIDs(ids ...int) *TripUpdate {
	tu.mutation.AddBookingIDs(ids...)
	return tu
}

// AddBookings adds the "bookings" edges to the Booking entity.
func (tu *TripUpdate) AddBookings(b ...*Booking) *TripUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tu.AddBookingIDs(ids...)
}

// Mutation returns the TripMutation object of the builder.
func (tu *TripUpdate) Mutation() *TripMutation {
	return tu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (tu *TripUpdate) ClearCompany() *TripUpdate {
	tu.mutation.ClearCompany()
	return tu
}

// ClearDriver clears the "driver" edge to the CompanyUser entity.
func (tu *TripUpdate) ClearDriver() *TripUpdate {
	tu.mutation.ClearDriver()
	return tu
}

// ClearVehicle clears the "vehicle" edge to the Vehicle entity.
func (tu *TripUpdate) ClearVehicle() *TripUpdate {
	tu.mutation.ClearVehicle()
	return tu
}

// ClearRoute clears the "route" edge to the Route entity.
func (tu *TripUpdate) ClearRoute() *TripUpdate {
	tu.mutation.ClearRoute()
	return tu
}

// ClearBookings clears all "bookings" edges to the Booking entity.
func (tu *TripUpdate) ClearBookings() *TripUpdate {
	tu.mutation.ClearBookings()
	return tu
}

// RemoveBookingIDs removes the "bookings" edge to Booking entities by IDs.
func (tu *TripUpdate) RemoveBookingIDs(ids ...int) *TripUpdate {
	tu.mutation.RemoveBookingIDs(ids...)
	return tu
}

// RemoveBookings removes "bookings" edges to Booking entities.
func (tu *TripUpdate) RemoveBookings(b ...*Booking) *TripUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tu.RemoveBookingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TripUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TripUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TripUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TripUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TripUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := trip.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TripUpdate) check() error {
	if v, ok := tu.mutation.GetType(); ok {
		if err := trip.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Trip.type": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Status(); ok {
		if err := trip.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Trip.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TripUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TripUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TripUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(trip.Table, trip.Columns, sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(trip.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.DepartureDate(); ok {
		_spec.SetField(trip.FieldDepartureDate, field.TypeTime, value)
	}
	if tu.mutation.DepartureDateCleared() {
		_spec.ClearField(trip.FieldDepartureDate, field.TypeTime)
	}
	if value, ok := tu.mutation.ArrivalDate(); ok {
		_spec.SetField(trip.FieldArrivalDate, field.TypeTime, value)
	}
	if tu.mutation.ArrivalDateCleared() {
		_spec.ClearField(trip.FieldArrivalDate, field.TypeTime)
	}
	if value, ok := tu.mutation.ReturnDate(); ok {
		_spec.SetField(trip.FieldReturnDate, field.TypeTime, value)
	}
	if tu.mutation.ReturnDateCleared() {
		_spec.ClearField(trip.FieldReturnDate, field.TypeTime)
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(trip.FieldType, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.ExteriorInspected(); ok {
		_spec.SetField(trip.FieldExteriorInspected, field.TypeBool, value)
	}
	if value, ok := tu.mutation.InteriorInspected(); ok {
		_spec.SetField(trip.FieldInteriorInspected, field.TypeBool, value)
	}
	if value, ok := tu.mutation.EngineCompartmentInspected(); ok {
		_spec.SetField(trip.FieldEngineCompartmentInspected, field.TypeBool, value)
	}
	if value, ok := tu.mutation.BrakeAndSteeringInspected(); ok {
		_spec.SetField(trip.FieldBrakeAndSteeringInspected, field.TypeBool, value)
	}
	if value, ok := tu.mutation.EmergencyEquipmentInspected(); ok {
		_spec.SetField(trip.FieldEmergencyEquipmentInspected, field.TypeBool, value)
	}
	if value, ok := tu.mutation.FuelAndFluidsInspected(); ok {
		_spec.SetField(trip.FieldFuelAndFluidsInspected, field.TypeBool, value)
	}
	if value, ok := tu.mutation.Scheduled(); ok {
		_spec.SetField(trip.FieldScheduled, field.TypeBool, value)
	}
	if value, ok := tu.mutation.SeatLeft(); ok {
		_spec.SetField(trip.FieldSeatLeft, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedSeatLeft(); ok {
		_spec.AddField(trip.FieldSeatLeft, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(trip.FieldStatus, field.TypeEnum, value)
	}
	if tu.mutation.StatusCleared() {
		_spec.ClearField(trip.FieldStatus, field.TypeEnum)
	}
	if value, ok := tu.mutation.BoardingPoints(); ok {
		_spec.SetField(trip.FieldBoardingPoints, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedBoardingPoints(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trip.FieldBoardingPoints, value)
		})
	}
	if tu.mutation.BoardingPointsCleared() {
		_spec.ClearField(trip.FieldBoardingPoints, field.TypeJSON)
	}
	if tu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.CompanyTable,
			Columns: []string{trip.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.CompanyTable,
			Columns: []string{trip.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.DriverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.DriverTable,
			Columns: []string{trip.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.DriverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.DriverTable,
			Columns: []string{trip.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.VehicleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.VehicleTable,
			Columns: []string{trip.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.VehicleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.VehicleTable,
			Columns: []string{trip.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.RouteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.RouteTable,
			Columns: []string{trip.RouteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(route.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RouteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.RouteTable,
			Columns: []string{trip.RouteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(route.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.BookingsTable,
			Columns: []string{trip.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedBookingsIDs(); len(nodes) > 0 && !tu.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.BookingsTable,
			Columns: []string{trip.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.BookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.BookingsTable,
			Columns: []string{trip.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TripUpdateOne is the builder for updating a single Trip entity.
type TripUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TripMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TripUpdateOne) SetUpdatedAt(t time.Time) *TripUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetDepartureDate sets the "departure_date" field.
func (tuo *TripUpdateOne) SetDepartureDate(t time.Time) *TripUpdateOne {
	tuo.mutation.SetDepartureDate(t)
	return tuo
}

// SetNillableDepartureDate sets the "departure_date" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableDepartureDate(t *time.Time) *TripUpdateOne {
	if t != nil {
		tuo.SetDepartureDate(*t)
	}
	return tuo
}

// ClearDepartureDate clears the value of the "departure_date" field.
func (tuo *TripUpdateOne) ClearDepartureDate() *TripUpdateOne {
	tuo.mutation.ClearDepartureDate()
	return tuo
}

// SetArrivalDate sets the "arrival_date" field.
func (tuo *TripUpdateOne) SetArrivalDate(t time.Time) *TripUpdateOne {
	tuo.mutation.SetArrivalDate(t)
	return tuo
}

// SetNillableArrivalDate sets the "arrival_date" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableArrivalDate(t *time.Time) *TripUpdateOne {
	if t != nil {
		tuo.SetArrivalDate(*t)
	}
	return tuo
}

// ClearArrivalDate clears the value of the "arrival_date" field.
func (tuo *TripUpdateOne) ClearArrivalDate() *TripUpdateOne {
	tuo.mutation.ClearArrivalDate()
	return tuo
}

// SetReturnDate sets the "return_date" field.
func (tuo *TripUpdateOne) SetReturnDate(t time.Time) *TripUpdateOne {
	tuo.mutation.SetReturnDate(t)
	return tuo
}

// SetNillableReturnDate sets the "return_date" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableReturnDate(t *time.Time) *TripUpdateOne {
	if t != nil {
		tuo.SetReturnDate(*t)
	}
	return tuo
}

// ClearReturnDate clears the value of the "return_date" field.
func (tuo *TripUpdateOne) ClearReturnDate() *TripUpdateOne {
	tuo.mutation.ClearReturnDate()
	return tuo
}

// SetType sets the "type" field.
func (tuo *TripUpdateOne) SetType(t trip.Type) *TripUpdateOne {
	tuo.mutation.SetType(t)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableType(t *trip.Type) *TripUpdateOne {
	if t != nil {
		tuo.SetType(*t)
	}
	return tuo
}

// SetExteriorInspected sets the "exterior_inspected" field.
func (tuo *TripUpdateOne) SetExteriorInspected(b bool) *TripUpdateOne {
	tuo.mutation.SetExteriorInspected(b)
	return tuo
}

// SetNillableExteriorInspected sets the "exterior_inspected" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableExteriorInspected(b *bool) *TripUpdateOne {
	if b != nil {
		tuo.SetExteriorInspected(*b)
	}
	return tuo
}

// SetInteriorInspected sets the "interior_inspected" field.
func (tuo *TripUpdateOne) SetInteriorInspected(b bool) *TripUpdateOne {
	tuo.mutation.SetInteriorInspected(b)
	return tuo
}

// SetNillableInteriorInspected sets the "interior_inspected" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableInteriorInspected(b *bool) *TripUpdateOne {
	if b != nil {
		tuo.SetInteriorInspected(*b)
	}
	return tuo
}

// SetEngineCompartmentInspected sets the "engine_compartment_inspected" field.
func (tuo *TripUpdateOne) SetEngineCompartmentInspected(b bool) *TripUpdateOne {
	tuo.mutation.SetEngineCompartmentInspected(b)
	return tuo
}

// SetNillableEngineCompartmentInspected sets the "engine_compartment_inspected" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableEngineCompartmentInspected(b *bool) *TripUpdateOne {
	if b != nil {
		tuo.SetEngineCompartmentInspected(*b)
	}
	return tuo
}

// SetBrakeAndSteeringInspected sets the "brake_and_steering_inspected" field.
func (tuo *TripUpdateOne) SetBrakeAndSteeringInspected(b bool) *TripUpdateOne {
	tuo.mutation.SetBrakeAndSteeringInspected(b)
	return tuo
}

// SetNillableBrakeAndSteeringInspected sets the "brake_and_steering_inspected" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableBrakeAndSteeringInspected(b *bool) *TripUpdateOne {
	if b != nil {
		tuo.SetBrakeAndSteeringInspected(*b)
	}
	return tuo
}

// SetEmergencyEquipmentInspected sets the "emergency_equipment_inspected" field.
func (tuo *TripUpdateOne) SetEmergencyEquipmentInspected(b bool) *TripUpdateOne {
	tuo.mutation.SetEmergencyEquipmentInspected(b)
	return tuo
}

// SetNillableEmergencyEquipmentInspected sets the "emergency_equipment_inspected" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableEmergencyEquipmentInspected(b *bool) *TripUpdateOne {
	if b != nil {
		tuo.SetEmergencyEquipmentInspected(*b)
	}
	return tuo
}

// SetFuelAndFluidsInspected sets the "fuel_and_fluids_inspected" field.
func (tuo *TripUpdateOne) SetFuelAndFluidsInspected(b bool) *TripUpdateOne {
	tuo.mutation.SetFuelAndFluidsInspected(b)
	return tuo
}

// SetNillableFuelAndFluidsInspected sets the "fuel_and_fluids_inspected" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableFuelAndFluidsInspected(b *bool) *TripUpdateOne {
	if b != nil {
		tuo.SetFuelAndFluidsInspected(*b)
	}
	return tuo
}

// SetScheduled sets the "scheduled" field.
func (tuo *TripUpdateOne) SetScheduled(b bool) *TripUpdateOne {
	tuo.mutation.SetScheduled(b)
	return tuo
}

// SetNillableScheduled sets the "scheduled" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableScheduled(b *bool) *TripUpdateOne {
	if b != nil {
		tuo.SetScheduled(*b)
	}
	return tuo
}

// SetSeatLeft sets the "seat_left" field.
func (tuo *TripUpdateOne) SetSeatLeft(i int) *TripUpdateOne {
	tuo.mutation.ResetSeatLeft()
	tuo.mutation.SetSeatLeft(i)
	return tuo
}

// SetNillableSeatLeft sets the "seat_left" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableSeatLeft(i *int) *TripUpdateOne {
	if i != nil {
		tuo.SetSeatLeft(*i)
	}
	return tuo
}

// AddSeatLeft adds i to the "seat_left" field.
func (tuo *TripUpdateOne) AddSeatLeft(i int) *TripUpdateOne {
	tuo.mutation.AddSeatLeft(i)
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TripUpdateOne) SetStatus(t trip.Status) *TripUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableStatus(t *trip.Status) *TripUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// ClearStatus clears the value of the "status" field.
func (tuo *TripUpdateOne) ClearStatus() *TripUpdateOne {
	tuo.mutation.ClearStatus()
	return tuo
}

// SetBoardingPoints sets the "boarding_points" field.
func (tuo *TripUpdateOne) SetBoardingPoints(s []struct {
	ID       string "json:\"id\""
	Location string "json:\"location\""
}) *TripUpdateOne {
	tuo.mutation.SetBoardingPoints(s)
	return tuo
}

// AppendBoardingPoints appends s to the "boarding_points" field.
func (tuo *TripUpdateOne) AppendBoardingPoints(s []struct {
	ID       string "json:\"id\""
	Location string "json:\"location\""
}) *TripUpdateOne {
	tuo.mutation.AppendBoardingPoints(s)
	return tuo
}

// ClearBoardingPoints clears the value of the "boarding_points" field.
func (tuo *TripUpdateOne) ClearBoardingPoints() *TripUpdateOne {
	tuo.mutation.ClearBoardingPoints()
	return tuo
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (tuo *TripUpdateOne) SetCompanyID(id int) *TripUpdateOne {
	tuo.mutation.SetCompanyID(id)
	return tuo
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableCompanyID(id *int) *TripUpdateOne {
	if id != nil {
		tuo = tuo.SetCompanyID(*id)
	}
	return tuo
}

// SetCompany sets the "company" edge to the Company entity.
func (tuo *TripUpdateOne) SetCompany(c *Company) *TripUpdateOne {
	return tuo.SetCompanyID(c.ID)
}

// SetDriverID sets the "driver" edge to the CompanyUser entity by ID.
func (tuo *TripUpdateOne) SetDriverID(id int) *TripUpdateOne {
	tuo.mutation.SetDriverID(id)
	return tuo
}

// SetNillableDriverID sets the "driver" edge to the CompanyUser entity by ID if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableDriverID(id *int) *TripUpdateOne {
	if id != nil {
		tuo = tuo.SetDriverID(*id)
	}
	return tuo
}

// SetDriver sets the "driver" edge to the CompanyUser entity.
func (tuo *TripUpdateOne) SetDriver(c *CompanyUser) *TripUpdateOne {
	return tuo.SetDriverID(c.ID)
}

// SetVehicleID sets the "vehicle" edge to the Vehicle entity by ID.
func (tuo *TripUpdateOne) SetVehicleID(id int) *TripUpdateOne {
	tuo.mutation.SetVehicleID(id)
	return tuo
}

// SetNillableVehicleID sets the "vehicle" edge to the Vehicle entity by ID if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableVehicleID(id *int) *TripUpdateOne {
	if id != nil {
		tuo = tuo.SetVehicleID(*id)
	}
	return tuo
}

// SetVehicle sets the "vehicle" edge to the Vehicle entity.
func (tuo *TripUpdateOne) SetVehicle(v *Vehicle) *TripUpdateOne {
	return tuo.SetVehicleID(v.ID)
}

// SetRouteID sets the "route" edge to the Route entity by ID.
func (tuo *TripUpdateOne) SetRouteID(id int) *TripUpdateOne {
	tuo.mutation.SetRouteID(id)
	return tuo
}

// SetNillableRouteID sets the "route" edge to the Route entity by ID if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableRouteID(id *int) *TripUpdateOne {
	if id != nil {
		tuo = tuo.SetRouteID(*id)
	}
	return tuo
}

// SetRoute sets the "route" edge to the Route entity.
func (tuo *TripUpdateOne) SetRoute(r *Route) *TripUpdateOne {
	return tuo.SetRouteID(r.ID)
}

// AddBookingIDs adds the "bookings" edge to the Booking entity by IDs.
func (tuo *TripUpdateOne) AddBookingIDs(ids ...int) *TripUpdateOne {
	tuo.mutation.AddBookingIDs(ids...)
	return tuo
}

// AddBookings adds the "bookings" edges to the Booking entity.
func (tuo *TripUpdateOne) AddBookings(b ...*Booking) *TripUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tuo.AddBookingIDs(ids...)
}

// Mutation returns the TripMutation object of the builder.
func (tuo *TripUpdateOne) Mutation() *TripMutation {
	return tuo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (tuo *TripUpdateOne) ClearCompany() *TripUpdateOne {
	tuo.mutation.ClearCompany()
	return tuo
}

// ClearDriver clears the "driver" edge to the CompanyUser entity.
func (tuo *TripUpdateOne) ClearDriver() *TripUpdateOne {
	tuo.mutation.ClearDriver()
	return tuo
}

// ClearVehicle clears the "vehicle" edge to the Vehicle entity.
func (tuo *TripUpdateOne) ClearVehicle() *TripUpdateOne {
	tuo.mutation.ClearVehicle()
	return tuo
}

// ClearRoute clears the "route" edge to the Route entity.
func (tuo *TripUpdateOne) ClearRoute() *TripUpdateOne {
	tuo.mutation.ClearRoute()
	return tuo
}

// ClearBookings clears all "bookings" edges to the Booking entity.
func (tuo *TripUpdateOne) ClearBookings() *TripUpdateOne {
	tuo.mutation.ClearBookings()
	return tuo
}

// RemoveBookingIDs removes the "bookings" edge to Booking entities by IDs.
func (tuo *TripUpdateOne) RemoveBookingIDs(ids ...int) *TripUpdateOne {
	tuo.mutation.RemoveBookingIDs(ids...)
	return tuo
}

// RemoveBookings removes "bookings" edges to Booking entities.
func (tuo *TripUpdateOne) RemoveBookings(b ...*Booking) *TripUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tuo.RemoveBookingIDs(ids...)
}

// Where appends a list predicates to the TripUpdate builder.
func (tuo *TripUpdateOne) Where(ps ...predicate.Trip) *TripUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TripUpdateOne) Select(field string, fields ...string) *TripUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Trip entity.
func (tuo *TripUpdateOne) Save(ctx context.Context) (*Trip, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TripUpdateOne) SaveX(ctx context.Context) *Trip {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TripUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TripUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TripUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := trip.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TripUpdateOne) check() error {
	if v, ok := tuo.mutation.GetType(); ok {
		if err := trip.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Trip.type": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Status(); ok {
		if err := trip.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Trip.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TripUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TripUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TripUpdateOne) sqlSave(ctx context.Context) (_node *Trip, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trip.Table, trip.Columns, sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Trip.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trip.FieldID)
		for _, f := range fields {
			if !trip.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != trip.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(trip.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.DepartureDate(); ok {
		_spec.SetField(trip.FieldDepartureDate, field.TypeTime, value)
	}
	if tuo.mutation.DepartureDateCleared() {
		_spec.ClearField(trip.FieldDepartureDate, field.TypeTime)
	}
	if value, ok := tuo.mutation.ArrivalDate(); ok {
		_spec.SetField(trip.FieldArrivalDate, field.TypeTime, value)
	}
	if tuo.mutation.ArrivalDateCleared() {
		_spec.ClearField(trip.FieldArrivalDate, field.TypeTime)
	}
	if value, ok := tuo.mutation.ReturnDate(); ok {
		_spec.SetField(trip.FieldReturnDate, field.TypeTime, value)
	}
	if tuo.mutation.ReturnDateCleared() {
		_spec.ClearField(trip.FieldReturnDate, field.TypeTime)
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(trip.FieldType, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.ExteriorInspected(); ok {
		_spec.SetField(trip.FieldExteriorInspected, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.InteriorInspected(); ok {
		_spec.SetField(trip.FieldInteriorInspected, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.EngineCompartmentInspected(); ok {
		_spec.SetField(trip.FieldEngineCompartmentInspected, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.BrakeAndSteeringInspected(); ok {
		_spec.SetField(trip.FieldBrakeAndSteeringInspected, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.EmergencyEquipmentInspected(); ok {
		_spec.SetField(trip.FieldEmergencyEquipmentInspected, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.FuelAndFluidsInspected(); ok {
		_spec.SetField(trip.FieldFuelAndFluidsInspected, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.Scheduled(); ok {
		_spec.SetField(trip.FieldScheduled, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.SeatLeft(); ok {
		_spec.SetField(trip.FieldSeatLeft, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedSeatLeft(); ok {
		_spec.AddField(trip.FieldSeatLeft, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(trip.FieldStatus, field.TypeEnum, value)
	}
	if tuo.mutation.StatusCleared() {
		_spec.ClearField(trip.FieldStatus, field.TypeEnum)
	}
	if value, ok := tuo.mutation.BoardingPoints(); ok {
		_spec.SetField(trip.FieldBoardingPoints, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedBoardingPoints(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trip.FieldBoardingPoints, value)
		})
	}
	if tuo.mutation.BoardingPointsCleared() {
		_spec.ClearField(trip.FieldBoardingPoints, field.TypeJSON)
	}
	if tuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.CompanyTable,
			Columns: []string{trip.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.CompanyTable,
			Columns: []string{trip.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.DriverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.DriverTable,
			Columns: []string{trip.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.DriverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.DriverTable,
			Columns: []string{trip.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.VehicleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.VehicleTable,
			Columns: []string{trip.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.VehicleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.VehicleTable,
			Columns: []string{trip.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.RouteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.RouteTable,
			Columns: []string{trip.RouteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(route.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RouteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.RouteTable,
			Columns: []string{trip.RouteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(route.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.BookingsTable,
			Columns: []string{trip.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedBookingsIDs(); len(nodes) > 0 && !tuo.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.BookingsTable,
			Columns: []string{trip.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.BookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.BookingsTable,
			Columns: []string{trip.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Trip{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
