// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/bookibus/ent/booking"
	"github.com/SeyramWood/bookibus/ent/company"
	"github.com/SeyramWood/bookibus/ent/parcel"
	"github.com/SeyramWood/bookibus/ent/transaction"
)

// TransactionCreate is the builder for creating a Transaction entity.
type TransactionCreate struct {
	config
	mutation *TransactionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tc *TransactionCreate) SetCreatedAt(t time.Time) *TransactionCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableCreatedAt(t *time.Time) *TransactionCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TransactionCreate) SetUpdatedAt(t time.Time) *TransactionCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableUpdatedAt(t *time.Time) *TransactionCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetReference sets the "reference" field.
func (tc *TransactionCreate) SetReference(s string) *TransactionCreate {
	tc.mutation.SetReference(s)
	return tc
}

// SetAmount sets the "amount" field.
func (tc *TransactionCreate) SetAmount(f float64) *TransactionCreate {
	tc.mutation.SetAmount(f)
	return tc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableAmount(f *float64) *TransactionCreate {
	if f != nil {
		tc.SetAmount(*f)
	}
	return tc
}

// SetVat sets the "vat" field.
func (tc *TransactionCreate) SetVat(f float64) *TransactionCreate {
	tc.mutation.SetVat(f)
	return tc
}

// SetNillableVat sets the "vat" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableVat(f *float64) *TransactionCreate {
	if f != nil {
		tc.SetVat(*f)
	}
	return tc
}

// SetTransactionFee sets the "transaction_fee" field.
func (tc *TransactionCreate) SetTransactionFee(f float64) *TransactionCreate {
	tc.mutation.SetTransactionFee(f)
	return tc
}

// SetNillableTransactionFee sets the "transaction_fee" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableTransactionFee(f *float64) *TransactionCreate {
	if f != nil {
		tc.SetTransactionFee(*f)
	}
	return tc
}

// SetCancellationFee sets the "cancellation_fee" field.
func (tc *TransactionCreate) SetCancellationFee(f float64) *TransactionCreate {
	tc.mutation.SetCancellationFee(f)
	return tc
}

// SetNillableCancellationFee sets the "cancellation_fee" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableCancellationFee(f *float64) *TransactionCreate {
	if f != nil {
		tc.SetCancellationFee(*f)
	}
	return tc
}

// SetPaidAt sets the "paid_at" field.
func (tc *TransactionCreate) SetPaidAt(t time.Time) *TransactionCreate {
	tc.mutation.SetPaidAt(t)
	return tc
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (tc *TransactionCreate) SetNillablePaidAt(t *time.Time) *TransactionCreate {
	if t != nil {
		tc.SetPaidAt(*t)
	}
	return tc
}

// SetCanceledAt sets the "canceled_at" field.
func (tc *TransactionCreate) SetCanceledAt(t time.Time) *TransactionCreate {
	tc.mutation.SetCanceledAt(t)
	return tc
}

// SetNillableCanceledAt sets the "canceled_at" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableCanceledAt(t *time.Time) *TransactionCreate {
	if t != nil {
		tc.SetCanceledAt(*t)
	}
	return tc
}

// SetChannel sets the "channel" field.
func (tc *TransactionCreate) SetChannel(t transaction.Channel) *TransactionCreate {
	tc.mutation.SetChannel(t)
	return tc
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableChannel(t *transaction.Channel) *TransactionCreate {
	if t != nil {
		tc.SetChannel(*t)
	}
	return tc
}

// SetTansKind sets the "tans_kind" field.
func (tc *TransactionCreate) SetTansKind(tk transaction.TansKind) *TransactionCreate {
	tc.mutation.SetTansKind(tk)
	return tc
}

// SetNillableTansKind sets the "tans_kind" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableTansKind(tk *transaction.TansKind) *TransactionCreate {
	if tk != nil {
		tc.SetTansKind(*tk)
	}
	return tc
}

// SetBookingID sets the "booking" edge to the Booking entity by ID.
func (tc *TransactionCreate) SetBookingID(id int) *TransactionCreate {
	tc.mutation.SetBookingID(id)
	return tc
}

// SetNillableBookingID sets the "booking" edge to the Booking entity by ID if the given value is not nil.
func (tc *TransactionCreate) SetNillableBookingID(id *int) *TransactionCreate {
	if id != nil {
		tc = tc.SetBookingID(*id)
	}
	return tc
}

// SetBooking sets the "booking" edge to the Booking entity.
func (tc *TransactionCreate) SetBooking(b *Booking) *TransactionCreate {
	return tc.SetBookingID(b.ID)
}

// SetParcelID sets the "parcel" edge to the Parcel entity by ID.
func (tc *TransactionCreate) SetParcelID(id int) *TransactionCreate {
	tc.mutation.SetParcelID(id)
	return tc
}

// SetNillableParcelID sets the "parcel" edge to the Parcel entity by ID if the given value is not nil.
func (tc *TransactionCreate) SetNillableParcelID(id *int) *TransactionCreate {
	if id != nil {
		tc = tc.SetParcelID(*id)
	}
	return tc
}

// SetParcel sets the "parcel" edge to the Parcel entity.
func (tc *TransactionCreate) SetParcel(p *Parcel) *TransactionCreate {
	return tc.SetParcelID(p.ID)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (tc *TransactionCreate) SetCompanyID(id int) *TransactionCreate {
	tc.mutation.SetCompanyID(id)
	return tc
}

// SetCompany sets the "company" edge to the Company entity.
func (tc *TransactionCreate) SetCompany(c *Company) *TransactionCreate {
	return tc.SetCompanyID(c.ID)
}

// Mutation returns the TransactionMutation object of the builder.
func (tc *TransactionCreate) Mutation() *TransactionMutation {
	return tc.mutation
}

// Save creates the Transaction in the database.
func (tc *TransactionCreate) Save(ctx context.Context) (*Transaction, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransactionCreate) SaveX(ctx context.Context) *Transaction {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TransactionCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TransactionCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TransactionCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := transaction.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := transaction.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.Amount(); !ok {
		v := transaction.DefaultAmount
		tc.mutation.SetAmount(v)
	}
	if _, ok := tc.mutation.Vat(); !ok {
		v := transaction.DefaultVat
		tc.mutation.SetVat(v)
	}
	if _, ok := tc.mutation.TransactionFee(); !ok {
		v := transaction.DefaultTransactionFee
		tc.mutation.SetTransactionFee(v)
	}
	if _, ok := tc.mutation.CancellationFee(); !ok {
		v := transaction.DefaultCancellationFee
		tc.mutation.SetCancellationFee(v)
	}
	if _, ok := tc.mutation.Channel(); !ok {
		v := transaction.DefaultChannel
		tc.mutation.SetChannel(v)
	}
	if _, ok := tc.mutation.TansKind(); !ok {
		v := transaction.DefaultTansKind
		tc.mutation.SetTansKind(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransactionCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Transaction.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Transaction.updated_at"`)}
	}
	if _, ok := tc.mutation.Reference(); !ok {
		return &ValidationError{Name: "reference", err: errors.New(`ent: missing required field "Transaction.reference"`)}
	}
	if v, ok := tc.mutation.Reference(); ok {
		if err := transaction.ReferenceValidator(v); err != nil {
			return &ValidationError{Name: "reference", err: fmt.Errorf(`ent: validator failed for field "Transaction.reference": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Transaction.amount"`)}
	}
	if _, ok := tc.mutation.Vat(); !ok {
		return &ValidationError{Name: "vat", err: errors.New(`ent: missing required field "Transaction.vat"`)}
	}
	if _, ok := tc.mutation.TransactionFee(); !ok {
		return &ValidationError{Name: "transaction_fee", err: errors.New(`ent: missing required field "Transaction.transaction_fee"`)}
	}
	if _, ok := tc.mutation.CancellationFee(); !ok {
		return &ValidationError{Name: "cancellation_fee", err: errors.New(`ent: missing required field "Transaction.cancellation_fee"`)}
	}
	if _, ok := tc.mutation.Channel(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`ent: missing required field "Transaction.channel"`)}
	}
	if v, ok := tc.mutation.Channel(); ok {
		if err := transaction.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`ent: validator failed for field "Transaction.channel": %w`, err)}
		}
	}
	if _, ok := tc.mutation.TansKind(); !ok {
		return &ValidationError{Name: "tans_kind", err: errors.New(`ent: missing required field "Transaction.tans_kind"`)}
	}
	if v, ok := tc.mutation.TansKind(); ok {
		if err := transaction.TansKindValidator(v); err != nil {
			return &ValidationError{Name: "tans_kind", err: fmt.Errorf(`ent: validator failed for field "Transaction.tans_kind": %w`, err)}
		}
	}
	if _, ok := tc.mutation.CompanyID(); !ok {
		return &ValidationError{Name: "company", err: errors.New(`ent: missing required edge "Transaction.company"`)}
	}
	return nil
}

func (tc *TransactionCreate) sqlSave(ctx context.Context) (*Transaction, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TransactionCreate) createSpec() (*Transaction, *sqlgraph.CreateSpec) {
	var (
		_node = &Transaction{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(transaction.Table, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(transaction.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.Reference(); ok {
		_spec.SetField(transaction.FieldReference, field.TypeString, value)
		_node.Reference = value
	}
	if value, ok := tc.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := tc.mutation.Vat(); ok {
		_spec.SetField(transaction.FieldVat, field.TypeFloat64, value)
		_node.Vat = value
	}
	if value, ok := tc.mutation.TransactionFee(); ok {
		_spec.SetField(transaction.FieldTransactionFee, field.TypeFloat64, value)
		_node.TransactionFee = value
	}
	if value, ok := tc.mutation.CancellationFee(); ok {
		_spec.SetField(transaction.FieldCancellationFee, field.TypeFloat64, value)
		_node.CancellationFee = value
	}
	if value, ok := tc.mutation.PaidAt(); ok {
		_spec.SetField(transaction.FieldPaidAt, field.TypeTime, value)
		_node.PaidAt = value
	}
	if value, ok := tc.mutation.CanceledAt(); ok {
		_spec.SetField(transaction.FieldCanceledAt, field.TypeTime, value)
		_node.CanceledAt = value
	}
	if value, ok := tc.mutation.Channel(); ok {
		_spec.SetField(transaction.FieldChannel, field.TypeEnum, value)
		_node.Channel = value
	}
	if value, ok := tc.mutation.TansKind(); ok {
		_spec.SetField(transaction.FieldTansKind, field.TypeEnum, value)
		_node.TansKind = value
	}
	if nodes := tc.mutation.BookingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transaction.BookingTable,
			Columns: []string{transaction.BookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.booking_transaction = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transaction.ParcelTable,
			Columns: []string{transaction.ParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.parcel_transaction = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.CompanyTable,
			Columns: []string{transaction.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_transactions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TransactionCreateBulk is the builder for creating many Transaction entities in bulk.
type TransactionCreateBulk struct {
	config
	err      error
	builders []*TransactionCreate
}

// Save creates the Transaction entities in the database.
func (tcb *TransactionCreateBulk) Save(ctx context.Context) ([]*Transaction, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transaction, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransactionCreateBulk) SaveX(ctx context.Context) []*Transaction {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TransactionCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TransactionCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
